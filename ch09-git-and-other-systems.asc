[[ch09-git-and-other-systems]]
//////////////////////////
== Git and Other Systems
//////////////////////////
== Git과 여타 버전 관리 시스템

//////////////////////////
The world isn't perfect.
Usually, you can't immediately switch every project you come in contact with to Git.
Sometimes you're stuck on a project using another VCS, and wish it was Git.
We'll spend the first part of this chapter learning about ways to use Git as a client when the project you're working on is hosted in a different system.
//////////////////////////
세상 일은 뜻대로 되지 않는다.
진행하던 프로젝트를 모두 한 번에 Git 저장소로 옮기기는 어렵다.
Git으로 바꾸고 싶은 프로젝트가 특정 VCS 시스템에 매우 의존적으로 개발 됐을 수도 있다.
이 장의 앞부분에서는 기존 VCS 시스템의 클라이언트로 Git을 사용하는 방법을 살펴본다.

//////////////////////////
At some point, you may want to convert your existing project to Git.
The second part of this chapter covers how to migrate your project into Git from several specific systems, as well as a method that will work if no pre-built import tool exists.
//////////////////////////
언젠가 기존 프로젝트 환경을 Git으로 변경하고 싶게 될 것이다.
이 장의 뒷 부분에서는 프로젝트를 Git으로 변경하는 방법에 대해 다룬다. 미리 만들어진 도구가 없더라도 스크립트를 직접 만들어서 옮기는 방법도 설명한다. 그래서 잘 쓰지 않는 VCS를 사용하고 있더라도 Git으로 옮길 수 있을 것이다.

//////////////////////////
=== Git as a Client
//////////////////////////
=== Git: 범용 Client

(((Git as a client)))
//////////////////////////
Git provides such a nice experience for developers that many people have figured out how to use it on their workstation, even if the rest of their team is using an entirely different VCS.
There are a number of these adapters, called “bridges,” available.
Here we'll cover the ones you're most likely to run into in the wild.
//////////////////////////
Git을 배운 많은 사람들은 만족스러워 한다. 다른 모든 팀원들이 Git 아닌 다른 VCS 시스템을 사용하고 홀로 Git을 사용하더라도 만족스럽다.
Git은 이렇게 다른 VCS 시스템과 연결해 주는 여러 “bridge” 를 제공한다.
이어지는 내용을 통해 하나씩 둘러보자.

include::book/09-git-and-other-scms/sections/client-svn.asc[]

include::book/09-git-and-other-scms/sections/client-hg.asc[]

include::book/09-git-and-other-scms/sections/client-p4.asc[]

[[_migrating]]
//////////////////////////
=== Migrating to Git
//////////////////////////
=== Git으로 옮기기

(((Migrating to Git)))
//////////////////////////
If you have an existing codebase in another VCS but you've decided to start using Git, you must migrate your project one way or another.
This section goes over some importers for common systems, and then demonstrates how to develop your own custom importer.
You'll learn how to import data from several of the bigger professionally used SCM systems, because they make up the majority of users who are switching, and because high-quality tools for them are easy to come by.
//////////////////////////
다른 VCS를 사용하는 프로젝트에서 Git을 사용하고 싶다면 우선 프로젝트를 Git으로 이전(Migrate)해야 한다.
이번 절에서는 Git에 들어 있는 Importer를 살펴보고 직접 Importer를 만드는 방법도 알아본다.
우선 많이 사용하는 SCM 시스템으로부터 프로젝트를 이전하는 방법을 살펴본다. 아마도 저장소를 옮기려고 하는 대부분의 사람들은 이 방법을 참고하면 된다. 아주 괜찮은 Importer가 이미 Git에 들어 있다.

include::book/09-git-and-other-scms/sections/import-svn.asc[]

include::book/09-git-and-other-scms/sections/import-hg.asc[]

include::book/09-git-and-other-scms/sections/import-p4.asc[]

include::book/09-git-and-other-scms/sections/import-tfs.asc[]

include::book/09-git-and-other-scms/sections/import-custom.asc[]

//////////////////////////
=== Summary
//////////////////////////
=== 요약

//////////////////////////
You should feel comfortable using Git as a client for other version-control systems, or importing nearly any existing repository into Git without losing data.
In the next chapter, we'll cover the raw internals of Git so you can craft every single byte, if need be.
//////////////////////////
다른 VCS 서버의 클라이언트로 Git을 사용하거나, 다른 VCS 저장소를 Git 저장소로 손실 없이 옮기는 방법에 대해 알아 봤다.
다음 장에서는 Git 내부를 까본다. 필요하다면 바이트 하나하나 다루는 것도 가능하다.
