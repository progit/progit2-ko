//////////////////////////
=== Recording Changes to the Repository
//////////////////////////
=== 수정하고 저장소에 저장하기

//////////////////////////
You have a bona fide Git repository and a checkout or working copy of the files for that project.
You need to make some changes and commit snapshots of those changes into your repository each time the project reaches a state you want to record.
//////////////////////////
만질 수 있는 Git 저장소를 하나 만들었고 워킹 디렉토리에 Checkout도 했다.
이제는 파일을 수정하고 파일의 스냅샷을 커밋해 보자. 파일을 수정하다가 저장하고 싶으면 스냅샷을 커밋한다.

//////////////////////////
Remember that each file in your working directory can be in one of two states: tracked or untracked.
Tracked files are files that were in the last snapshot; they can be unmodified, modified, or staged.
Untracked files are everything else – any files in your working directory that were not in your last snapshot and are not in your staging area.
When you first clone a repository, all of your files will be tracked and unmodified because Git just checked them out and you haven't edited anything.
//////////////////////////
워킹 디렉토리의 모든 파일은 크게 Tracked(관리대상임)와 Untracked(관리대상이 아님)로 나눈다.
Tracked 파일은 이미 스냅샷에 포함돼 있던 파일이다. Tracked 파일은 또 Unmodified(수정하지 않음)와 Modified(수정함) 그리고 Staged(커밋으로 저장소에 기록할) 상태 중 하나이다.
그리고 나머지 파일은 모두 Untracked 파일이다. Untracked 파일은 워킹 디렉토리에 있는 파일 중 스냅샷에도 Staging Area에도 포함되지 않은 파일이다.
처음 저장소를 Clone 하면 모든 파일은 Tracked이면서 Unmodified 상태이다. 파일을 Checkout 하고 나서 아무것도 수정하지 않았기 때문에 그렇다.

//////////////////////////
As you edit files, Git sees them as modified, because you've changed them since your last commit.
You stage these modified files and then commit all your staged changes, and the cycle repeats.
//////////////////////////
마지막 커밋 이후 아직 아무것도 수정하지 않은 상태에서 어떤 파일을 수정하면 Git은 그 파일을 *Modified* 상태로 인식한다.
실제로 커밋을 하기 위해서는 이 수정한 파일을 Staged 상태로 만들고, Staged 상태의 파일을 커밋한다. 이런 라이프사이클을 계속 반복한다.

//////////////////////////
.The lifecycle of the status of your files.
image::images/lifecycle.png[The lifecycle of the status of your files.]
//////////////////////////
.파일의 라이프사이클.
image::images/lifecycle.png[파일의 라이프사이클.]

[[r_checking_status]]
//////////////////////////
==== Checking the Status of Your Files
//////////////////////////
==== 파일의 상태 확인하기

//////////////////////////
The main tool you use to determine which files are in which state is the `git status` command.(((git commands, status)))
If you run this command directly after a clone, you should see something like this:
//////////////////////////
파일의 상태를 확인하려면 보통 `git status` 명령을 사용한다.(((git commands, status)))
Clone 한 후에 바로 이 명령을 실행하면 아래과 같은 메시지를 볼 수 있다.

[source,console]
----
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
nothing to commit, working directory clean
----

//////////////////////////
This means you have a clean working directory – in other words, none of your tracked files are modified.
Git also doesn't see any untracked files, or they would be listed here.
Finally, the command tells you which branch you're on and informs you that it has not diverged from the same branch on the server.
For now, that branch is always ``master'', which is the default; you won't worry about it here.
<<ch03-git-branching#ch03-git-branching>>  will go over branches and references in detail.
//////////////////////////
위의 내용은 파일을 하나도 수정하지 않았다는 것을 말해준다. Tracked 파일은 하나도 수정되지 않았다는 의미다.
Untracked 파일은 아직 없어서 목록에 나타나지 않는다.
그리고 현재 작업 중인 브랜치를 알려주며 서버의 같은 브랜치로부터 진행된 작업이 없는 것을 나타낸다.
기본 브랜치가 master이기 때문에 현재 브랜치 이름이 ``master''로 나온다. 브랜치 관련 내용은 차차 알아가자.
<<ch03-git-branching#ch03-git-branching>> 에서 브랜치와 Refs에 대해 자세히 다룬다.

//////////////////////////
Let's say you add a new file to your project, a simple README file.
If the file didn't exist before, and you run `git status`, you see your untracked file like so:
//////////////////////////
프로젝트에 `README` 파일을 만들어보자.
`README` 파일은 새로 만든 파일이기 때문에 `git status` 를 실행하면 'Untracked files'에 들어 있다:

[source,console]
----
$ echo 'My Project' > README
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Untracked files:
  (use "git add <file>..." to include in what will be committed)

    README

nothing added to commit but untracked files present (use "git add" to track)
----

//////////////////////////
You can see that your new README file is untracked, because it's under the ``Untracked files'' heading in your status output.
Untracked basically means that Git sees a file you didn't have in the previous snapshot (commit); Git won't start including it in your commit snapshots until you explicitly tell it to do so.
It does this so you don't accidentally begin including generated binary files or other files that you did not mean to include.
You do want to start including README, so let's start tracking the file.
//////////////////////////
`README` 파일은 `Untracked files` 부분에 속해 있는데 이것은 `README` 파일이 Untracked 상태라는 것을 말한다.
Git은 Untracked 파일을 아직 스냅샷(커밋)에 넣어지지 않은 파일이라고 본다.
파일이 Tracked 상태가 되기 전까지는 Git은 절대 그 파일을 커밋하지 않는다. 그래서 일하면서 생성하는 바이너리 파일 같은 것을 커밋하는 실수는 하지 않게 된다.
README 파일을 추가해서 직접 Tracked 상태로 만들어 보자.

[[r_tracking_files]]
//////////////////////////
==== Tracking New Files
//////////////////////////
==== 파일을 새로 추적하기

//////////////////////////
In order to begin tracking a new file, you use the command `git add`.(((git commands, add)))
To begin tracking the README file, you can run this:
//////////////////////////
`git add` 명령으로 파일을 새로 추적할 수 있다.(((git commands, add)))
아래 명령을 실행하면 Git은 README 파일을 추적한다.

[source,console]
----
$ git add README
----

//////////////////////////
If you run your status command again, you can see that your README file is now tracked and staged to be committed:
//////////////////////////
`git status` 명령을 다시 실행하면 README 파일이 Tracked 상태이면서 커밋에 추가될 Staged 상태라는 것을 확인할 수 있다.

[source,console]
----
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    new file:   README

----

//////////////////////////
You can tell that it's staged because it's under the ``Changes to be committed'' heading.
If you commit at this point, the version of the file at the time you ran `git add` is what will be in the historical snapshot.
You may recall that when you ran `git init` earlier, you then ran `git add (files)` – that was to begin tracking files in your directory.(((git commands, init)))(((git commands, add)))
The `git add` command takes a path name for either a file or a directory; if it's a directory, the command adds all the files in that directory recursively.
//////////////////////////
``Changes to be committed'' 에 들어 있는 파일은 Staged 상태라는 것을 의미한다.
커밋하면 `git add` 를 실행한 시점의 파일이 커밋되어 저장소 히스토리에 남는다.
앞에서 `git init` 명령을 실행한 후, `git add (files)` 명령을 실행했던 걸 기억할 것이다. 이 명령을 통해 디렉토리에 있는 파일을 추적하고 관리하도록 한다.(((git commands, init)))(((git commands, add)))
`git add` 명령은 파일 또는 디렉토리의 경로를 아규먼트로 받는다. 디렉토리면 아래에 있는 모든 파일들까지 재귀적으로 추가한다.

//////////////////////////
==== Staging Modified Files
//////////////////////////
==== Modified 상태의 파일을 Stage 하기

//////////////////////////
Let's change a file that was already tracked.
If you change a previously tracked file called `CONTRIBUTING.md` and then run your `git status` command again, you get something that looks like this:
//////////////////////////
이미 Tracked 상태인 파일을 수정하는 법을 알아보자.
`CONTRIBUTING.md` 라는 파일을 수정하고 나서 `git status` 명령을 다시 실행하면 결과는 아래와 같다.

[source,console]
----
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    new file:   README

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md

----

//////////////////////////
The `CONTRIBUTING.md` file appears under a section named ``Changes not staged for commit'' – which means that a file that is tracked has been modified in the working directory but not yet staged.
To stage it, you run the `git add` command.
`git add` is a multipurpose command – you use it to begin tracking new files, to stage files, and to do other things like marking merge-conflicted files as resolved.
It may be helpful to think of it more as ``add this content to the next commit'' rather than ``add this file to the project''.(((git commands, add)))
Let's run `git add` now to stage the `CONTRIBUTING.md` file, and then run `git status` again:
//////////////////////////
이 `CONTRIBUTING.md` 파일은 ``Changes not staged for commit''에 있다. 이것은 수정한 파일이 Tracked 상태이지만 아직 Staged 상태는 아니라는 것이다.
Staged 상태로 만들려면 `git add` 명령을 실행해야 한다.
`git add` 명령은 파일을 새로 추적할 때도 사용하고 수정한 파일을 Staged 상태로 만들 때도 사용한다. Merge 할 때 충돌난 상태의 파일을 Resolve 상태로 만들때도 사용한다.
add의 의미는 프로젝트에 파일을 추가한다기 보다는 다음 커밋에 추가한다고 받아들이는게 좋다.(((git commands, add)))
`git add` 명령을 실행하여 `CONTRIBUTING.md` 파일을 Staged 상태로 만들고 `git status` 명령으로 결과를 확인해보자.

[source,console]
----
$ git add CONTRIBUTING.md
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    new file:   README
    modified:   CONTRIBUTING.md

----

//////////////////////////
Both files are staged and will go into your next commit.
At this point, suppose you remember one little change that you want to make in `CONTRIBUTING.md` before you commit it.
You open it again and make that change, and you're ready to commit.
However, let's run `git status` one more time:
//////////////////////////
두 파일 모두 Staged 상태이므로 다음 커밋에 포함된다.
하지만 아직 더 수정해야 한다는 것을 알게 되어 바로 커밋하지 못하는 상황이 되었다고 생각해보자. 이 상황에서 `CONTRIBUTING.md` 파일을 열고 수정한다.
이제 커밋할 준비가 다 됐다고 생각할 테지만, Git은 그렇지 않다.
`git status` 명령으로 파일의 상태를 다시 확인해보자.

[source,console]
----
$ vim CONTRIBUTING.md
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    new file:   README
    modified:   CONTRIBUTING.md

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md

----

//////////////////////////
What the heck?
Now `CONTRIBUTING.md` is listed as both staged _and_ unstaged.
How is that possible?
It turns out that Git stages a file exactly as it is when you run the `git add` command.
If you commit now, the version of `CONTRIBUTING.md` as it was when you last ran the `git add` command is how it will go into the commit, not the version of the file as it looks in your working directory when you run `git commit`.
If you modify a file after you run `git add`, you have to run `git add` again to stage the latest version of the file:
//////////////////////////
헉!
`CONTRIBUTING.md` 가 Staged 상태이면서 _동시에_ Unstaged 상태로 나온다.
어떻게 이런 일이 가능할까?
`git add` 명령을 실행하면 Git은 파일을 바로 Staged 상태로 만든다.
지금 이 시점에서 커밋을 하면 `git commit` 명령을 실행하는 시점의 버전이 커밋되는 것이 아니라 마지막으로 `git add` 명령을 실행했을 때의 버전이 커밋된다.
그러니까 `git add` 명령을 실행한 후에 또 파일을 수정하면 `git add` 명령을 다시 실행해서 최신 버전을 Staged 상태로 만들어야 한다.

[source,console]
----
$ git add CONTRIBUTING.md
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    new file:   README
    modified:   CONTRIBUTING.md
----

//////////////////////////
==== Short Status
//////////////////////////
==== 파일 상태를 짤막하게 확인하기

//////////////////////////
While the `git status` output is pretty comprehensive, it's also quite wordy.
Git also has a short status flag so you can see your changes in a more compact way.
If you run `git status -s` or `git status --short` you get a far more simplified output from the command:
//////////////////////////
`git status` 명령으로 확인할 수 있는 내용이 좀 많아 보일 수 있다. 사실 그렇다.
좀 더 간단하게 변경 내용을 보여주는 옵션이 있다.
`git status -s` 또는 `git status --short` 처럼 옵션을 주면 현재 변경한 상태를 짤막하게 보여준다.

[source,console]
----
$ git status -s
 M README
MM Rakefile
A  lib/git.rb
M  lib/simplegit.rb
?? LICENSE.txt
----

//////////////////////////
New files that aren't tracked have a `??` next to them, new files that have been added to the staging area have an `A`, modified files have an `M` and so on.
There are two columns to the output - the left-hand column indicates the status of the staging area and the right-hand column indicates the status of the working tree.
So for example in that output, the `README` file is modified in the working directory but not yet staged, while the `lib/simplegit.rb` file is modified and staged.
The `Rakefile` was modified, staged and then modified again, so there are changes to it that are both staged and unstaged.
//////////////////////////
아직 추적하지 않는 새 파일 앞에는 `??` 표시가 붙는다. Staged 상태로 추가한 파일 중 새로 생성한 파일 앞에는 `A` 표시가, 수정한 파일 앞에는 `M` 표시가 붙는다.
위 명령의 결과에서 상태정보 컬럼에는 두 가지 정보를 보여준다. 왼쪽에는 Staging Area에서의 상태를, 오른쪽에는 Working Tree에서의 상태를 표시한다.
`README` 파일 같은 경우 내용을 변경했지만 아직 Staged 상태로 추가하지는 않았다. `lib/simplegit.rb` 파일은 내용을 변경하고 Staged 상태로 추가까지 한 상태이다. 위 결과에서 차이점을 비교해보자.
`Rakefile` 은 변경하고 Staged 상태로 추가한 후 또 내용을 변경해서 Staged 이면서 Unstaged 상태인 파일이다.

[[r_ignoring]]
//////////////////////////
==== Ignoring Files
//////////////////////////
==== 파일 무시하기

//////////////////////////
Often, you'll have a class of files that you don't want Git to automatically add or even show you as being untracked.
These are generally automatically generated files such as log files or files produced by your build system.
In such cases, you can create a file listing patterns to match them named `.gitignore`.(((ignoring files)))
Here is an example `.gitignore` file:
//////////////////////////
어떤 파일은 Git이 관리할 필요가 없다.
보통 로그 파일이나 빌드 시스템이 자동으로 생성한 파일이 그렇다.
그런 파일을 무시하려면 `.gitignore` 파일을 만들고 그 안에 무시할 파일 패턴을 적는다.(((ignoring files)))
아래는 `.gitignore` 파일의 예이다.

[source,console]
----
$ cat .gitignore
*.[oa]
*~
----

//////////////////////////
The first line tells Git to ignore any files ending in ``.o'' or ``.a'' – object and archive files that may be the product of building your code.
The second line tells Git to ignore all files that end with a tilde (`~`), which is used by many text editors such as Emacs to mark temporary files.
You may also include a log, tmp, or pid directory; automatically generated documentation; and so on.
Setting up a `.gitignore` file before you get going is generally a good idea so you don't accidentally commit files that you really don't want in your Git repository.
//////////////////////////
첫번째 라인은 확장자가 ``.o'' 나 ``.a'' 인 파일을 Git이 무시하라는 것이고 둘째 라인은 `~` 로 끝나는 모든 파일을 무시하라는 것이다. 보통 대부분의 텍스트 편집기에서 임시파일로 사용하는 파일 이름이기 때문이다.
``.o'' 와 ``.a'' 는 각각 빌드 시스템이 만들어내는 오브젝트와 아카이브 파일이고 `~` 로 끝나는 파일은 Emacs나 VI 같은 텍스트 편집기가 임시로 만들어내는 파일이다.
또 log, tmp, pid 같은 디렉토리나, 자동으로 생성하는 문서 같은 것들도 추가할 수 있다.
`.gitignore` 파일은 보통 처음에 만들어 두는 것이 편리하다. 그래서 Git 저장소에 커밋하고 싶지 않은 파일을 실수로 커밋하는 일을 방지할 수 있다.

//////////////////////////
The rules for the patterns you can put in the `.gitignore` file are as follows:
//////////////////////////
`.gitignore` 파일에 입력하는 패턴은 아래 규칙을 따른다.

//////////////////////////
*  Blank lines or lines starting with `#` are ignored.
*  Standard glob patterns work.
*  You can start patterns with a forward slash (`/`) to avoid recursivity.
*  You can end patterns with a forward slash (`/`) to specify a directory.
*  You can negate a pattern by starting it with an exclamation point (`!`).
//////////////////////////
*  아무것도 없는 라인이나, `#`로 시작하는 라인은 무시한다.
*  표준 Glob 패턴을 사용한다.
*  슬래시(`/`)로 시작하면 하위 디렉토리에 적용되지(Recursivity) 않는다.
*  디렉토리는 슬래시(`/`)를 끝에 사용하는 것으로 표현한다.
*  느낌표(`!`)로 시작하는 패턴의 파일은 무시하지 않는다.

//////////////////////////
Glob patterns are like simplified regular expressions that shells use.
An asterisk (`*`) matches zero or more characters; `[abc]` matches any character inside the brackets (in this case a, b, or c); a question mark (`?`) matches a single character; and brackets enclosing characters separated by a hyphen (`[0-9]`) matches any character between them (in this case 0 through 9).
You can also use two asterisks to match nested directories; `a/**/z` would match `a/z`, `a/b/z`, `a/b/c/z`, and so on.
//////////////////////////
Glob 패턴은 정규표현식을 단순하게 만든 것으로 생각하면 되고 보통 쉘에서 많이 사용한다.
애스터리스크(`*`)는 문자가 하나도 없거나 하나 이상을 의미하고, `[abc]` 는 중괄호 안에 있는 문자 중 하나를 의미한다(그러니까 이 경우에는 a, b, c). 물음표(`?`)는 문자 하나를 말하고, `[0-9]` 처럼 중괄호 안의 캐릭터 사이에 하이픈(`-`)을 사용하면 그 캐릭터 사이에 있는 문자 하나를 말한다.
애스터리스크 2개를 사용하여 디렉토리 안의 디렉토리 까지 지정할 수 있다. `a/**/z` 패턴은 `a/z`, `a/b/z`, `a/b/c/z` 디렉토리에 사용할 수 있다.

//////////////////////////
Here is another example .gitignore file:
//////////////////////////
아래는 .gitignore 파일의 예이다.

[source]
//////////////////////////
----
# no .a files
*.a

# but do track lib.a, even though you're ignoring .a files above
!lib.a

# only ignore the TODO file in the current directory, not subdir/TODO
/TODO

# ignore all files in the build/ directory
build/

# ignore doc/notes.txt, but not doc/server/arch.txt
doc/*.txt

# ignore all .pdf files in the doc/ directory
doc/**/*.pdf
----
//////////////////////////
----
# 확장자가 .a인 파일 무시
*.a

# 윗 라인에서 확장자가 .a인 파일은 무시하게 했지만 lib.a는 무시하지 않음
!lib.a

# 현재 디렉토리에 있는 TODO파일은 무시하고 subdir/TODO처럼 하위디렉토리에 있는 파일은 무시하지 않음
/TODO

# build/ 디렉토리에 있는 모든 파일은 무시
build/

# doc/notes.txt 파일은 무시하고 doc/server/arch.txt 파일은 무시하지 않음
doc/*.txt

# doc 디렉토리 아래의 모든 .pdf 파일을 무시
doc/**/*.pdf
----

[TIP]
//////////////////////////
====
GitHub maintains a fairly comprehensive list of good `.gitignore` file examples for dozens or projects and languages at https://github.com/github/gitignore[] if you want a starting point for your project.
====
//////////////////////////
====
GitHub은 다양한 프로젝트에서 자주 사용하는 `.gitignore` 예제를 관리하고 있다. 어떤 내용을 넣을지 막막하다면 https://github.com/github/gitignore[] 사이트에서 적당한 예제를 찾을 수 있다.
====

[[r_git_diff_staged]]
//////////////////////////
==== Viewing Your Staged and Unstaged Changes
//////////////////////////
==== Staged와 Unstaged 상태의 변경 내용을 보기

//////////////////////////
If the `git status` command is too vague for you – you want to know exactly what you changed, not just which files were changed – you can use the `git diff` command.(((git commands, diff)))
We'll cover `git diff` in more detail later, but you'll probably use it most often to answer these two questions: What have you changed but not yet staged?
And what have you staged that you are about to commit?
Although `git status` answers those questions very generally by listing the file names, `git diff` shows you the exact lines added and removed – the patch, as it were.
//////////////////////////
단순히 파일이 변경됐다는 사실이 아니라 어떤 내용이 변경됐는지 살펴보려면 `git status` 명령이 아니라 `git diff` 명령을 사용해야 한다.(((git commands, diff)))
보통 우리는 '수정했지만, 아직 Staged 파일이 아닌 것?'과 '어떤 파일이 Staged 상태인지?'가 궁금하기 때문에 `git status` 명령으로도 충분하다.
더 자세하게 볼 때는 `git diff` 명령을 사용하는데 Patch처럼 어떤 라인을 추가했고 삭제했는지가 궁금할 때 사용한다.
`git diff` 는 나중에 더 자세히 다룬다.

//////////////////////////
Let's say you edit and stage the `README` file again and then edit the `CONTRIBUTING.md` file without staging it.
If you run your `git status` command, you once again see something like this:
//////////////////////////
`README` 파일을 수정해서 Staged 상태로 만들고 `CONTRIBUTING.md` 파일은 그냥 수정만 해둔다.
이 상태에서 `git status` 명령을 실행하면 아래와 같은 메시지를 볼 수 있다.

[source,console]
----
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    modified:   README

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md
----

//////////////////////////
To see what you've changed but not yet staged, type `git diff` with no other arguments:
//////////////////////////
`git diff` 명령을 실행하면 수정했지만 아직 staged 상태가 아닌 파일을 비교해 볼 수 있다.

[source,console]
----
$ git diff
diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
index 8ebb991..643e24f 100644
--- a/CONTRIBUTING.md
+++ b/CONTRIBUTING.md
@@ -65,7 +65,8 @@ branch directly, things can get messy.
 Please include a nice description of your changes when you submit your PR;
 if we have to read the whole diff to figure out why you're contributing
 in the first place, you're less likely to get feedback and have your change
-merged in.
+merged in. Also, split your changes into comprehensive chunks if your patch is
+longer than a dozen lines.

 If you are starting to work on a particular area, feel free to submit a PR
 that highlights your work in progress (and note in the PR title that it's
----

//////////////////////////
That command compares what is in your working directory with what is in your staging area.
The result tells you the changes you've made that you haven't yet staged.
//////////////////////////
이 명령은 워킹 디렉토리에 있는 것과 Staging Area에 있는 것을 비교한다.
그래서 수정하고 아직 Stage 하지 않은 것을 보여준다.

//////////////////////////
If you want to see what you've staged that will go into your next commit, you can use `git diff --staged`.
This command compares your staged changes to your last commit:
//////////////////////////
만약 커밋하려고 Staging Area에 넣은 파일의 변경 부분을 보고 싶으면 `git diff --staged` 옵션을 사용한다.
이 명령은 저장소에 커밋한 것과 Staging Area에 있는 것을 비교한다.

[source,console]
----
$ git diff --staged
diff --git a/README b/README
new file mode 100644
index 0000000..03902a1
--- /dev/null
+++ b/README
@@ -0,0 +1,4 @@
+My Project
----

//////////////////////////
It's important to note that `git diff` by itself doesn't show all changes made since your last commit – only changes that are still unstaged.
This can be confusing, because if you've staged all of your changes, `git diff` will give you no output.
//////////////////////////
꼭 잊지 말아야 할 것이 있는데 `git diff` 명령은 마지막으로 커밋한 후에 수정한 것들 전부를 보여주지 않는다. `git diff` 는 Unstaged 상태인 것들만 보여준다.
이 부분이 조금 헷갈릴 수 있다. 수정한 파일을 모두 Staging Area에 넣었다면 `git diff` 명령은 아무것도 출력하지 않는다.

//////////////////////////
For another example, if you stage the `CONTRIBUTING.md` file and then edit it, you can use `git diff` to see the changes in the file that are staged and the changes that are unstaged.
If our environment looks like this:
//////////////////////////
`CONTRIBUTING.md` 파일을 Stage 한 후에 다시 수정해도 `git diff` 명령을 사용할 수 있다.
이때는 Staged 상태인 것과 Unstaged 상태인 것을 비교한다.

[source,console]
----
$ git add CONTRIBUTING.md
$ echo '# test line' >> CONTRIBUTING.md
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    modified:   CONTRIBUTING.md

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md
----

//////////////////////////
Now you can use `git diff` to see what is still unstaged:
//////////////////////////
`git diff` 명령으로 Unstaged 상태인 변경 부분을 확인할 수 있다.

[source,console]
----
$ git diff
diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
index 643e24f..87f08c8 100644
--- a/CONTRIBUTING.md
+++ b/CONTRIBUTING.md
@@ -119,3 +119,4 @@ at the
 ## Starter Projects

 See our [projects list](https://github.com/libgit2/libgit2/blob/development/PROJECTS.md).
+# test line
----

//////////////////////////
and `git diff --cached` to see what you've staged so far (`--staged` and `--cached` are synonyms):
//////////////////////////
Staged 상태인 파일은 `git diff --cached` 옵션으로 확인한다. `--staged` 와 `--cached` 는 같은 옵션이다.

[source,console]
----
$ git diff --cached
diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
index 8ebb991..643e24f 100644
--- a/CONTRIBUTING.md
+++ b/CONTRIBUTING.md
@@ -65,7 +65,8 @@ branch directly, things can get messy.
 Please include a nice description of your changes when you submit your PR;
 if we have to read the whole diff to figure out why you're contributing
 in the first place, you're less likely to get feedback and have your change
-merged in.
+merged in. Also, split your changes into comprehensive chunks if your patch is
+longer than a dozen lines.

 If you are starting to work on a particular area, feel free to submit a PR
 that highlights your work in progress (and note in the PR title that it's
----

[[r_git_difftool]]
[NOTE]
//////////////////////////
.Git Diff in an External Tool
====
We will continue to use the `git diff` command in various ways throughout the rest of the book.
There is another way to look at these diffs if you prefer a graphical or external diff viewing program instead.
If you run `git difftool` instead of `git diff`, you can view any of these diffs in software like emerge, vimdiff and many more (including commercial products).
Run `git difftool --tool-help` to see what is available on your system.
====
//////////////////////////
.외부 도구로 비교하기
====
이 책에서는 계속 `git diff` 명령으로 여기저기서 써 먹는다.
즐겨 쓰거나 결과를 아름답게 보여주는 Diff 도구가 있으면 사용할 수 있다.
`git diff` 대신 `git difftool` 명령을 사용해서 emerge, vimdiff 같은 도구로 비교할 수 있다. 상용 제품도 사용할 수 있다.
`git difftool --tool-help` 라는 명령은 사용가능한 도구를 보여준다.
====

[[r_committing_changes]]
//////////////////////////
==== Committing Your Changes
//////////////////////////
==== 변경사항 커밋하기

//////////////////////////
Now that your staging area is set up the way you want it, you can commit your changes.
Remember that anything that is still unstaged – any files you have created or modified that you haven't run `git add` on since you edited them – won't go into this commit.
They will stay as modified files on your disk.
In this case, let's say that the last time you ran `git status`, you saw that everything was staged, so you're ready to commit your changes.(((git commands, status)))
The simplest way to commit is to type `git commit` :(((git commands, commit)))
//////////////////////////
수정한 것을 커밋하기 위해 Staging Area에 파일을 정리했다.
Unstaged 상태의 파일은 커밋되지 않는다는 것을 기억해야 한다. Git은 생성하거나 수정하고 나서 `git add` 명령으로 추가하지 않은 파일은 커밋하지 않는다.
그 파일은 여전히 Modified 상태로 남아 있다.
커밋하기 전에 `git status` 명령으로 모든 것이 Staged 상태인지 확인할 수 있다.(((git commands, status)))
그 후에 `git commit` 을 실행하여 커밋한다.(((git commands, commit)))

[source,console]
----
$ git commit
----

//////////////////////////
Doing so launches your editor of choice.
(This is set by your shell's `$EDITOR` environment variable – usually vim or emacs, although you can configure it with whatever you want using the `git config --global core.editor` command as you saw in <<ch01-introduction#ch01-introduction>>).(((editor, changing default)))(((git commands, config)))
//////////////////////////
Git 설정에 지정된 편집기가 실행되고, 아래와 같은 텍스트가 자동으로 포함된다
(아래 예제는 Vim 편집기의 화면이다. 이 편집기는 쉘의 $EDITOR 환경 변수에 등록된 편집기이고 보통은 Vim이나 Emacs을 사용한다. 또 <<ch01-introduction#ch01-introduction>> 에서 설명했듯이 `git config --global core.editor` 명령으로 어떤 편집기를 사용할지 설정할 수 있다).(((editor, changing default)))(((git commands, config)))

//////////////////////////
The editor displays the following text (this example is a Vim screen):
//////////////////////////
편집기는 아래와 같은 내용을 표시한다(아래 예제는 Vim 편집기).

[source]
----

# Please enter the commit message for your changes. Lines starting
# with '#' will be ignored, and an empty message aborts the commit.
# On branch master
# Your branch is up-to-date with 'origin/master'.
# Changes to be committed:
#	new file:   README
#	modified:   CONTRIBUTING.md
#
~
~
~
".git/COMMIT_EDITMSG" 9L, 283C
----

//////////////////////////
You can see that the default commit message contains the latest output of the `git status` command commented out and one empty line on top.
You can remove these comments and type your commit message, or you can leave them there to help you remember what you're committing.
(For an even more explicit reminder of what you've modified, you can pass the `-v` option to `git commit`.
Doing so also puts the diff of your change in the editor so you can see exactly what changes you're committing.)
When you exit the editor, Git creates your commit with that commit message (with the comments and diff stripped out).
//////////////////////////
자동으로 생성되는 커밋 메시지의 첫 라인은 비어 있고 둘째 라인부터 `git status` 명령의 결과가 채워진다.
커밋한 내용을 쉽게 기억할 수 있도록 이 메시지를 포함할 수도 있고 메시지를 전부 지우고 새로 작성할 수 있다
(정확히 뭘 수정했는지도 보여줄 수 있는데,
`git commit` 에 -v 옵션을 추가하면 편집기에 diff 메시지도 추가된다).
내용을 저장하고 편집기를 종료하면 Git은 입력된 내용(#로 시작하는 내용을 제외한)으로 새 커밋을 하나 완성한다.

//////////////////////////
Alternatively, you can type your commit message inline with the `commit` command by specifying it after a `-m` flag, like this:
//////////////////////////
메시지를 인라인으로 첨부할 수도 있다. `commit` 명령을 실행할 때 아래와 같이 `-m` 옵션을 사용한다.

[source,console]
----
$ git commit -m "Story 182: Fix benchmarks for speed"
[master 463dc4f] Story 182: Fix benchmarks for speed
 2 files changed, 2 insertions(+)
 create mode 100644 README
----

//////////////////////////
Now you've created your first commit!
You can see that the commit has given you some output about itself: which branch you committed to (`master`), what SHA-1 checksum the commit has (`463dc4f`), how many files were changed, and statistics about lines added and removed in the commit.
//////////////////////////
이렇게 첫번째 커밋을 작성해보았다.
`commit` 명령은 몇 가지 정보를 출력하는데 위 예제는 (`master`) 브랜치에 커밋했고 체크섬은 (`463dc4f`)이라고 알려준다. 그리고 수정한 파일이 몇 개이고 삭제됐거나 추가된 라인이 몇 라인인지 알려준다.

//////////////////////////
Remember that the commit records the snapshot you set up in your staging area.
Anything you didn't stage is still sitting there modified; you can do another commit to add it to your history.
Every time you perform a commit, you're recording a snapshot of your project that you can revert to or compare to later.
//////////////////////////
Git은 Staging Area에 속한 스냅샷을 커밋한다는 것을 기억해야 한다.
수정은 했지만, 아직 Staging Area에 넣지 않은 것은 다음에 커밋할 수 있다.
커밋할 때마다 프로젝트의 스냅샷을 기록하기 때문에 나중에 스냅샷끼리 비교하거나 예전 스냅샷으로 되돌릴 수 있다.

//////////////////////////
==== Skipping the Staging Area
//////////////////////////
==== Staging Area 생략하기

(((staging area, skipping)))
//////////////////////////
Although it can be amazingly useful for crafting commits exactly how you want them, the staging area is sometimes a bit more complex than you need in your workflow.
If you want to skip the staging area, Git provides a simple shortcut.
Adding the `-a` option to the `git commit` command makes Git automatically stage every file that is already tracked before doing the commit, letting you skip the `git add` part:
//////////////////////////
Staging Area는 커밋할 파일을 정리한다는 점에서 매우 유용하지만 복잡하기만 하고 필요하지 않은 때도 있다.
아주 쉽게 Staging Area를 생략할 수 있다. `git commit` 명령을 실행할 때 `-a` 옵션을 추가하면 Git은 Tracked 상태의 파일을 자동으로 Staging Area에 넣는다.
그래서 `git add` 명령을 실행하는 수고를 덜 수 있다.

[source,console]
----
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md

no changes added to commit (use "git add" and/or "git commit -a")
$ git commit -a -m 'added new benchmarks'
[master 83e38c7] added new benchmarks
 1 file changed, 5 insertions(+), 0 deletions(-)
----

//////////////////////////
Notice how you don't have to run `git add` on the `CONTRIBUTING.md` file in this case before you commit.
That's because the `-a` flag includes all changed files.
This is convenient, but be careful; sometimes this flag will cause you to include unwanted changes.
//////////////////////////
이 예제에서는 커밋하기 전에 `git add` 명령으로 `CONTRIBUTING.md` 파일을 추가하지 않았다는 점을 눈여겨보자.
`-a` 옵션을 사용하면 모든 파일이 자동으로 추가된다.
편리한 옵션이긴 하지만 주의 깊게 사용해야 한다. 생각 없이 이 옵션을 사용하다 보면 추가하지 말아야 할 변경사항도 추가될 수 있기 때문이다.

[[r_removing_files]]
//////////////////////////
==== Removing Files
//////////////////////////
==== 파일 삭제하기

(((files, removing)))
//////////////////////////
To remove a file from Git, you have to remove it from your tracked files (more accurately, remove it from your staging area) and then commit.
The `git rm` command does that, and also removes the file from your working directory so you don't see it as an untracked file the next time around.
//////////////////////////
Git에서 파일을 제거하려면 `git rm` 명령으로 Tracked 상태의 파일을 삭제한 후에(정확하게는 Staging Area에서 삭제하는 것) 커밋해야 한다.
이 명령은 워킹 디렉토리에 있는 파일도 삭제하기 때문에 실제로 파일도 지워진다.

//////////////////////////
If you simply remove the file from your working directory, it shows up under the ``Changed but not updated'' (that is, _unstaged_) area of your `git status` output:
//////////////////////////
Git 명령을 사용하지 않고 단순히 워킹 디렉터리에서 파일을 삭제하고 git status 명령으로 상태를 확인하면 Git은 현재 "Changes not staged for commit"(즉, Unstaged 상태)라고 표시해준다.

[source,console]
----
$ rm grit.gemspec
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes not staged for commit:
  (use "git add/rm <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    deleted:    grit.gemspec

no changes added to commit (use "git add" and/or "git commit -a")
----

//////////////////////////
Then, if you run `git rm`, it stages the file's removal:
//////////////////////////
그리고 `git rm` 명령을 실행하면 삭제한 파일은 Staged 상태가 된다.

[source,console]
----
$ git rm grit.gemspec
rm 'grit.gemspec'
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    deleted:    grit.gemspec
----

//////////////////////////
The next time you commit, the file will be gone and no longer tracked.
If you modified the file and added it to the index already, you must force the removal with the `-f` option.
This is a safety feature to prevent accidental removal of data that hasn't yet been recorded in a snapshot and that can't be recovered from Git.
//////////////////////////
커밋하면 파일은 삭제되고 Git은 이 파일을 더는 추적하지 않는다.
이미 파일을 수정했거나 Index에(역주 - Staging Area을 Git Index라고도 부른다) 추가했다면 `-f` 옵션을 주어 강제로 삭제해야 한다.
이 점은 실수로 데이터를 삭제하지 못하도록 하는 안전장치다. 커밋 하지 않고 수정한 데이터는 Git으로 복구할 수 없기 때문이다.

//////////////////////////
Another useful thing you may want to do is to keep the file in your working tree but remove it from your staging area.
In other words, you may want to keep the file on your hard drive but not have Git track it anymore.
This is particularly useful if you forgot to add something to your `.gitignore` file and accidentally staged it, like a large log file or a bunch of `.a` compiled files.
To do this, use the `--cached` option:
//////////////////////////
또 Staging Area에서만 제거하고 워킹 디렉토리에 있는 파일은 지우지 않고 남겨둘 수 있다.
다시 말해서 하드디스크에 있는 파일은 그대로 두고 Git만 추적하지 않게 한다.
이것은 `.gitignore` 파일에 추가하는 것을 빼먹었거나 대용량 로그 파일이나 컴파일된 파일인 `.a` 파일 같은 것을 실수로 추가했을 때 쓴다.
`--cached` 옵션을 사용하여 명령을 실행한다.

[source,console]
----
$ git rm --cached README
----

//////////////////////////
You can pass files, directories, and file-glob patterns to the `git rm` command.
That means you can do things such as:
//////////////////////////
여러 개의 파일이나 디렉토리를 한꺼번에 삭제할 수도 있다.
아래와 같이 `git rm` 명령에 file-glob 패턴을 사용한다.

[source,console]
----
$ git rm log/\*.log
----

//////////////////////////
Note the backslash (`\`) in front of the `*`.
This is necessary because Git does its own filename expansion in addition to your shell's filename expansion.
This command removes all files that have the `.log` extension in the `log/` directory.
Or, you can do something like this:
//////////////////////////

`*` 앞에 `\` 을 사용한 것을 기억하자.
파일명 확장 기능은 쉘에만 있는 것이 아니라 Git 자체에도 있기 때문에 필요하다.
이 명령은 `log/` 디렉토리에 있는 `.log` 파일을 모두 삭제한다.
아래의 예제처럼 할 수도 있다.

[source,console]
----
$ git rm \*~
----

//////////////////////////
This command removes all files that end with `~`.
//////////////////////////
이 명령은 `~` 로 끝나는 파일을 모두 삭제한다.

[[r_git_mv]]
//////////////////////////
==== Moving Files
//////////////////////////
==== 파일 이름 변경하기

(((files, moving)))
//////////////////////////
Unlike many other VCS systems, Git doesn't explicitly track file movement.
If you rename a file in Git, no metadata is stored in Git that tells it you renamed the file.
However, Git is pretty smart about figuring that out after the fact – we'll deal with detecting file movement a bit later.
//////////////////////////
Git은 다른 VCS 시스템과는 달리 파일 이름의 변경이나 파일의 이동을 명시적으로 관리하지 않는다.
다시 말해서 파일 이름이 변경됐다는 별도의 정보를 저장하지 않는다.
Git은 똑똑해서 굳이 파일 이름이 변경되었다는 것을 추적하지 않아도 아는 방법이 있다. 파일의 이름이 변경된 것을 Git이 어떻게 알아내는지 살펴보자.

//////////////////////////
Thus it's a bit confusing that Git has a `mv` command.
If you want to rename a file in Git, you can run something like:
//////////////////////////

이렇게 말하고 Git에 `mv` 명령이 있는 게 좀 이상하겠지만, 아래와 같이 파일 이름을 변경할 수 있다.

[source,console]
----
$ git mv file_from file_to
----

//////////////////////////
and it works fine.
In fact, if you run something like this and look at the status, you'll see that Git considers it a renamed file:
//////////////////////////
잘 동작한다.
이 명령을 실행하고 Git의 상태를 확인해보면 Git은 이름이 바뀐 사실을 알고 있다.

[source,console]
----
$ git mv README.md README
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    renamed:    README.md -> README
----

//////////////////////////
However, this is equivalent to running something like this:
//////////////////////////
사실 `git mv` 명령은 아래 명령어를 수행한 것과 완전 똑같다.

[source,console]
----
$ mv README.md README
$ git rm README.md
$ git add README
----

//////////////////////////
Git figures out that it's a rename implicitly, so it doesn't matter if you rename a file that way or with the `mv` command.
The only real difference is that `git mv` is one command instead of three – it's a convenience function.
More importantly, you can use any tool you like to rename a file, and address the add/rm later, before you commit.
//////////////////////////
`git mv` 명령은 일종의 단축 명령어이다. 이 명령으로 파일 이름을 바꿔도 되고 `mv` 명령으로 파일 이름을 직접 바꿔도 된다.
단지 `git mv` 명령은 편리하게 명령을 세 번 실행해주는 것 뿐이다.
어떤 도구로 이름을 바꿔도 상관없다. 중요한 것은 이름을 변경하고 나서 꼭 rm/add 명령을 실행해야 한다는 것 뿐이다.
