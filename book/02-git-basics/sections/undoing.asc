[[_undoing]]
//////////////////////////
=== Undoing Things
//////////////////////////
=== 되돌리기

//////////////////////////
At any stage, you may want to undo something.
Here, we'll review a few basic tools for undoing changes that you've made.
Be careful, because you can't always undo some of these undos.
This is one of the few areas in Git where you may lose some work if you do it wrong.
//////////////////////////
일을 하다보면 모든 단계에서 어떤 것은 되돌리고(Undo) 싶을 때가 있다.
이번에는 우리가 한 일을 되돌리는 방법을 살펴본다.
한 번 되돌리면 복구할 수 없기에 주의해야 한다.
Git을 사용하면 우리가 한 실수를 복구하지 못할 것은 거의 없지만 되돌린 것은 복구할 수 없다.

//////////////////////////
One of the common undos takes place when you commit too early and possibly forget to add some files, or you mess up your commit message.
If you want to try that commit again, you can run commit with the `--amend` option:
//////////////////////////
종종 완료한 커밋을 수정해야 할 때가 있다. 너무 일찍 커밋했거나 어떤 파일을 빼먹었을 때 그리고 커밋 메시지를 잘못 적었을 때 한다.
다시 커밋하고 싶으면 `--amend` 옵션을 사용한다.

[source,console]
----
$ git commit --amend
----

//////////////////////////
This command takes your staging area and uses it for the commit.
If you've made no changes since your last commit (for instance, you run this command immediately after your previous commit), then your snapshot will look exactly the same, and all you'll change is your commit message.
//////////////////////////
이 명령은 Staging Area를 사용하여 커밋한다.
만약 마지막으로 커밋하고 나서 수정한 것이 없다면(커밋하자마자 바로 이 명령을 실행하는 경우) 조금 전에 한 커밋과 모든 것이 같다. 이때는 커밋 메시지만 수정한다.

//////////////////////////
The same commit-message editor fires up, but it already contains the message of your previous commit.
You can edit the message the same as always, but it overwrites your previous commit.
//////////////////////////
편집기가 실행되면 이전 커밋 메시지가 자동으로 포함된다.
메시지를 수정하지 않고 그대로 커밋해도 기존의 커밋을 덮어쓴다.

//////////////////////////
As an example, if you commit and then realize you forgot to stage the changes in a file you wanted to add to this commit, you can do something like this:
//////////////////////////
커밋을 했는데 Stage하는 것을 깜빡하고 빠트린 파일이 있으면 아래와 같이 고칠 수 있다.

[source,console]
----
$ git commit -m 'initial commit'
$ git add forgotten_file
$ git commit --amend
----

//////////////////////////
You end up with a single commit – the second commit replaces the results of the first.
//////////////////////////
여기서 실행한 명령어 3개는 모두 하나의 커밋으로 기록된다. 두 번째 커밋은 첫 번째 커밋을 덮어쓴다.

[[_unstaging]]
//////////////////////////
==== Unstaging a Staged File
//////////////////////////
==== 파일 상태를 Unstage로 변경하기

//////////////////////////
The next two sections demonstrate how to wrangle your staging area and working directory changes.
The nice part is that the command you use to determine the state of those two areas also reminds you how to undo changes to them.
For example, let's say you've changed two files and want to commit them as two separate changes, but you accidentally type `git add *` and stage them both.
How can you unstage one of the two?
The `git status` command reminds you:
//////////////////////////
다음은 Staging Area와 워킹 디렉토리 사이를 넘나드는 방법을 설명한다.
두 영역의 상태를 확인할 때마다 변경된 상태를 되돌리는 방법을 알려주기 때문에 매우 편리하다.
예를 들어 파일을 두 개 수정하고서 따로따로 커밋하려고 했지만, 실수로 `git add *` 라고 실행해 버렸다. 두 파일 모두 Staging Area에 들어 있다.
이제 둘 중 하나를 어떻게 꺼낼까?
우선 `git status` 명령으로 확인해보자:

[source,console]
----
$ git add .
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    renamed:    README.md -> README
    modified:   CONTRIBUTING.md
----

//////////////////////////
Right below the ``Changes to be committed'' text, it says use `git reset HEAD <file>...` to unstage.
So, let's use that advice to unstage the `CONTRIBUTING.md` file:
//////////////////////////
`Changes to be commited` 밑에 `git reset HEAD <file>...` 메시지를 볼 수 있다.
이 명령으로 Unstage 상태로 변경할 수 있다. `CONTRIBUTING.md` 파일을 Unstage 상태로 변경해보자:

[source,console]
----
$ git reset HEAD CONTRIBUTING.md
Unstaged changes after reset:
M	CONTRIBUTING.md
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    renamed:    README.md -> README

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md
----

//////////////////////////
The command is a bit strange, but it works.
The `CONTRIBUTING.md` file is modified but once again unstaged.
//////////////////////////
명령어가 낮설게 느껴질 수도 있지만 잘 동작한다.
`CONTRIBUTING.md` 파일은 Unstage 상태가 됐다.

[NOTE]
//////////////////////////
=====
While `git reset` _can_ be a dangerous command if you call it with `--hard`, in this instance the file in your working directory is not touched. Calling `git reset` without an option is not dangerous - it only touches your staging area.
=====
//////////////////////////
=====
`git reset` 명령을 `--hard` 옵션과 함께 사용하면 워킹 디렉토리의 파일이 수정돼서 을 조심해야 한다. `--hard` 옵션만 사용하지 않는다면 `git reset` 명령은 Staging Area의 파일만 조작하기 때문에 위험하지 않다.
=====

//////////////////////////
For now this magic invocation is all you need to know about the `git reset` command. We'll go into much more detail about what `reset` does and how to master it to do really interesting things in <<_git_reset>>.
//////////////////////////
지금까지 살펴본 내용이 `git reset` 명령에 대해 알아야 할 대부분의 내용이다. `reset` 명령이 정확히는 어떻게 동작하는지, 어떻게 전문적으로 활용하는지는 <<_git_reset>> 부분에서 자세히 살펴보기로 한다.

//////////////////////////
==== Unmodifying a Modified File
//////////////////////////
==== Modified 파일 되돌리기

//////////////////////////
What if you realize that you don't want to keep your changes to the `CONTRIBUTING.md` file?
How can you easily unmodify it – revert it back to what it looked like when you last committed (or initially cloned, or however you got it into your working directory)?
Luckily, `git status` tells you how to do that, too.
In the last example output, the unstaged area looks like this:
//////////////////////////
어떻게 해야 `CONTRIBUTING.md` 파일을 수정하고 나서 다시 되돌릴 수 있을까?
그러니까 최근 커밋된 버전으로(아니면 처음 Clone했을 때처럼 워킹 디렉토리에 처음 Checkout 한 그 내용으로) 되돌리는 방법이 무얼까?
`git status` 명령이 친절하게 알려준다.
바로 위에 있는 예제에서 Unstaged 부분을 보자.

[source,console]
----
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md
----

//////////////////////////
It tells you pretty explicitly how to discard the changes you've made.
Let's do what it says:
//////////////////////////
위의 메시지는 수정한 파일을 되돌리는 방법을 꽤 정확하게 알려준다.
알려주는 대로 한 번 해보자.

[source,console]
----
$ git checkout -- CONTRIBUTING.md
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    renamed:    README.md -> README

----

//////////////////////////
You can see that the changes have been reverted.
//////////////////////////
정상적으로 복원된 것을 알 수 있다.

[IMPORTANT]
//////////////////////////
=====
It's important to understand that `git checkout -- [file]` is a dangerous command. Any changes you made to that file are gone – you just copied another file over it.
Don't ever use this command unless you absolutely know that you don't want the file.
=====
//////////////////////////
=====
`git checkout -- [file]` 명령은 꽤 위험한 명령이라는 것을 알아야 한다. 원래 파일로 덮어썼기 때문에 수정한 내용은 전부 사라진다.
수정한 내용이 진짜 마음에 들지 않을 때에만 사용하자.
=====

//////////////////////////
If you would like to keep the changes you've made to that file but still need to get it out of the way for now, we'll go over stashing and branching in <<_git_branching>>; these are generally better ways to go.
//////////////////////////
변경한 내용을 쉽게 버릴수는 없고 하지만 당장은 되돌려야만 하는 상황이라면 Stash와 Branch를 사용하자. <<_git_branching>> 에서 다루는 이 방법들이 훨씬 낫다.

//////////////////////////
Remember, anything that is __committed__ in Git can almost always be recovered.
Even commits that were on branches that were deleted or commits that were overwritten with an `--amend` commit can be recovered (see <<_data_recovery>> for data recovery).
However, anything you lose that was never committed is likely never to be seen again.
//////////////////////////
Git으로 커밋한 모든 것은 언제나 복구할 수 있다.
삭제한 브랜치에 있었던 것도, `--amend` 옵션으로 다시 커밋한 것도 복구할 수 있다(자세한 것은 <<_data_recovery>> 에서 다룬다).
하지만 커밋하지 않고 잃어버린 것은 절대로 되돌릴 수 없다.
