[[_git_tagging]]
//////////////////////////
=== Tagging
//////////////////////////
=== 태그

(((tags)))
//////////////////////////
Like most VCSs, Git has the ability to tag specific points in history as being important.
Typically people use this functionality to mark release points (v1.0, and so on).
In this section, you'll learn how to list the available tags, how to create new tags, and what the different types of tags are.
//////////////////////////
다른 VCS처럼 Git도 태그를 지원한다.
사람들은 보통 릴리즈할 때 사용한다(v1.0, 등등).
이번에는 태그를 조회하고 생성하는 법과 태그의 종류를 설명한다.

//////////////////////////
==== Listing Your Tags
//////////////////////////
==== 태그 조회하기

//////////////////////////
Listing the available tags in Git is straightforward.
Just type `git tag`:(((git commands, tag)))
//////////////////////////
우선 `git tag` 명령으로
이미 만들어진 태그가 있는지 확인할 수 있다.(((git commands, tag)))

[source,console]
----
$ git tag
v0.1
v1.3
----

//////////////////////////
This command lists the tags in alphabetical order; the order in which they appear has no real importance.
//////////////////////////
이 명령은 알파벳 순서로 태그를 보여준다. 사실 순서는 별로 중요한 게 아니다.

//////////////////////////
You can also search for tags with a particular pattern.
The Git source repo, for instance, contains more than 500 tags.
If you're only interested in looking at the 1.8.5 series, you can run this:
//////////////////////////
검색 패턴을 사용하여 태그를 검색할 수 있다.
Git 소스 저장소는 500여 개의 태그가 있다.
만약 1.8.5 버전의 태그들만 검색하고 싶으면 아래와 같이 실행한다.

[source,console]
----
$ git tag -l 'v1.8.5*'
v1.8.5
v1.8.5-rc0
v1.8.5-rc1
v1.8.5-rc2
v1.8.5-rc3
v1.8.5.1
v1.8.5.2
v1.8.5.3
v1.8.5.4
v1.8.5.5
----

//////////////////////////
==== Creating Tags
//////////////////////////
==== 태그 붙이기

//////////////////////////
Git uses two main types of tags: lightweight and annotated.
//////////////////////////
Git의 태그는 Lightweight 태그와 Annotated 태그로 두 종류가 있다.

//////////////////////////
A lightweight tag is very much like a branch that doesn't change – it's just a pointer to a specific commit.
//////////////////////////
Lightweight 태그는 브랜치와 비슷한데 브랜치처럼 가리키는 지점을 최신 커밋으로 이동시키지 않는다. 단순히 특정 커밋에 대한 포인터일 뿐이다.

//////////////////////////
Annotated tags, however, are stored as full objects in the Git database.
They're checksummed; contain the tagger name, e-mail, and date; have a tagging message; and can be signed and verified with GNU Privacy Guard (GPG).
It's generally recommended that you create annotated tags so you can have all this information; but if you want a temporary tag or for some reason don't want to keep the other information, lightweight tags are available too.
//////////////////////////
한편 Annotated 태그는 Git 데이터베이스에 태그를 만든 사람의 이름, 이메일과 태그를 만든 날짜, 그리고 태그 메시지도 저장한다.
GPG(GNU Privacy Guard)로 서명할 수도 있다.
이 모든 정보를 저장해둬야 할 때에만 Annotated 태그를 추천한다. 그냥 다른 정보를 저장하지 않는 단순한 태그가 필요하다면 Lightweight 태그를 사용하는 것이 좋다.

[[_annotated_tags]]
//////////////////////////
==== Annotated Tags
//////////////////////////
==== Annotated 태그

(((tags, annotated)))
//////////////////////////
Creating an annotated tag in Git is simple.
The easiest way is to specify `-a` when you run the `tag` command:(((git commands, tag)))
//////////////////////////
Annotated 태그를 만드는 방법은 간단하다.
`tag` 명령을 실행할 때 `-a` 옵션을 추가한다.(((git commands, tag)))

[source,console]
----
$ git tag -a v1.4 -m 'my version 1.4'
$ git tag
v0.1
v1.3
v1.4
----

//////////////////////////
The `-m` specifies a tagging message, which is stored with the tag.
If you don't specify a message for an annotated tag, Git launches your editor so you can type it in.
//////////////////////////
`-m` 옵션으로 태그를 저장할 때 메시지를 함께 저장할 수 있다.
명령을 실행할 때 메시지를 입력하지 않으면 Git은 편집기를 실행시킨다.

//////////////////////////
You can see the tag data along with the commit that was tagged by using the `git show` command:
//////////////////////////
`git show` 명령으로 태그 정보와 커밋 정보를 모두 확인할 수 있다.

[source,console]
----
$ git show v1.4
tag v1.4
Tagger: Ben Straub <ben@straub.cc>
Date:   Sat May 3 20:19:12 2014 -0700

my version 1.4

commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Mar 17 21:52:11 2008 -0700

    changed the version number
----

//////////////////////////
That shows the tagger information, the date the commit was tagged, and the annotation message before showing the commit information.
//////////////////////////
커밋 정보를 보여주기 전에 먼저 태그를 만든 사람이 누구인지, 언제 태그를 만들었는지, 그리고 태그 메시지가 무엇인지 보여준다.

//////////////////////////
==== Lightweight Tags
//////////////////////////
==== Lightweight Tags

(((tags, lightweight)))
//////////////////////////
Another way to tag commits is with a lightweight tag.
This is basically the commit checksum stored in a file – no other information is kept.
To create a lightweight tag, don't supply the `-a`, `-s`, or `-m` option:
//////////////////////////
Lightweight 태그는 기본적으로 파일에 커밋 체크섬을 저장하는 것뿐이다.
다른 정보는 저장하지 않는다.
Lightweight 태그를 만들 때에는 `-a`, `-s`, `-m` 옵션을 사용하지 않는다.

[source,console]
----
$ git tag v1.4-lw
$ git tag
v0.1
v1.3
v1.4
v1.4-lw
v1.5
----

//////////////////////////
This time, if you run `git show` on the tag, you don't see the extra tag information.(((git commands, show)))
The command just shows the commit:
//////////////////////////
이 태그에 `git show`를 실행하면 별도의 태그 정보를 확인할 수 없다.(((git commands, show)))
이 명령은 단순히 커밋 정보만을 보여준다.

[source,console]
----
$ git show v1.4-lw
commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Mar 17 21:52:11 2008 -0700

    changed the version number
----

//////////////////////////
==== Tagging Later
//////////////////////////
==== 나중에 태그하기

//////////////////////////
You can also tag commits after you've moved past them.
Suppose your commit history looks like this:
//////////////////////////
예전 커밋에 대해서도 태그할 수 있다.
커밋 히스토리는 아래와 같다고 가정한다.

[source,console]
----
$ git log --pretty=oneline
15027957951b64cf874c3557a0f3547bd83b3ff6 Merge branch 'experiment'
a6b4c97498bd301d84096da251c98a07c7723e65 beginning write support
0d52aaab4479697da7686c15f77a3d64d9165190 one more thing
6d52a271eda8725415634dd79daabbc4d9b6008e Merge branch 'experiment'
0b7434d86859cc7b8c3d5e1dddfed66ff742fcbc added a commit function
4682c3261057305bdd616e23b64b0857d832627b added a todo file
166ae0c4d3f420721acbb115cc33848dfcc2121a started write support
9fceb02d0ae598e95dc970b74767f19372d61af8 updated rakefile
964f16d36dfccde844893cac5b347e7b3d44abbc commit the todo
8a5cbc430f1a9c3d00faaeffd07798508422908a updated readme
----

//////////////////////////
Now, suppose you forgot to tag the project at v1.2, which was at the ``updated rakefile'' commit.
You can add it after the fact.
To tag that commit, you specify the commit checksum (or part of it) at the end of the command:
//////////////////////////
``updated rakefile'' 커밋을 v1.2로 태그하지 못했다고 해도
나중에 태그를 붙일 수 있다.
특정 커밋에 태그하기 위해서 명령의 끝에 커밋 체크섬을 명시한다(긴 체크섬을 전부 사용할 필요는 없다).

[source,console]
----
$ git tag -a v1.2 9fceb02
----

//////////////////////////
You can see that you've tagged the commit:(((git commands, tag)))
//////////////////////////
이제 아래와 같이 만든 태그를 확인한다.(((git commands, tag)))

[source,console]
----
$ git tag
v0.1
v1.2
v1.3
v1.4
v1.4-lw
v1.5

$ git show v1.2
tag v1.2
Tagger: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Feb 9 15:32:16 2009 -0800

version 1.2
commit 9fceb02d0ae598e95dc970b74767f19372d61af8
Author: Magnus Chacon <mchacon@gee-mail.com>
Date:   Sun Apr 27 20:43:35 2008 -0700

    updated rakefile
...
----

[[_sharing_tags]]
//////////////////////////
==== Sharing Tags
//////////////////////////
==== 태그 공유하기

//////////////////////////
By default, the `git push` command doesn't transfer tags to remote servers.(((git commands, push)))
You will have to explicitly push tags to a shared server after you have created them.
This process is just like sharing remote branches – you can run `git push origin [tagname]`.
//////////////////////////
`git push` 명령은 자동으로 리모트 서버에 태그를 전송하지 않는다.(((git commands, push)))
태그를 만들었으면 서버에 별도로 Push해야 한다.
브랜치를 공유하는 것과 같은 방법으로 할 수 있다. `git push origin [태그 이름]`을 실행한다.

[source,console]
----
$ git push origin v1.5
Counting objects: 14, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (12/12), done.
Writing objects: 100% (14/14), 2.05 KiB | 0 bytes/s, done.
Total 14 (delta 3), reused 0 (delta 0)
To git@github.com:schacon/simplegit.git
 * [new tag]         v1.5 -> v1.5
----

//////////////////////////
If you have a lot of tags that you want to push up at once, you can also use the `--tags` option to the `git push` command.
This will transfer all of your tags to the remote server that are not already there.
//////////////////////////
만약 한 번에 태그를 여러 개 Push하고 싶으면 `--tags` 옵션을 추가하여 `git push`명령을 실행한다.
이 명령으로 리모트 서버에 없는 태그를 모두 전송할 수 있다.

[source,console]
----
$ git push origin --tags
Counting objects: 1, done.
Writing objects: 100% (1/1), 160 bytes | 0 bytes/s, done.
Total 1 (delta 0), reused 0 (delta 0)
To git@github.com:schacon/simplegit.git
 * [new tag]         v1.4 -> v1.4
 * [new tag]         v1.4-lw -> v1.4-lw
----

//////////////////////////
Now, when someone else clones or pulls from your repository, they will get all your tags as well.
//////////////////////////
이제 누군가 저장소에서 Clone하거나 Pull을 하면 모든 태그 정보도 함께 전송된다.

//////////////////////////
==== Checking out Tags
//////////////////////////
==== 태그를 Checkout 하기

//////////////////////////
You can't really check out a tag in Git, since they can't be moved around.
If you want to put a version of your repository in your working directory that looks like a specific tag, you can create a new branch at a specific tag with `git checkout -b [branchname] [tagname]`:
//////////////////////////
태그는 브랜치와는 달리 가리키는 커밋을 바꿀 수 없는 이름이기 때문에 Checkout해서 사용할 수 없다.
태그가 가리키는 특정 커밋 기반의 브랜치는 `git checkout -b [branchname] [tagname]` 명령으로 만든다. 아래는 그 예제이다.

[source,console]
----
$ git checkout -b version2 v2.0.0
Switched to a new branch 'version2'
----

//////////////////////////
Of course if you do this and do a commit, your `version2` branch will be slightly different than your `v2.0.0` tag since it will move forward with your new changes, so do be careful.
//////////////////////////
물론 이렇게 브랜치를 만든 후에 `version2` 브랜치에 커밋하면 브랜치는 업데이트된다. 하지만, `v2.0.0` 태그는 가리키는 커밋이 변하지 않았으므로 두 내용이 가리키는 커밋이 다르다는 것을 알 수 있다.
