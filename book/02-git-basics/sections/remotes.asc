[[_remote_repos]]
//////////////////////////
=== Working with Remotes
//////////////////////////
=== 리모트 저장소

//////////////////////////
To be able to collaborate on any Git project, you need to know how to manage your remote repositories.
Remote repositories are versions of your project that are hosted on the Internet or network somewhere.
You can have several of them, each of which generally is either read-only or read/write for you.
Collaborating with others involves managing these remote repositories and pushing and pulling data to and from them when you need to share work.
Managing remote repositories includes knowing how to add remote repositories, remove remotes that are no longer valid, manage various remote branches and define them as being tracked or not, and more.
In this section, we'll cover some of these remote-management skills.
//////////////////////////
리모트 저장소를 관리할 줄 알아야 다른 사람과 함께 일할 수 있다.
리모트 저장소는 인터넷이나 네트워크 어딘가에 있는 저장소를 말한다.
저장소는 여러 개가 있을 수 있는데 어떤 저장소는 읽고 쓰기 모두 할 수 있고 어떤 저장소는 읽기만 가능할 수 있다.
간단히 말해서 다른 사람들과 함께 일한다는 것은 리모트 저장소를 관리하면서 데이터를 거기에 Push하고 Pull하는 것이다.
리모트 저장소를 관리한다는 것은 저장소를 추가, 삭제하는 것뿐만 아니라 브랜치를 관리하고 추적할지 말지 등을 관리하는 것을 말한다.
이번에는 리모트 저장소를 관리하는 방법에 대해 설명한다.

//////////////////////////
==== Showing Your Remotes
//////////////////////////
==== 리모트 저장소 확인하기

//////////////////////////
To see which remote servers you have configured, you can run the `git remote` command.(((git commands, remote)))
It lists the shortnames of each remote handle you've specified.
If you've cloned your repository, you should at least see origin – that is the default name Git gives to the server you cloned from:
//////////////////////////
`git remote` 명령으로 현재 프로젝트에 등록된 리모트 저장소를 확인할 수 있다.(((git commands, remote)))
이 명령은 리모트 저장소의 단축 이름을 보여준다.
저장소를 Clone하면 origin이라는 리모트 저장소가 자동으로 등록되기 때문에 origin이라는 이름을 볼 수 있다.

[source,console]
----
$ git clone https://github.com/schacon/ticgit
Cloning into 'ticgit'...
remote: Reusing existing pack: 1857, done.
remote: Total 1857 (delta 0), reused 0 (delta 0)
Receiving objects: 100% (1857/1857), 374.35 KiB | 268.00 KiB/s, done.
Resolving deltas: 100% (772/772), done.
Checking connectivity... done.
$ cd ticgit
$ git remote
origin
----

//////////////////////////
You can also specify `-v`, which shows you the URLs that Git has stored for the shortname to be used when reading and writing to that remote:
//////////////////////////
`-v`옵션을 주어 단축이름과 URL을 함께 볼 수 있다.

[source,console]
----
$ git remote -v
origin	https://github.com/schacon/ticgit (fetch)
origin	https://github.com/schacon/ticgit (push)
----

//////////////////////////
If you have more than one remote, the command lists them all.
For example, a repository with multiple remotes for working with several collaborators might look something like this.
//////////////////////////
리모트 저장소가 여러 개 있다면 이 명령은 등록된 전부를 보여준다.
프로젝트를 여러 사람과 함께 작업하여 등록시킨 리모트 저장소가 여러개라면 다음과 같은 결과를 얻을 수도 있다.

[source,console]
----
$ cd grit
$ git remote -v
bakkdoor  https://github.com/bakkdoor/grit (fetch)
bakkdoor  https://github.com/bakkdoor/grit (push)
cho45     https://github.com/cho45/grit (fetch)
cho45     https://github.com/cho45/grit (push)
defunkt   https://github.com/defunkt/grit (fetch)
defunkt   https://github.com/defunkt/grit (push)
koke      git://github.com/koke/grit.git (fetch)
koke      git://github.com/koke/grit.git (push)
origin    git@github.com:mojombo/grit.git (fetch)
origin    git@github.com:mojombo/grit.git (push)
----

//////////////////////////
This means we can pull contributions from any of these users pretty easily. We may additionally have permission to push to one or more of these, though we can't tell that here.
//////////////////////////
이렇게 리모트 저장소가 여러 개가 등록되어 있으면 다른 사람이 기여한 내용(Contributions)을 쉽게 가져올 수 있다. 어떤 저장소에는 Push 권한까지 제공하기도 하지만 일단 이 화면에서 Push 가능 권한까지는 확인할 수 없다.

//////////////////////////
Notice that these remotes use a variety of protocols; we'll cover more about this in <<_git_on_the_server>>.
//////////////////////////
리모트 저장소와 데이터를 주고받는데 사용하는 다양한 프로토콜에 대해서는 <<_git_on_the_server>> 에서 자세히 살펴보기로 한다.

//////////////////////////
==== Adding Remote Repositories
//////////////////////////
==== 리모트 저장소 추가하기

//////////////////////////
We've mentioned and given some demonstrations of adding remote repositories in previous sections, but here is how to do it explicitly.(((git commands, remote)))
To add a new remote Git repository as a shortname you can reference easily, run `git remote add [shortname] [url]`:
//////////////////////////
이전 절에서도 리모트 저장소를 추가하는 것에 대해 설명했었지만 수박 겉핥기식으로 살펴봤을 뿐이었다. 여기에서는 리모트 저장소를 추가하는 방법을 자세하게 설명한다.(((git commands, remote)))
새 리모트 저장소를 쉽게 추가할 수 있는데 `git remote add [단축이름] [url]` 명령을 실행한다.

[source,console]
----
$ git remote
origin
$ git remote add pb https://github.com/paulboone/ticgit
$ git remote -v
origin	https://github.com/schacon/ticgit (fetch)
origin	https://github.com/schacon/ticgit (push)
pb	https://github.com/paulboone/ticgit (fetch)
pb	https://github.com/paulboone/ticgit (push)
----

//////////////////////////
Now you can use the string `pb` on the command line in lieu of the whole URL.
For example, if you want to fetch all the information that Paul has but that you don't yet have in your repository, you can run `git fetch pb`:
//////////////////////////
이제 URL 대신에 `pb` 라는 이름을 사용할 수 있다.
예를 들어 로컬 저장소에는 없지만 Paul의 저장소에 있는 것을 가져오려면 아래과 같이 실행한다.

[source,console]
----
$ git fetch pb
remote: Counting objects: 43, done.
remote: Compressing objects: 100% (36/36), done.
remote: Total 43 (delta 10), reused 31 (delta 5)
Unpacking objects: 100% (43/43), done.
From https://github.com/paulboone/ticgit
 * [new branch]      master     -> pb/master
 * [new branch]      ticgit     -> pb/ticgit
----

//////////////////////////
Paul's master branch is now accessible locally as `pb/master` – you can merge it into one of your branches, or you can check out a local branch at that point if you want to inspect it.
(We'll go over what branches are and how to use them in much more detail in <<_git_branching>>.)
//////////////////////////
로컬에서 `pb/master`가 Paul의 master 브랜치이다. 이 브랜치를 로컬 브랜치중 하나에 Merge하거나 Checkout해서 브랜치 내용을 자세히 확인할 수 있다. (브랜치를 어떻게 사용하는지는 <<_git_branching>> 에서 자세히 살펴본다)

[[_fetching_and_pulling]]
//////////////////////////
==== Fetching and Pulling from Your Remotes
//////////////////////////
==== 리모트 저장소를 Pull 하거나 Fetch 하기

//////////////////////////
As you just saw, to get data from your remote projects, you can run:(((git commands, fetch)))
//////////////////////////
앞서 설명했듯이 리모트 저장소에서 데이터를 가져오려면 간단히 아래와 같이 실행한다.(((git commands, fetch)))

[source,console]
----
$ git fetch [remote-name]
----

//////////////////////////
The command goes out to that remote project and pulls down all the data from that remote project that you don't have yet.
After you do this, you should have references to all the branches from that remote, which you can merge in or inspect at any time.
//////////////////////////
이 명령은 로컬에는 없지만, 리모트 저장소에는 있는 데이터를 모두 가져온다.
그러면 리모트 저장소의 모든 브랜치를 로컬에서 접근할 수 있어서 언제든지 Merge를 하거나 내용을 살펴볼 수 있다.

//////////////////////////
If you clone a repository, the command automatically adds that remote repository under the name ``origin''.
So, `git fetch origin` fetches any new work that has been pushed to that server since you cloned (or last fetched from) it.
It's important to note that the `git fetch` command pulls the data to your local repository – it doesn't automatically merge it with any of your work or modify what you're currently working on.
You have to merge it manually into your work when you're ready.
//////////////////////////
저장소를 Clone하면 명령은 자동으로 리모트 저장소를 ``origin''이라는 이름으로 추가한다.
그래서 나중에 `git fetch origin`을 실행하면 Clone한 이후에(혹은 마지막으로 가져온 이후에) 수정된 것을 모두 가져온다.
`git fetch` 명령은 리모트 저장소의 데이터를 모두 로컬로 가져오지만, 자동으로 Merge하지 않는다.
그래서 당신이 로컬에서 하던 작업을 정리하고 나서 수동으로 Merge해야 한다.

//////////////////////////
If you have a branch set up to track a remote branch (see the next section and <<_git_branching>> for more information), you can use the `git pull` command to automatically fetch and then merge a remote branch into your current branch.(((git commands, pull)))
This may be an easier or more comfortable workflow for you; and by default, the `git clone` command automatically sets up your local master branch to track the remote master branch (or whatever the default branch is called) on the server you cloned from.
Running `git pull` generally fetches data from the server you originally cloned from and automatically tries to merge it into the code you're currently working on.
//////////////////////////
그냥 쉽게 `git pull` 명령으로 리모트 저장소 브랜치에서 데이터를 가져올 뿐만 아니라 자동으로 로컬 브랜치와 Merge시킬 수 있다(다음 섹션과 <<_git_branching>> 에서 좀더 자세히 살펴본다).(((git commands, pull)))
먼저 `git clone` 명령은 자동으로 로컬의 master 브랜치가 리모트 저장소의 master 브랜치를 추적하도록 한다(물론 리모트 저장소에 master 브랜치가 있다는 가정에서).
그리고 `git pull` 명령은 Clone한 서버에서 데이터를 가져오고 그 데이터를 자동으로 현재 작업하는 코드와 Merge시킨다.

[[_pushing_remotes]]
//////////////////////////
==== Pushing to Your Remotes
//////////////////////////
==== 리모트 저장소에 Push하기

//////////////////////////
When you have your project at a point that you want to share, you have to push it upstream.
The command for this is simple: `git push [remote-name] [branch-name]`.(((git commands, push)))
If you want to push your master branch to your `origin` server (again, cloning generally sets up both of those names for you automatically), then you can run this to push any commits you've done back up to the server:
//////////////////////////
프로젝트를 공유하고 싶을 때 리모트 저장소에 Push할 수 있다.
이 명령은 `git push [리모트 저장소 이름] [브랜치 이름]`으로 단순하다.(((git commands, push)))
master 브랜치를 `origin` 서버에 Push하려면(다시 말하지만 Clone하면 보통 자동으로 origin 이름이 생성된다) 아래와 같이 서버에 Push한다.

[source,console]
----
$ git push origin master
----

//////////////////////////
This command works only if you cloned from a server to which you have write access and if nobody has pushed in the meantime.
If you and someone else clone at the same time and they push upstream and then you push upstream, your push will rightly be rejected.
You'll have to pull down their work first and incorporate it into yours before you'll be allowed to push.
See <<_git_branching>> for more detailed information on how to push to remote servers.
//////////////////////////
이 명령은 Clone한 리모트 저장소에 쓰기 권한이 있고, Clone하고 난 이후 아무도 리모트 저장소에 Push하지 않았을 때만 사용할 수 있다.
다시 말해서 Clone한 사람이 여러 명 있을 때, 다른 사람이 Push한 후에 Push하려고 하면 Push할 수 없다.
먼저 다른 사람이 작업한 것을 가져와서 Merge한 후에 Push할 수 있다.
<<_git_branching>> 에서 서버에 Push하는 방법에 대해 자세히 설명할 것이다.

[[_inspecting_remote]]
//////////////////////////
==== Inspecting a Remote
//////////////////////////
==== 리모트 저장소 살펴보기

//////////////////////////
If you want to see more information about a particular remote, you can use the `git remote show [remote-name]` command.(((git commands, remote)))
If you run this command with a particular shortname, such as `origin`, you get something like this:
//////////////////////////
`git remote show [리모트 저장소 이름]` 명령으로 리모트 저장소의 구체적인 정보를 확인할 수 있다.(((git commands, remote)))
`origin` 같은 단축이름으로 이 명령을 실행하면 아래와 같은 정보를 볼 수 있다.

[source,console]
----
$ git remote show origin
* remote origin
  Fetch URL: https://github.com/schacon/ticgit
  Push  URL: https://github.com/schacon/ticgit
  HEAD branch: master
  Remote branches:
    master                               tracked
    dev-branch                           tracked
  Local branch configured for 'git pull':
    master merges with remote master
  Local ref configured for 'git push':
    master pushes to master (up to date)
----

//////////////////////////
It lists the URL for the remote repository as well as the tracking branch information.
The command helpfully tells you that if you're on the master branch and you run `git pull`, it will automatically merge in the master branch on the remote after it fetches all the remote references.
It also lists all the remote references it has pulled down.
//////////////////////////
리모트 저장소의 URL과 추적하는 브랜치를 출력한다.
이 명령은 `git pull` 명령을 실행할 때 master 브랜치와 Merge할 브랜치가 무엇인지 보여 준다. `git pull` 명령은 리모트 저장소 브랜치의 데이터를 모두 가져오고 나서 자동으로 Merge할 것이다.
그리고 가져온 모든 리모트 저장소 정보도 출력한다.

//////////////////////////
That is a simple example you're likely to encounter.
When you're using Git more heavily, however, you may see much more information from `git remote show`:
//////////////////////////
좀 더 Git을 열심히 사용하게 되면 `git remote show` 명령은 더 많은 정보를 보여줄 것이다.
여러분도 언젠가는 아래와 같은 메시지(역주, 다수의 브랜치를 사용하는 메시지)를 볼 날이 올 것이다.

[source,console]
----
$ git remote show origin
* remote origin
  URL: https://github.com/my-org/complex-project
  Fetch URL: https://github.com/my-org/complex-project
  Push  URL: https://github.com/my-org/complex-project
  HEAD branch: master
  Remote branches:
    master                           tracked
    dev-branch                       tracked
    markdown-strip                   tracked
    issue-43                         new (next fetch will store in remotes/origin)
    issue-45                         new (next fetch will store in remotes/origin)
    refs/remotes/origin/issue-11     stale (use 'git remote prune' to remove)
  Local branches configured for 'git pull':
    dev-branch merges with remote dev-branch
    master     merges with remote master
  Local refs configured for 'git push':
    dev-branch                     pushes to dev-branch                     (up to date)
    markdown-strip                 pushes to markdown-strip                 (up to date)
    master                         pushes to master                         (up to date)
----

//////////////////////////
This command shows which branch is automatically pushed to when you run `git push` while on certain branches.
It also shows you which remote branches on the server you don't yet have, which remote branches you have that have been removed from the server, and multiple branches that are automatically merged when you run `git pull`.
//////////////////////////
브랜치명을 생략하고 `git push` 명령을 실행할 때 어떤 브랜치가 어떤 브랜치로 Push되는지 보여준다.
또 아직 로컬로 가져오지 않은 리모트 저장소의 브랜치는 어떤 것들이 있는지, 서버에서는 삭제됐지만 아직 가지고 있는 브랜치는 어떤 것인지, `git pull` 명령을 실행했을 때 자동으로 Merge할 브랜치는 어떤 것이 있는지 보여준다.

//////////////////////////
==== Removing and Renaming Remotes
//////////////////////////
==== 리모트 저장소 이름을 바꾸거나 리모트 저장소를 삭제하기

//////////////////////////
If you want to rename a reference you can run `git remote rename` to change a remote's shortname.(((git commands, remote)))
For instance, if you want to rename `pb` to `paul`, you can do so with `git remote rename`:
//////////////////////////
`git remote rename` 명령으로 리모트 저장소의 이름을 변경할 수 있다.(((git commands, remote)))
예를 들어 `pb`를 `paul`로 변경하려면 `git remote rename` 명령을 사용한다.

[source,console]
----
$ git remote rename pb paul
$ git remote
origin
paul
----

//////////////////////////
It's worth mentioning that this changes your remote branch names, too.
What used to be referenced at `pb/master` is now at `paul/master`.
//////////////////////////
리모트 저장소의 브랜치 이름도 바뀐다.
여태까지 `pb/master`로 리모트 저장소 브랜치를 사용했으면 이제는 `paul/master`라고 사용해야 한다.

//////////////////////////
If you want to remove a remote for some reason – you've moved the server or are no longer using a particular mirror, or perhaps a contributor isn't contributing anymore – you can use `git remote rm`:
//////////////////////////
리모트 저장소를 삭제해야 한다면 `git remote rm` 명령을 사용한다. 서버 정보가 바뀌었을 때, 더는 별도의 미러가 필요하지 않을 때, 더는 기여자가 활동하지 않을 때 필요하다.

[source,console]
----
$ git remote rm paul
$ git remote
origin
----
