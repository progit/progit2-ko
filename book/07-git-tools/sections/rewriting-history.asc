[[_rewriting_history]]
//////////////////////////
=== Rewriting History
//////////////////////////
=== 히스토리 단장하기

//////////////////////////
Many times, when working with Git, you may want to revise your local commit history.
One of the great things about Git is that it allows you to make decisions at the last possible moment.
You can decide what files go into which commits right before you commit with the staging area, you can decide that you didn’t mean to be working on something yet with `git stash`, and you can rewrite commits that already happened so they look like they happened in a different way.
This can involve changing the order of the commits, changing messages or modifying files in a commit, squashing together or splitting apart commits, or removing commits entirely -- all before you share your work with others.
//////////////////////////
Git으로 일하다 보면 어떤 이유로든 로컬 커밋 히스토리를 수정해야 할 때가 있다.
결정을 나중으로 미룰 수 있던 것은 Git의 장점이다.
Staging Area로 커밋할 파일을 고르는 일을 커밋하는 순간으로 미룰 수 있고 Stash 명령으로 하던 일을 미룰 수 있다. 게다가 이미 커밋해서 결정한 내용을 수정할 수 있다. 그리고 수정할 수 있는 것도 매우 다양하다.
커밋들의 순서도 변경할 수 있고 커밋 메시지와 커밋한 파일도 변경할 수 있다. 여러 개의 커밋을 하나로 합치거나 반대로 커밋 하나를 여러 개로 분리할 수도 있다. 아니면 커밋 전체를 삭제할 수도 있다. 하지만, 이 모든 것은 다른 사람과 코드를 공유하기 전에 해야 한다.

//////////////////////////
In this section, you’ll see how to accomplish these tasks so that you can make your commit history look the way you want before you share it with others.
//////////////////////////
이 절에서는 사람들과 코드를 공유하기 전에 커밋 히스토리를 예쁘게 단장하는 방법에 대해서 설명한다.

[NOTE]
====
//////////////////////////
One of the cardinal rules of Git is that, since so much work is local within your clone, you have a great deal of freedom to rewrite your history _locally_.
However, once you push your work, it is a different story entirely, and you should consider pushed work as final unless you have good reason to change it.
In short, you should avoid pushing your work until you're happy with it and ready to share it with the rest of the world.
//////////////////////////
Git이 동작하는 기본 원리 중 하나는 Git은 로컬에 모든 버전관리 데이터를 로컬에 복사(Clone) 해두고 있다는 점이다. 이 때문에 자유롭게 히스토리를 _로컬에서_ 수정해 볼 수 있는 자유도 누릴 수 있다.
다만 로컬의 버전관리 데이터 혹은 커밋이 외부로 Push가 된 후라면 이야기는 완전 딴판이된다. Push된 데이터는 수정에 대해선 완전이 끝난 것이다. 고쳐야 할 이유가 생겼더라도 새로 수정작업을 추가해야지 이전 커밋 자체를 수정할 수는 없다.
그렇기에 온전하게 수정 작업을 마무리했다는 확신 없이 작업 내용을 공유하는 저장소로 보내는(Push) 것은 피해야 할 행동이다.

====


[[_git_amend]]
//////////////////////////
==== Changing the Last Commit
//////////////////////////
==== 마지막 커밋을 수정하기

//////////////////////////
Changing your most recent commit is probably the most common rewriting of history that you’ll do.
You’ll often want to do two basic things to your last commit: simply change the commit message, or change the actual content of the commit by adding, removing and modifying files.
//////////////////////////
히스토리를 단장하는 일 중에서는 마지막 커밋을 수정하는 것이 가장 자주 하는 일이다.
기본적으로 두 가지로 나눌 수 있는데 하나는 단순히 커밋 메시지만를 수정하는 것이고 다른 하나는 나중에 수정한 파일을 마지막 커밋 안에 밀어넣는 것이다.

//////////////////////////
If you simply want to modify your last commit message, that's easy:
//////////////////////////
커밋 메시지를 수정하는 방법은 매우 간단하다.

[source,console]
----
$ git commit --amend
----

//////////////////////////
The command above loads the previous commit message into an editor session, where you can make changes to the message, save those changes and exit.
When you save and close the editor, the editor writes a new commit containing that updated commit message and makes it your new last commit.
//////////////////////////
이 명령은 자동으로 텍스트 편집기를 실행시켜서 마지막 커밋 메시지를 열어준다.
여기에 메시지를 바꾸고 편집기를 닫으면 편집기는 바뀐 메시지로 마지막 커밋을 수정한다.

//////////////////////////
If, on the other hand, you want to change the actual _content_ of your last commit, the process works basically the same way -- first make the changes you think you forgot, stage those changes, and the subsequent `git commit --amend` _replaces_ that last commit with your new, improved commit.
//////////////////////////
반대로 커밋 메시지가 아니라 프로젝트 내용을 수정한 경우가 있다. 커밋하고 난 후 새로 만든 파일이나 수정한 파일을 가장 최근 커밋에 집어넣을 수 있다. 기본적으로 방법은 같다.
파일을 수정하고 `git add` 명령으로 Staging Area에 넣는다. 그리고 `git commit --amend` 명령으로 커밋하면 커밋 자체가 수정되면서 추가로 수정사항을 밀어넣을 수 있다.

//////////////////////////
You need to be careful with this technique because amending changes the SHA-1 of the commit.
It’s like a very small rebase -- don’t amend your last commit if you’ve already pushed it.
//////////////////////////
이때 SHA-1 값이 바뀌기 때문에 과거의 커밋을 변경할 때 주의해야 한다.
Rebase와 같이 이미 Push 한 커밋은 수정하면 안 된다.

[TIP]
//////////////////////////
.An amended commit may (or may not) need an amended commit message
//////////////////////////
.커밋을 고치는 작업은 커밋 메시지 수정을 야기할 수 있음.
====
//////////////////////////
When you amend a commit, you have the opportunity to change both the commit message and the content of the commit.
If you amend the content of the commit substantially, you should almost certainly update the commit message to reflect that amended content.
//////////////////////////
커밋을 고치는 것은 커밋 메시지를 고치는 것일수도 있고 또는 커밋을 담고 있는 변경 내용을 고치는 것 일수도 있다.
커밋 내용을 고치는데 있어 추가된 변경 내용이 상당히 있을 경우 커밋 메시지가 수정 내용을 충실하게 담고 있는지 확인해 볼 필요가 있다.

//////////////////////////
On the other hand, if your amendments are suitably trivial (fixing a silly typo or adding a file you forgot to stage) such that the earlier commit message is just fine, you can simply make the changes, stage them, and avoid the unnecessary editor session entirely with:
//////////////////////////
반대로 커밋을 고치는 내용이 오타를 살짝 고치거나 실수로 빠뜨린 것을 넣는 등 아주 사소하거나 이미 커밋 메시지가 충분히 이를 반영하고 있을 수 있다. 이런 경우 다음과 같이 `--no-edit` 옵션을 사용하면 커밋 메시지를 수정하도록 편집기가 실행되지는 않는다.

[source,console]
----
$ git commit --amend --no-edit
----

====

[[_changing_multiple]]
//////////////////////////
==== Changing Multiple Commit Messages
//////////////////////////
==== 커밋 메시지를 여러 개 수정하기

//////////////////////////
To modify a commit that is farther back in your history, you must move to more complex tools.
Git doesn’t have a modify-history tool, but you can use the rebase tool to rebase a series of commits onto the HEAD they were originally based on instead of moving them to another one.
With the interactive rebase tool, you can then stop after each commit you want to modify and change the message, add files, or do whatever you wish.
You can run rebase interactively by adding the `-i` option to `git rebase`.
You must indicate how far back you want to rewrite commits by telling the command which commit to rebase onto.
//////////////////////////
최근 커밋이 아니라 예전 커밋을 수정하려면 다른 도구가 필요하다.
히스토리 수정하기 위해 만들어진 도구는 없지만 `rebase` 명령을 이용하여 수정할 수 있다. 현재 작업하는 브랜치에서 각 커밋을 하나하나 수정하는 것이 아니라 어느 시점부터 HEAD까지의 커밋을 한 번에 Rebase 한다.
대화형 Rebase 도구를 사용하면 커밋을 처리할 때마다 잠시 멈춘다. 그러면 각 커밋의 메시지를 수정하거나 파일을 추가하고 변경하는 등의 일을 진행할 수 있다.
`git rebase` 명령에 `-i` 옵션을 추가하면 대화형 모드로 Rebase 할 수 있다.
어떤 시점부터 HEAD까지 Rebase 할 것인지 인자로 넘기면 된다.

//////////////////////////
For example, if you want to change the last three commit messages, or any of the commit messages in that group, you supply as an argument to `git rebase -i` the parent of the last commit you want to edit, which is `HEAD~2^` or `HEAD~3`.
It may be easier to remember the `~3` because you’re trying to edit the last three commits, but keep in mind that you’re actually designating four commits ago, the parent of the last commit you want to edit:
//////////////////////////
마지막 커밋 메시지 세 개를 모두 수정하거나 그 중 몇 개를 수정하는 시나리오를 살펴보자. `git rebase -i` 의 인자로 편집하려는 마지막 커밋의 부모를 `HEAD~2^` 나 `HEAD~3` 로 해서 넘긴다.
마지막 세 개의 커밋을 수정하는 것이기 때문에 `~3` 이 좀 더 기억하기 쉽다. 그렇지만, 실질적으로 가리키게 되는 것은 수정하려는 커밋의 부모인 네 번째 이전 커밋이다.

[source,console]
----
$ git rebase -i HEAD~3
----

//////////////////////////
Remember again that this is a rebasing command – every commit included in the range `HEAD~3..HEAD` will be rewritten, whether you change the message or not.
Don’t include any commit you’ve already pushed to a central server – doing so will confuse other developers by providing an alternate version of the same change.
//////////////////////////
이 명령은 Rebase 하는 것이기 때문에 메시지의 수정 여부에 관계없이 `HEAD~3..HEAD` 범위에 있는 모든 커밋을 수정한다.
다시 강조하지만 이미 중앙서버에 Push 한 커밋은 절대 고치지 말아야 한다. Push 한 커밋을 Rebase 하면 결국 같은 내용을 두 번 Push 하는 것이기 때문에 다른 개발자들이 혼란스러워 할 것이다.

//////////////////////////
Running this command gives you a list of commits in your text editor that looks something like this:
//////////////////////////
실행하면 Git은 수정하려는 커밋 목록이 첨부된 스크립트를 텍스트 편집기로 열어준다.

[source,console]
----
pick f7f3f6d changed my name a bit
pick 310154e updated README formatting and added blame
pick a5f4a0d added cat-file

# Rebase 710f0f8..a5f4a0d onto 710f0f8
#
# Commands:
#  p, pick = use commit
#  r, reword = use commit, but edit the commit message
#  e, edit = use commit, but stop for amending
#  s, squash = use commit, but meld into previous commit
#  f, fixup = like "squash", but discard this commit's log message
#  x, exec = run command (the rest of the line) using shell
#
# These lines can be re-ordered; they are executed from top to bottom.
#
# If you remove a line here THAT COMMIT WILL BE LOST.
#
# However, if you remove everything, the rebase will be aborted.
#
# Note that empty commits are commented out
----

//////////////////////////
It’s important to note that these commits are listed in the opposite order than you normally see them using the `log` command.
If you run a `log`, you see something like this:
//////////////////////////
이 커밋은 모두 `log` 명령과는 정반대의 순서로 나열된다.
`log` 명령을 실행하면 아래와 같은 결과를 볼 수 있다.

[source,console]
----
$ git log --pretty=format:"%h %s" HEAD~3..HEAD
a5f4a0d added cat-file
310154e updated README formatting and added blame
f7f3f6d changed my name a bit
----

//////////////////////////
Notice the reverse order.
The interactive rebase gives you a script that it’s going to run.
It will start at the commit you specify on the command line (`HEAD~3`) and replay the changes introduced in each of these commits from top to bottom.
It lists the oldest at the top, rather than the newest, because that’s the first one it will replay.
//////////////////////////
위 결과의 역순임을 기억하자.
대화형 Rebase는 스크립트에 적혀 있는 순서대로
`HEAD~3` 부터 적용하기 시작하고 위에서 아래로 각각의 커밋을 순서대로 수정한다.
순서대로 적용하는 것이기 때문에 제일 위에 있는 것이 최신이 아니라 가장 오래된 것이다.

//////////////////////////
You need to edit the script so that it stops at the commit you want to edit.
To do so, change the word `pick' to the word ` edit' for each of the commits you want the script to stop after.
For example, to modify only the third commit message, you change the file to look like this:
//////////////////////////
특정 커밋에서 실행을 멈추게 하려면 스크립트를 수정해야 한다.
`pick` 이라는 단어를 'edit'로 수정하면 그 커밋에서 멈춘다.
가장 오래된 커밋 메시지를 수정하려면 아래와 같이 편집한다.

[source,console]
----
edit f7f3f6d changed my name a bit
pick 310154e updated README formatting and added blame
pick a5f4a0d added cat-file
----

//////////////////////////
When you save and exit the editor, Git rewinds you back to the last commit in that list and drops you on the command line with the following message:
//////////////////////////
저장하고 편집기를 종료하면 Git은 목록에 있는 커밋 중에서 가장 오래된 커밋으로 이동하고, 아래와 같은 메시지를 보여주고, 명령 프롬프트를 보여준다.

[source,console]
----
$ git rebase -i HEAD~3
Stopped at f7f3f6d... changed my name a bit
You can amend the commit now, with

       git commit --amend

Once you’re satisfied with your changes, run

       git rebase --continue
----

//////////////////////////
These instructions tell you exactly what to do.
Type
//////////////////////////
명령 프롬프트가 나타날 때 Git은 Rebase 과정에서 현재 정확히 뭘 해야 하는지 메시지로 알려준다.
아래와 같은 명령을 실행하고

[source,console]
----
$ git commit --amend
----

//////////////////////////
Change the commit message, and exit the editor.
Then, run
//////////////////////////
커밋 메시지를 수정하고 텍스트 편집기를 종료하고 나서
아래 명령을 실행한다.

[source,console]
----
$ git rebase --continue
----

//////////////////////////
This command will apply the other two commits automatically, and then you’re done.
If you change pick to edit on more lines, you can repeat these steps for each commit you change to edit.
Each time, Git will stop, let you amend the commit, and continue when you’re finished.
//////////////////////////
이렇게 나머지 두 개의 커밋에 적용하면 끝이다.
다른 것도 pick을 edit로 수정해서 이 작업을 몇 번이든 반복할 수 있다.
매번 Git이 멈출 때마다 커밋을 정정할 수 있고 완료할 때까지 계속 할 수 있다.

//////////////////////////
==== Reordering Commits
//////////////////////////
==== 커밋 순서 바꾸기

//////////////////////////
You can also use interactive rebases to reorder or remove commits entirely.
If you want to remove the “added cat-file” commit and change the order in which the other two commits are introduced, you can change the rebase script from this
//////////////////////////
대화형 Rebase 도구로 커밋 전체를 삭제하거나 순서를 조정할 수 있다.
“added cat-file” 커밋을 삭제하고 다른 두 커밋의 순서를 변경하려면 아래와 같은 Rebase 스크립트를

[source,console]
----
pick f7f3f6d changed my name a bit
pick 310154e updated README formatting and added blame
pick a5f4a0d added cat-file
----

//////////////////////////
to this:
//////////////////////////
아래와 같이 수정한다.

[source,console]
----
pick 310154e updated README formatting and added blame
pick f7f3f6d changed my name a bit
----

//////////////////////////
When you save and exit the editor, Git rewinds your branch to the parent of these commits, applies `310154e` and then `f7f3f6d`, and then stops.
You effectively change the order of those commits and remove the “added cat-file” commit completely.
//////////////////////////
수정한 내용을 저장하고 편집기를 종료하면 Git은 브랜치를 이 커밋의 부모로 이동시키고서 `310154e` 와 `f7f3f6d` 를 순서대로 적용한다.
명령이 끝나고 나면 커밋 순서가 변경됐고 “added cat-file” 커밋이 제거된 것을 확인할 수 있다.

[[_squashing]]
//////////////////////////
==== Squashing Commits
//////////////////////////
==== 커밋 합치기

//////////////////////////
It’s also possible to take a series of commits and squash them down into a single commit with the interactive rebasing tool.
The script puts helpful instructions in the rebase message:
//////////////////////////
대화형 Rebase 명령을 이용하여 여러 개의 커밋을 꾹꾹 눌러서 커밋 하나로 만들어 버릴 수 있다.
Rebase 스크립트에 자동으로 포함된 도움말에 설명이 있다.

[source,console]
----
#
# Commands:
#  p, pick = use commit
#  r, reword = use commit, but edit the commit message
#  e, edit = use commit, but stop for amending
#  s, squash = use commit, but meld into previous commit
#  f, fixup = like "squash", but discard this commit's log message
#  x, exec = run command (the rest of the line) using shell
#
# These lines can be re-ordered; they are executed from top to bottom.
#
# If you remove a line here THAT COMMIT WILL BE LOST.
#
# However, if you remove everything, the rebase will be aborted.
#
# Note that empty commits are commented out
----

//////////////////////////
If, instead of “pick” or “edit”, you specify “squash”, Git applies both that change and the change directly before it and makes you merge the commit messages together.
So, if you want to make a single commit from these three commits, you make the script look like this:
//////////////////////////
“pick” 이나 “edit” 말고 “squash” 를 입력하면 Git은 해당 커밋과 바로 이전 커밋을 합칠 것이고 커밋 메시지도 Merge 한다.
그래서 3개의 커밋을 모두 합치려면 스크립트를 아래와 같이 수정한다.

[source,console]
----
pick f7f3f6d changed my name a bit
squash 310154e updated README formatting and added blame
squash a5f4a0d added cat-file
----

//////////////////////////
When you save and exit the editor, Git applies all three changes and then puts you back into the editor to merge the three commit messages:
//////////////////////////
저장하고 나서 편집기를 종료하면 Git은 3개의 커밋 메시지를 Merge 할 수 있도록 에디터를 바로 실행해준다.

[source,console]
----
# This is a combination of 3 commits.
# The first commit's message is:
changed my name a bit

# This is the 2nd commit message:

updated README formatting and added blame

# This is the 3rd commit message:

added cat-file
----

//////////////////////////
When you save that, you have a single commit that introduces the changes of all three previous commits.
//////////////////////////
이 메시지를 저장하면 3개의 커밋이 모두 합쳐진 커밋 한 개만 남는다.

//////////////////////////
==== Splitting a Commit
//////////////////////////
==== 커밋 분리하기

//////////////////////////
Splitting a commit undoes a commit and then partially stages and commits as many times as commits you want to end up with.
For example, suppose you want to split the middle commit of your three commits.
Instead of “updated README formatting and added blame”, you want to split it into two commits: “updated README formatting” for the first, and “added blame” for the second.
You can do that in the `rebase -i` script by changing the instruction on the commit you want to split to “edit”:
//////////////////////////
커밋을 분리한다는 것은 기존의 커밋을 해제하고(혹은 되돌려 놓고) Stage를 여러 개로 분리하고 나서 그것을 원하는 횟수만큼 다시 커밋하는 것이다.
예로 들었던 커밋 세 개 중에서 가운데 것을 분리해보자. 이 커밋의 “updated README formatting and added blame” 을 “updated README formatting” 과 “added blame” 으로 분리하는 것이다. `rebase -i` 스크립트에서 해당 커밋을 "edit"로 변경한다.

[source,console]
----
pick f7f3f6d changed my name a bit
edit 310154e updated README formatting and added blame
pick a5f4a0d added cat-file
----

//////////////////////////
Then, when the script drops you to the command line, you reset that commit, take the changes that have been reset, and create multiple commits out of them.
When you save and exit the editor, Git rewinds to the parent of the first commit in your list, applies the first commit (`f7f3f6d`), applies the second (`310154e`), and drops you to the console.
There, you can do a mixed reset of that commit with `git reset HEAD^`, which effectively undoes that commit and leaves the modified files unstaged.
Now you can stage and commit files until you have several commits, and run `git rebase --continue` when you’re done:
//////////////////////////
저장하고 나서 명령 프롬프트로 넘어간 다음에 그 커밋을 해제하고 그 내용을 다시 두 개로 나눠서 커밋하면 된다.
저장하고 편집기를 종료하면 Git은 제일 오래된 커밋의 부모로 이동하고서 `f7f3f6d` 과 `310154e` 을 처리하고 콘솔 프롬프트를 보여준다.
여기서 커밋을 해제하는 `git reset HEAD^` 라는 명령으로 커밋을 해제한다. 그러면 수정했던 파일은 Unstaged 상태가 된다.
그다음에 파일을 Stage 한 후 커밋하는 일을 원하는 만큼 반복하고 나서 `git rebase --continue` 라는 명령을 실행하면 남은 Rebase 작업이 끝난다.

[source,console]
----
$ git reset HEAD^
$ git add README
$ git commit -m 'updated README formatting'
$ git add lib/simplegit.rb
$ git commit -m 'added blame'
$ git rebase --continue
----

//////////////////////////
Git applies the last commit (`a5f4a0d`) in the script, and your history looks like this:
//////////////////////////
나머지 `a5f4a0d` 커밋도 처리되면 히스토리는 아래와 같다.

[source,console]
----
$ git log -4 --pretty=format:"%h %s"
1c002dd added cat-file
9b29157 added blame
35cfb2b updated README formatting
f3cc40e changed my name a bit
----

//////////////////////////
Once again, this changes the SHA-1s of all the commits in your list, so make sure no commit shows up in that list that you’ve already pushed to a shared repository.
//////////////////////////
다시 강조하지만 Rebase 하면 목록에 있는 모든 커밋의 SHA-1 값은 변경된다. 절대로 이미 서버에 Push 한 커밋을 수정하면 안 된다.

//////////////////////////
==== The Nuclear Option: filter-branch
//////////////////////////
==== filter-branch는 포크레인

//////////////////////////
There is another history-rewriting option that you can use if you need to rewrite a larger number of commits in some scriptable way – for instance, changing your email address globally or removing a file from every commit.
The command is `filter-branch`, and it can rewrite huge swaths of your history, so you probably shouldn’t use it unless your project isn’t yet public and other people haven’t based work off the commits you’re about to rewrite.
However, it can be very useful.
You’ll learn a few of the common uses so you can get an idea of some of the things it’s capable of.
//////////////////////////
수정해야 하는 커밋이 너무 많아서 Rebase 스크립트로 수정하기 어려울 것 같으면 다른 방법을 사용하는 것이 좋다. 모든 커밋의 이메일 주소를 변경하거나 어떤 파일을 삭제하는 경우를 살펴보자.
`filter-branch` 라는 명령으로 수정할 수 있는데 Rebase가 삽이라면 이 명령은 포크레인이라고 할 수 있다. `filter-branch` 도 역시 수정하려는 커밋이 이미 공개돼서 다른 사람과 함께 공유하는 중이라면 사용하지 말아야 한다.
하지만, 잘 쓰면 꽤 유용하다.
`filter-branch` 가 유용한 경우를 예로 들어 설명하기 때문에 여기에서 대충 어떤 경우에 유용할지 배울 수 있다.

[[_removing_file_every_commit]]
//////////////////////////
===== Removing a File from Every Commit
//////////////////////////
===== 모든 커밋에서 파일을 제거하기

//////////////////////////
This occurs fairly commonly.
Someone accidentally commits a huge binary file with a thoughtless `git add .`, and you want to remove it everywhere.
Perhaps you accidentally committed a file that contained a password, and you want to make your project open source.
`filter-branch` is the tool you probably want to use to scrub your entire history.
To remove a file named `passwords.txt` from your entire history, you can use the `--tree-filter` option to `filter-branch`:
//////////////////////////
갑자기 누군가 생각 없이 `git add .` 같은 명령을 실행해서 공룡 똥 덩어리를 커밋했거나 실수로 암호가 포함된 파일을 커밋해서 이런 파일을 다시 삭제해야 하는 상황을 살펴보자.
이런 상황은 생각보다 자주 발생한다.
`filter-branch` 는 히스토리 전체에서 필요한 것만 골라내는 데 사용하는 도구다.
`filter-branch` 의 `--tree-filter` 라는 옵션을 사용하면 히스토리에서 `passwords.txt` 파일을 아예 제거할 수 있다.

[source,console]
----
$ git filter-branch --tree-filter 'rm -f passwords.txt' HEAD
Rewrite 6b9b3cf04e7c5686a9cb838c3f36a8cb6a0fc2bd (21/21)
Ref 'refs/heads/master' was rewritten
----

//////////////////////////
The `--tree-filter` option runs the specified command after each checkout of the project and then recommits the results.
In this case, you remove a file called `passwords.txt` from every snapshot, whether it exists or not.
If you want to remove all accidentally committed editor backup files, you can run something like `git filter-branch --tree-filter 'rm -f *~' HEAD`.
//////////////////////////
`--tree-filter` 옵션은 프로젝트를 Checkout 한 후에 각 커밋에 명시한 명령을 실행시키고 그 결과를 다시 커밋한다.
이 경우에는 각 스냅샷에 `passwords.txt` 파일이 있으면 그 파일을 삭제한다.
실수로 편집기의 백업파일을 커밋했으면 `git filter-branch --tree-filter 'rm -f *~' HEAD` 라고 실행해서 삭제할 수 있다.

//////////////////////////
You’ll be able to watch Git rewriting trees and commits and then move the branch pointer at the end.
It’s generally a good idea to do this in a testing branch and then hard-reset your master branch after you’ve determined the outcome is what you really want.
To run `filter-branch` on all your branches, you can pass `--all` to the command.
//////////////////////////
이 명령은 모든 파일과 커밋을 정리하고 브랜치 포인터를 다시 복원해준다.
이런 작업은 테스팅 브랜치에서 실험하고 나서 master 브랜치에 적용하는 게 좋다.
`filter-branch` 명령에 `--all` 옵션을 추가하면 모든 브랜치에 적용할 수 있다.

//////////////////////////
===== Making a Subdirectory the New Root
//////////////////////////
===== 하위 디렉토리를 루트 디렉토리로 만들기

//////////////////////////
Suppose you’ve done an import from another source control system and have subdirectories that make no sense (`trunk`, `tags`, and so on).
If you want to make the `trunk` subdirectory be the new project root for every commit, `filter-branch` can help you do that, too:
//////////////////////////
다른 VCS에서 코드를 임포트하면 그 VCS만을 위한 디렉토리가 있을 수 있다. SVN에서 코드를 임포트하면 `trunk`, `tags`, `branch` 디렉토리가 포함된다.
모든 커밋에 대해 `trunk` 디렉토리를 프로젝트 루트 디렉토리로 만들 때도 `filter-branch` 명령이 유용하다.

[source,console]
----
$ git filter-branch --subdirectory-filter trunk HEAD
Rewrite 856f0bf61e41a27326cdae8f09fe708d679f596f (12/12)
Ref 'refs/heads/master' was rewritten
----

//////////////////////////
Now your new project root is what was in the `trunk` subdirectory each time.
Git will also automatically remove commits that did not affect the subdirectory.
//////////////////////////
이제 `trunk` 디렉토리를 루트 디렉토리로 만들었다.
Git은 입력한 디렉토리와 관련이 없는 커밋을 자동으로 삭제한다.

//////////////////////////
===== Changing Email Addresses Globally
//////////////////////////
===== 모든 커밋의 이메일 주소를 수정하기

//////////////////////////
Another common case is that you forgot to run `git config` to set your name and email address before you started working, or perhaps you want to open-source a project at work and change all your work email addresses to your personal address.
In any case, you can change email addresses in multiple commits in a batch with `filter-branch` as well.
You need to be careful to change only the email addresses that are yours, so you use `--commit-filter`:
//////////////////////////
프로젝트를 오픈소스로 공개할 때 아마도 회사 이메일 주소로 커밋된 것을 개인 이메일 주소로 변경해야 한다. 아니면 아예 `git config` 로 이름과 이메일 주소를 설정하는 것을 잊었을 수도 있다.
자신의 이메일 주소만 변경하도록 조심해야 한다.
`filter-branch` 명령의 `--commit-filter` 옵션을 사용하여 해당 커밋만 골라서 이메일 주소를 수정할 수 있다.

[source,console]
----
$ git filter-branch --commit-filter '
        if [ "$GIT_AUTHOR_EMAIL" = "schacon@localhost" ];
        then
                GIT_AUTHOR_NAME="Scott Chacon";
                GIT_AUTHOR_EMAIL="schacon@example.com";
                git commit-tree "$@";
        else
                git commit-tree "$@";
        fi' HEAD
----

//////////////////////////
This goes through and rewrites every commit to have your new address.
Because commits contain the SHA-1 values of their parents, this command changes every commit SHA-1 in your history, not just those that have the matching email address.
//////////////////////////
이메일 주소를 새 주소로 변경했다.
모든 커밋은 부모의 SHA-1 값을 가지고 있기 때문에 조건에 만족하는 커밋의 SHA-1값만 바뀌는 것이 아니라 모든 커밋의 SHA-1 값이 바뀐다.
