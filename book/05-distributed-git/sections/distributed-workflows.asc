//////////////////////////
=== Distributed Workflows
//////////////////////////
=== 분산 환경에서의 Workflow

(((workflows)))
//////////////////////////
Unlike Centralized Version Control Systems (CVCSs), the distributed nature of Git allows you to be far more flexible in how developers collaborate on projects.
In centralized systems, every developer is a node working more or less equally on a central hub.
In Git, however, every developer is potentially both a node and a hub – that is, every developer can both contribute code to other repositories and maintain a public repository on which others can base their work and which they can contribute to.
This opens a vast range of workflow possibilities for your project and/or your team, so we'll cover a few common paradigms that take advantage of this flexibility.
We'll go over the strengths and possible weaknesses of each design; you can choose a single one to use, or you can mix and match features from each.
//////////////////////////
중앙집중형 버전 관리 시스템과는 달리 Git은 분산형이다. Git은 구조가 매우 유연하기 때문에 여러 개발자가 함께 작업하는 방식을 더 다양하게 구성할 수 있다.
중앙집중형 버전 관리 시스템에서 각 개발자는 중앙 저장소를 중심으로 하는 하나의 노드일 뿐이다. 하지만, Git에서는 각 개발자의 저장소가 하나의 노드이기도 하고 중앙 저장소 같은 역할도 할 수 있다.
즉, 모든 개발자는 다른 개발자의 저장소에 일한 내용을 전송하거나, 다른 개발자들이 참여할 수 있도록 자신이 운영하는 저장소 위치를 공개할 수도 있다.
이런 특징은 프로젝트나 팀이 코드를 운영할 때 다양한 Workflow을 만들 수 있도록 해준다.
이런 유연성을 살려 저장소를 운영하는 몇 가지 방식을 소개한다. 각 방식의 장단점을 살펴보고 그 방식 중 하나를 고르거나 여러 가지를 적절히 섞어 쓰면 된다.

//////////////////////////
==== Centralized Workflow
//////////////////////////
==== 중앙집중식 Workflow

(((workflows, centralized)))
//////////////////////////
In centralized systems, there is generally a single collaboration model–the centralized workflow.
One central hub, or repository, can accept code, and everyone synchronizes their work to it.
A number of developers are nodes – consumers of that hub – and synchronize to that one place.
//////////////////////////
중앙집중식 시스템에서는 보통 중앙집중식 협업 모델이라는 한 가지 방식밖에 없다.
중앙 저장소는 딱 하나 있고 변경 사항은 모두 이 중앙 저장소에 집중된다.
개발자는 이 중앙 저장소를 중심으로 작업한다

//////////////////////////
.Centralized workflow.
image::images/centralized_workflow.png[Centralized workflow.]
//////////////////////////
.중앙집중식 Workflow.
image::images/centralized_workflow.png[중앙집중식 Workflow.]

//////////////////////////
This means that if two developers clone from the hub and both make changes, the first developer to push their changes back up can do so with no problems.
The second developer must merge in the first one's work before pushing changes up, so as not to overwrite the first developer's changes.
This concept is as true in Git as it is in Subversion(((Subversion))) (or any CVCS), and this model works perfectly well in Git.
//////////////////////////
중앙집중식에서 개발자 두 명이 중앙저장소를 Clone하고 각자 수정하는 상황을 생각해보자. 한 개발자가 자신이 한 일을 커밋하고 나서 아무 문제 없이 서버에 Push한다.
그러면 다른 개발자는 자신의 일을 커밋하고 Push하기 전에 첫 번째 개발자가 한 일을 먼저 Merge해야 한다. Merge를 해야 첫 번째 개발자가 작업한 내용을 덮어쓰지 않는다.
이런 개념은 Subversion과 같은 중앙집중식 버전 관리 시스템에서 사용하는 방식이고 Git에서도 당연히 이런 Workflow를 사용할 수 있다.

//////////////////////////
If you are already comfortable with a centralized workflow in your company or team, you can easily continue using that workflow with Git.
Simply set up a single repository, and give everyone on your team push access; Git won't let users overwrite each other.
Say John and Jessica both start working at the same time.
John finishes his change and pushes it to the server.
Then Jessica tries to push her changes, but the server rejects them.
She is told that she's trying to push non-fast-forward changes and that she won't be able to do so until she fetches and merges.
This workflow is attractive to a lot of people because it's a paradigm that many are familiar and comfortable with.
//////////////////////////
팀이 작거나 이미 중앙집중식에 적응한 상황이라면 이 Workflow에 따라 Git을 도입하여 사용할 수 있다.
중앙 저장소를 하나 만들고 개발자 모두에게 Push 권한을 부여한다.
모두에게 Push 권한을 부여해도 Git은 한 개발자가 다른 개발자의 작업 내용을 덮어쓰도록 허용하지 않는다.
John과 Jessica가 동시에 같은 부분을 수정하는 상황을 생각해보자.
John이 먼저 작업을 끝내고 수정한 내용을 서버로 Push 한다.
Jessica도 마찬가지로 작업을 끝내고 수정한 내용을 서버로 Push하려 하지만 서버가 바로 받아주지 않는다. 서버에는 John이 수정한 내용이 추가되었기 때문에 Push하기 전에 Fetch로 받아서 Merge한 후 Push할 수 있다.
이런 개념은 개발자에게 익숙해서 거부감 없이 도입할 수 있다.

//////////////////////////
This is also not limited to small teams. With Git's branching model, it's possible for hundreds of developers to successfully work on a single project through dozens of branches simultaneously.
//////////////////////////
작은 팀만 이렇게 일할 수 있는 것이 아니다. Git이 제공하는 브랜치 관리 모델을 사용하면 수백명의 개발자가 한 프로젝트 안에서 다양한 브랜치를 만들어서 함께 작업하는 것도 쉽다.

[[_integration_manager]]
//////////////////////////
==== Integration-Manager Workflow
//////////////////////////
==== Integration-Manager Workflow

(((workflows, integration manager)))
//////////////////////////
Because Git allows you to have multiple remote repositories, it's possible to have a workflow where each developer has write access to their own public repository and read access to everyone else's.
This scenario often includes a canonical repository that represents the ``official'' project.
To contribute to that project, you create your own public clone of the project and push your changes to it.
Then, you can send a request to the maintainer of the main project to pull in your changes.
The maintainer can then add your repository as a remote, test your changes locally, merge them into their branch, and push back to their repository.
The process works as follows (see <<wfdiag_b>>):
//////////////////////////
Git을 사용하면 리모트 저장소를 여러 개 운영할 수 있다. 다른 개발자는 읽기만 가능하고 자신은 쓰기도 가능한 공개 저장소를 만드는 Workflow도 된다.
이 Worlflow에는 보통 프로젝트를 대표하는 하나의 공식 저장소가 있다.
기여자는 우선 공식 저장소를 하나 Clone하고 수정하고 나서 자신의 저장소에 Push한다.
그 다음에 프로젝트 Integration-Manager에게 새 저장소에서 Pull하라고 요청한다.
그러면 그 Integration-Manager는 기여자의 저장소를 리모트 저장소로 등록하고, 로컬에서 기여물을 테스트하고, 프로젝트 메인 브랜치에 Merge하고, 그 내용을 다시 프로젝트 메인 저장소에 Push한다.
이런 과정은 아래와 같다(<<wfdiag_b>>).

//////////////////////////
1.  The project maintainer pushes to their public repository.
2.  A contributor clones that repository and makes changes.
3.  The contributor pushes to their own public copy.
4.  The contributor sends the maintainer an e-mail asking them to pull changes.
5.  The maintainer adds the contributor's repo as a remote and merges locally.
6.  The maintainer pushes merged changes to the main repository.
//////////////////////////
1. 프로젝트 Integration-Manager는 프로젝트 메인 저장소에 Push를 한다.
2. 프로젝트 기여자는 메인 저장소를 Clone하고 수정한다.
3. 기여자는 자신의 저장소에 Push하고 Integration-Manager가 접근할 수 있도록 공개해 놓는다.
4. 기여자는 Integration-Manager에게 변경사항을 적용해 줄 것을 E-mail 같은 것으로 요청한다.
5. Integration-Manager는 기여자의 저장소를 리모트 저장소로 등록하고 수정사항을 Merge하여 테스트한다.
6. Integration-Manager는 Merge한 사항을 메인 저장소에 Push한다.

[[wfdiag_b]]
//////////////////////////
.Integration-manager workflow.
image::images/integration-manager.png[Integration-manager workflow.]
//////////////////////////
.Integration-manager workflow.
image::images/integration-manager.png[Integration-manager workflow.]

(((forking)))
//////////////////////////
This is a very common workflow with hub-based tools like GitHub or GitLab, where it's easy to fork a project and push your changes into your fork for everyone to see.
One of the main advantages of this approach is that you can continue to work, and the maintainer of the main repository can pull in your changes at any time.
Contributors don't have to wait for the project to incorporate their changes – each party can work at their own pace.
//////////////////////////
이 방식은 GitHub나 GitLab 같은 Hub 사이트를 통해 주로 사용하는 방식이다. 프로젝트를 Fork하고 수정사항을 반영하여 다시 모두에게 공개하기 좋은 구조로 돼 있다.
이 방식의 장점은 기여자와 Integration-Manager가 각자의 사정에 맞춰 프로젝트를 유지할 수 있다는 점이다. 기여자는 자신의 저장소와 브랜치에서 수정 작업을 계속해 나갈 수 있고 수정사항이 프로젝트에 반영되도록 기다릴 필요가 없다.
관리자는 여유를 가지고 기여자가 Push해 놓은 커밋을 적절한 시점에 Merge한다.

//////////////////////////
==== Dictator and Lieutenants Workflow
//////////////////////////
==== Dictator and Lieutenants Workflow

(((workflows, dictator and lieutenants)))
//////////////////////////
This is a variant of a multiple-repository workflow.
It's generally used by huge projects with hundreds of collaborators; one famous example is the Linux kernel.
Various integration managers are in charge of certain parts of the repository; they're called lieutenants.
All the lieutenants have one integration manager known as the benevolent dictator.
The benevolent dictator's repository serves as the reference repository from which all the collaborators need to pull.
The process works like this (see <<wfdiag_c>>):
//////////////////////////
이 방식은 저장소를 여러개 운영하는 방식을 변형한 구조이다.
보통 수백 명의 개발자가 참여하는 아주 큰 프로젝트를 운영할 때 이 방식을 사용한다. 리눅스 커널 프로젝트가 대표적이다.
여러 명의 Integration-Manager가 저장소에서 자신이 맡은 부분만을 담당하는데 이들을 Lieutenants라고 부른다.
모든 Lieutenant는 최종 관리자 아래에 있으며 이 최종 관리자를 Dictator라고 부른다.
최종 관리자가 관리하는 저장소를 공식 저장소로 하며 모든 프로젝트 참여자는 이 공식 저장소를 기준으로 작업한다.
이러한 Workflow는 다음과 같다(<<wfdiag_c>>).

//////////////////////////
1.  Regular developers work on their topic branch and rebase their work on top of `master`.
    The `master` branch is that of the dictator.
2.  Lieutenants merge the developers' topic branches into their `master` branch.
3.  The dictator merges the lieutenants' `master` branches into the dictator's `master` branch.
4.  The dictator pushes their `master` to the reference repository so the other developers can rebase on it.
//////////////////////////
1.  개발자는 코드를 수정하고 master 브랜치를 기준으로 자신의 토픽 브랜치를 Rebase한다.
    여기서 master 브랜치란 Dictator의 브랜치를 말한다.
2.  Lieutenant들은 개발자들의 수정사항을 자신이 관리하는 master 브랜치에 Merge한다.
3.  Dictator는 Lieutenant의 master 브랜치를 자신의 master 브랜치로 Merge한다.
4.  Dictator는 Merge한 자신의 master 브랜치를 Push하며 다른 모든 개발자는 Dictator의 master 브랜치를 기준으로 Rebase한다.

[[wfdiag_c]]
//////////////////////////
.Benevolent dictator workflow.
image::images/benevolent-dictator.png[Benevolent dictator workflow.]
//////////////////////////
.Benevolent dictator workflow.
image::images/benevolent-dictator.png[Benevolent dictator workflow.]

//////////////////////////
This kind of workflow isn't common, but can be useful in very big projects, or in highly hierarchical environments.
It allows the project leader (the dictator) to delegate much of the work and collect large subsets of code at multiple points before integrating them.
//////////////////////////
이 방식이 일반적이지 않지만 깊은 계층 구조를 가지는 환경이나 규모가 큰 프로젝트에서는 매우 쓸모 있다.
프로젝트 리더가 모든 코드를 통합하기 전에 코드를 부분부분 통합하도록 여러 명의 Lieutenant에게 위임한다.

//////////////////////////
==== Workflows Summary
//////////////////////////
==== Workflow 요약

//////////////////////////
These are some commonly used workflows that are possible with a distributed system like Git, but you can see that many variations are possible to suit your particular real-world workflow.
Now that you can (hopefully) determine which workflow combination may work for you, we'll cover some more specific examples of how to accomplish the main roles that make up the different flows.
In the next section, you'll learn about a few common patterns for contributing to a project.
//////////////////////////
이 세 가지 Workflow가 Git 같은 분산 버전 관리 시스템에서 주로 사용하는 것들이다. 사실 이런 Workflow뿐만 아니라 다양한 변종 Workflow가 실제로 사용된다.
어떤 방식을 선택하고 혹은 조합해야 하는 지 살짝 감이 잡힐 것이다. 앞으로 몇 가지 구체적 사례를 들고 우리가 다양한 환경에서 각 역할을 어떻게 수행하는지 살펴본다.
이어지는 내용에서 프로젝트에 참여하고 기여할 때 작업 패턴이 어떠한지 몇 가지 살펴보기로 한다.
