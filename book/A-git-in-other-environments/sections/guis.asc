//////////////////////////
=== Graphical Interfaces
//////////////////////////
=== GUI

(((GUIs)))(((Graphical tools)))
//////////////////////////
Git's native environment is in the terminal.
New features show up there first, and only at the command line is the full power of Git completely at your disposal.
But plain text isn't the best choice for all tasks; sometimes a visual representation is what you need, and some users are much more comfortable with a point-and-click interface.
//////////////////////////
Git의 본진은 터미널이다.
새로운 기능은 먼저 터미널에 추가될뿐더러 애초에 Git의 모든 기능은 CLI로만 사용할 수 있다.
하지만 텍스트 세상이 늘 좋은 것도 아니고 시각적 표현이 필요할 때도 있다. 가리키고 클릭하는 것을 편하게 느끼는 사용자도 있다.

//////////////////////////
It's important to note that different interfaces are tailored for different workflows.
Some clients expose only a carefully curated subset of Git functionality, in order to support a specific way of working that the author considers effective.
When viewed in this light, none of these tools can be called "`better`" than any of the others, they're simply more fit for their intended purpose.Also note that there's nothing these graphical clients can do that the command-line client can't; the command-line is still where you'll have the most power and control when working with your repositories.
//////////////////////////
무슨 인터페이스를 사용하느냐는 중요하지 않지만, 인터페이스에 따라 워크플로도 달라져야 한다.
Git의 기능을 엄선해서 제공하는 클라이언트 프로그램이 있는데 이런 도구에서는 지원하는 방법으로만 Git을 사용해야 한다.
이런 맥락으로 각 도구를 서로 비교하고 줄 세울 수 없다. 도구마다 고유의 목적이 있다.
하지만 CLI로는 뭐든 다 할 수 있다. GUI 클라이언트로 할 수 있는 일 중 CLI로 못 하는 일은 없다.

//////////////////////////
==== `gitk` and `git-gui`
//////////////////////////
==== `gitk` 과 `git-gui`

(((git commands, gitk)))(((git commands, gui)))(((gitk)))
//////////////////////////
When you install Git, you also get its visual tools, `gitk` and `git-gui`.
//////////////////////////
Git을 설치하면 `gitk` 와 `git-gui` 도 같이 설치된다.

//////////////////////////
`gitk` is a graphical history viewer.
Think of it like a powerful GUI shell over `git log` and `git grep`.
This is the tool to use when you're trying to find something that happened in the past, or visualize your project's history.
//////////////////////////
`gitk` 는 히스토리를 그래프로 보여준다.
`git log` 와 `git grep` 을 합쳐놓은 GUI 도구라고 생각하면 된다.
프로젝트 히스토리를 시각화해서 무슨 일이 있었는지 살펴볼 때 이 도구를 사용한다.

//////////////////////////
Gitk is easiest to invoke from the command-line.
Just `cd` into a Git repository, and type:
//////////////////////////
Gitk를 실행하는 방법은 쉽다.
`cd` 명령으로 Git 저장소 디렉토리로 이동해서 실행한다.

[source,console]
----
$ gitk [git log options]
----

//////////////////////////
Gitk accepts many command-line options, most of which are passed through to the underlying `git log` action.
Probably one of the most useful is the `--all` flag, which tells gitk to show commits reachable from _any_ ref, not just HEAD.
Gitk's interface looks like this:
//////////////////////////
Gitk를 실행할 때 옵션을 주고 실행할 수 있는데 대부분 `git log` 의 것과 같다.
유용한 옵션으로 `--all` 이 있는데 HEAD의 히스토리가 아니라 저장소의 모든 커밋을 보여달라고 하는 옵션이다.
Gitk는 아래와 같이 생겼다.

//////////////////////////
.The `gitk` history viewer
image::images/gitk.png[The `gitk` history viewer]
//////////////////////////
.`gitk` 히스토리 뷰어.
image::images/gitk.png[`gitk` 히스토리 뷰어.]

//////////////////////////
On the top is something that looks a bit like the output of `git log --graph`; each dot represents a commit, the lines represent parent relationships, and refs are shown as colored boxes.
The yellow dot represents HEAD, and the red dot represents changes that are yet to become a commit.
At the bottom is a view of the selected commit; the comments and patch on the left, and a summary view on the right.
In between is a collection of controls used for searching history.
//////////////////////////
위에 있는 히스토리는 `git log --graph` 의 출력과 비슷하게 생겼다. 점은 커밋을 선은 부자관계를 나타내고 색칠된 박스가 Ref다.
노란색 점은 HEAD를 빨간 점은 아직 커밋하지 변경 내역이다.
커밋을 하나 선택하면 왼쪽에 코멘트와 패치를 보여주고 오른쪽에 요약정보를 보여준다.
그리고 중간에는 히스토리를 검색하는 입력 폼이 있다.

//////////////////////////
`git-gui`, on the other hand, is primarily a tool for crafting commits.
It, too, is easiest to invoke from the command line:
//////////////////////////
`git-gui` 는 꼼꼼하게 커밋하는데 사용하는 커밋 도구다.
정말 쉽게 실행할 수 있다.

[source,console]
----
$ git gui
----

//////////////////////////
And it looks something like this:
//////////////////////////
이 프로그램은 아래처럼 실행된다.

//////////////////////////
.The `git-gui` commit tool
image::images/git-gui.png[The `git-gui` commit tool]
//////////////////////////
.커밋 도구인 `git-gui`.
image::images/git-gui.png[커밋 도구인 `git-gui`.]

//////////////////////////
On the left is the index; unstaged changes are on top, staged changes on the bottom.
You can move entire files between the two states by clicking on their icons, or you can select a file for viewing by clicking on its name.
//////////////////////////
왼쪽에는 Index가 있다. 그 위에는 Unstaged 상태의 파일들이 있고 아래에는 Staged 상태의 파일이 있다.
아이콘을 클릭하면 모든 파일을 반대 상태로 옮길 수 있다. 반면 파일 이름을 선택하면 해당 파일 내용을 보여준다.

//////////////////////////
At top right is the diff view, which shows the changes for the currently-selected file.
You can stage individual hunks (or individual lines) by right-clicking in this area.
//////////////////////////
오른쪽 상단에는 선택한 파일의 변경 내용이 Diff로 보여준다.
Diff에서 오른쪽 버튼을 클릭하면 해당 라인이나 해당 Hunk를 하나씩 Stage 할 수 있다.

//////////////////////////
At the bottom right is the message and action area.
Type your message into the text box and click "`Commit`" to do something similar to `git commit`.
You can also choose to amend the last commit by choosing the "`Amend`" radio button, which will update the "`Staged Changes`" area with the contents of the last commit.
Then you can simply stage or unstage some changes, alter the commit message, and click "`Commit`" again to replace the old commit with a new one.
//////////////////////////
오른쪽 하단에는 커밋 메시지와 버튼들이 있다.
텍스트 박스에 메시지를 입력하고 "`Commit`" 버튼을 클릭하면 `git commit` 을 실행한 것과 같다.
"`Amend`" 라디오 버튼을 선택하면 최근 커밋도 수정할 수 있다. "`Staged Changes`" 영역에는 마지막 커밋 내용이 표시된다.
빠트린 것을 Stage 하거나 잘못 커밋한 것을 Unstage 하고 커밋 메시지를 수정하고 나서 다시 "`Commit`" 버튼을 클릭하면 새 커밋으로 변경된다.
>>>>>>> master

//////////////////////////
`gitk` and `git-gui` are examples of task-oriented tools.
Each of them is tailored for a specific purpose (viewing history and creating commits, respectively), and omit the features not necessary for that task.
//////////////////////////
`gitk` 와 `git-gui` 는 특정 일에 맞춰진 도구다.
`gitk` 는 히스토리 조회용이고 `git-gui` 는 커밋용 도구다. 이 도구로 다른 일은 할 수 없다.

//////////////////////////
==== GitHub for macOS and Windows
//////////////////////////
==== macOS와 Windows용 GitHub 클라이언트

(((GitHub for macOS)))(((GitHub for Windows)))
//////////////////////////
GitHub has created two workflow-oriented Git clients: one for Windows, and one for macOS.
These clients are a good example of workflow-oriented tools – rather than expose _all_ of Git's functionality, they instead focus on a curated set of commonly-used features that work well together.
They look like this:
//////////////////////////
GitHub은 'GitHub for macOS'과 'GitHub for Windows'라는 Git 클라이언트를 만들었다.
이 클라이언트는 Git의 모든 기능을 지원하지 않는다. 사람들이 많이 사용하는 워크플로를 따르도록 만들었다.
어떻게 생겼는지 한번 보자.

.GitHub for macOS
image::images/github_mac.png[GitHub for macOS]

.GitHub for Windows
image::images/github_win.png[GitHub for Windows]

//////////////////////////
They are designed to look and work very much alike, so we'll treat them like a single product in this chapter.
We won't be doing a detailed rundown of these tools (they have their own documentation), but a quick tour of the "`changes`" view (which is where you'll spend most of your time) is in order.
>>>>>>> master
//////////////////////////
이 두 프로그램은 거의 똑같이 생겼다. 그래서 이 둘을 한 프로그램이라고 생각하고 설명한다.
우리는 이 도구에 자세하게 설명하지 않는다. 자세한 것은 설명서를 참고하길 바란다. 아마도 "`changes`" 뷰를 중심으로 사용하게 될 것이라서 "`changes`" 뷰를 잘 소개하려고 한다.

//////////////////////////
* On the left is the list of repositories the client is tracking; you can add a repository (either by cloning or attaching locally) by clicking the "`+`" icon at the top of this area.
* In the center is a commit-input area, which lets you input a commit message, and select which files should be included.
  (On Windows, the commit history is displayed directly below this; on macOS, it's on a separate tab.)
* On the right is a diff view, which shows what's changed in your working directory, or which changes were included in the selected commit.
* The last thing to notice is the "`Sync`" button at the top-right, which is the primary way you interact over the network.
//////////////////////////
* 왼쪽에 있는 것은 이 클라이언트가 추적하고 있는 저장소의 목록이다. 아래에 있는 "`+`" 아이콘을 클릭하면 이미 로컬에 있는 저장소를 추가하거나 새로 Clone 할 수 있다.
* 중앙에는 커밋을 위한 컨트롤이 있다. 메시지를 입력하고 파일을 골라서 커밋할 수 있다. Windows 버전에서는 바로 아래 커밋 히스토리가 보여지지만 macOS 버전에서는 별도 탭에 보여진다.
* 오른쪽은 워킹 디렉토리 변경된 부분을 보여주는 Diff 뷰다. 커밋을 하나 선택하면 해당 커밋의 내용만 보여준다.
* 오른쪽 위에 있는 "`Sync`" 버튼을 누르면 외부 저장소와 동기화한다.

[NOTE]
//////////////////////////
====
You don't need a GitHub account to use these tools.
While they're designed to highlight GitHub's service and recommended workflow, they will happily work with any repository, and do network operations with any Git host.
====
//////////////////////////
====
GitHub 계정이 없어도 이 툴을 사용할 수 있다.
GitHub 서비스와 GitHub이 제안하는 워크플로에 초점을 맞춘 툴이지만 다른 호스트나 저장소에도 사용할 수 있다.
====

//////////////////////////
===== Installation
//////////////////////////
===== 설치

//////////////////////////
GitHub for Windows can be downloaded from https://windows.github.com[], and GitHub for macOS from https://mac.github.com[].
When the applications are first run, they walk you through all the first-time Git setup, such as configuring your name and email address, and both set up sane defaults for many common configuration options, such as credential caches and CRLF behavior.
//////////////////////////
'GitHub for Windows'와 'GitHub for macOS'은 각각 https://windows.github.com[]와 from https://mac.github.com[]에서 내려받을 수 있다.
프로그램이 처음 실행되면 이름과 이메일 주소같은 설정을 하도록 안내하고 'Credential Cache'나 CRLF 같은 설정도 사람들이 많이 사용하는 값으로 똘똘하게 처리한다.

//////////////////////////
Both are "`evergreen`" – updates are downloaded and installed in the background while the applications are open.
This helpfully includes a bundled version of Git, which means you probably won't have to worry about manually updating it again.
On Windows, the client includes a shortcut to launch PowerShell with Posh-git, which we'll talk more about later in this chapter.
//////////////////////////
업데이트는 백그라운드로 다운로드하고 설치되기에 프로그램은 늘 최신버전으로 유지된다.
번들로 포함된 Git도 업데이트하기 때문에 Git 프로그램의 업데이트는 고민할 필요가 없다.
'GitHub for Windows'는 Posh-git이 적용된 PowerShell을 실행하는 단축아이콘도 만들어 준다. 이 부분은 뒤에 설명한다.

//////////////////////////
The next step is to give the tool some repositories to work with.
The client shows you a list of the repositories you have access to on GitHub, and can clone them in one step.
If you already have a local repository, just drag its directory from the Finder or Windows Explorer into the GitHub client window, and it will be included in the list of repositories on the left.
//////////////////////////
저장소를 추가해보자.
이 클라이언트는 GitHub에서 접근 가능한 저장소들의 목록을 보여주고 한번에 Clone 할 수 있도록 안내한다.
이미 로컬 저장소가 있으면 간단히 'macOS Finder'나 'Windows Explorer'에서 끌어다(Drag) 놓으면 왼쪽 저장소 목록에 추가된다.

//////////////////////////
===== Recommended Workflow
//////////////////////////
===== 권장 워크플로

//////////////////////////
Once it's installed and configured, you can use the GitHub client for many common Git tasks.
The intended workflow for this tool is sometimes called the "`GitHub Flow.`"
We cover this in more detail in <<ch06-github#ch06-github_flow>>, but the general gist is that (a) you'll be committing to a branch, and (b) you'll be syncing up with a remote repository fairly regularly.
//////////////////////////
설치하고 설정을 마쳤으면 평소 Git을 사용하듯이 GitHub 클라이언트를 사용할 수 있다.
이 툴은 <<ch06-github#ch06-github_flow>>에서 설명한 "`GitHub Flow.`" 를 지원하도록 설계했다.
하지만 하는 일을 매우 단순하게 나눠보면 브랜치에 커밋하거나 리모트 저장소와 동기화 시키는 일로 나눠 볼 수 있다.

//////////////////////////
Branch management is one of the areas where the two tools diverge.
On macOS, there's a button at the top of the window for creating a new branch:
//////////////////////////
브랜치 관리는 두 버전이 조금 다르다.
'GitHub for macOS'에서는 창의 위쪽에 있는 버튼으로 브랜치를 만들 수 있다.

//////////////////////////
."`Create Branch`" button on macOS
image::images/branch_widget_mac.png[“Create Branch” button on macOS]
//////////////////////////
.macOS의 "`Create Branch`" 버튼
image::images/branch_widget_mac.png[macOS의 “Create Branch“ 버튼.]

//////////////////////////
On Windows, this is done by typing the new branch's name in the branch-switching widget:
//////////////////////////
'GitHub for Windows'에서는 브랜치를 바꾸는 위젯에서 브랜치 이름을 새로 입력하면 된다.

//////////////////////////
.Creating a branch on Windows
image::images/branch_widget_win.png[Creating a branch on Windows]
//////////////////////////
.Windows에서 브랜치 만들기.
image::images/branch_widget_win.png[Windows에서 브랜치 만들기.]

//////////////////////////
Once your branch is created, making new commits is fairly straightforward.
Make some changes in your working directory, and when you switch to the GitHub client window, it will show you which files changed.
Enter a commit message, select the files you'd like to include, and click the "`Commit`" button (ctrl-enter or ⌘-enter).
//////////////////////////
브랜치를 만들면 즉시 커밋할 수 있다.
워킹 디렉토리에서 작업을 하고 GitHub 클라이언트로 창을 바꾸면 무엇을 수정했는지 보여준다.
커밋 메시지를 입력하고 파일을 선택하고 나서 "`Commit`" 버튼을 클릭하면('ctrl-enter' 또는 '⌘-enter') 커밋된다.
>>>>>>> master

//////////////////////////
The main way you interact with other repositories over the network is through the "`Sync`" feature.
Git internally has separate operations for pushing, fetching, merging, and rebasing, but the GitHub clients collapse all of these into one multi-step feature.
Here's what happens when you click the Sync button:
//////////////////////////
GitHub 클라이언트에서는 "`Sync`" 기능이 외부 저장소와 통신하는 방법이다.
Git은 Push, Fetch, Merge, Rebase 각각 다른 기능이지만 GitHub 클라이언트는 "`Sync`" 에 전부 녹여 넣었다.
>>>>>>> master

//////////////////////////
. `git pull --rebase`.
  If this fails because of a merge conflict, fall back to `git pull --no-rebase`.
. `git push`.
//////////////////////////
. `git pull --rebase`.
  충돌이 생기는 경우에는 `git pull --no-rebase` 이 실행된다.
. `git push`.

//////////////////////////
This is the most common sequence of network commands when working in this style, so squashing them into one command saves a lot of time.
//////////////////////////
저장소를 동기화할 때는 이 순서대로 명령어를 실행하는 것이 일반적이다. GitHub 클라이언트에서는 한 명령으로 전부 실행해서 시간을 절약할 수 있다.

//////////////////////////
===== Summary
//////////////////////////
===== 요약

//////////////////////////
These tools are very well-suited for the workflow they're designed for.
Developers and non-developers alike can be collaborating on a project within minutes, and many of the best practices for this kind of workflow are baked into the tools.
However, if your workflow is different, or you want more control over how and when network operations are done, we recommend you use another client or the command line.
//////////////////////////
이 툴은 툴이 원하는 특정 워크플로에 적합하도록 설계했다.
개발자든 비개발자든 조금만 배우면 바로 프로젝트에 참여할 수 있다. 이 워크플로와 비슷하게 일하고 있다면 이 툴을 사용하는 것이 가장 최선이다.

//////////////////////////
==== Other GUIs
//////////////////////////
==== 다른 GUI 도구들

//////////////////////////
There are a number of other graphical Git clients, and they run the gamut from specialized, single-purpose tools all the way to apps that try to expose everything Git can do.
The official Git website has a curated list of the most popular clients at https://git-scm.com/downloads/guis[].
A more comprehensive list is available on the Git wiki site, at https://git.wiki.kernel.org/index.php/Interfaces,_frontends,_and_tools#Graphical_Interfaces[].
//////////////////////////
Git GUI 클라이언트에는 종류가 많다. 범용으로 만들어진 것도 있고 아닌 것도 있다.
Git 공식 웹사이트인 https://git-scm.com/downloads/guis[] 에는 많이 사용하는 클라이언트를 소개한다.
Git 위키 사이트에는(https://git.wiki.kernel.org/index.php/Interfaces,_frontends,_and_tools#Graphical_Interfaces[]) 더 많은 클라이언트가 정리돼 있다.
