[[_remote_branches]]
//////////////////////////
=== Remote Branches
//////////////////////////
=== 리모트 브랜치

(((branches, remote)))(((references, remote)))
//////////////////////////
Remote branches are references (pointers) to the state of branches in your remote repositories.
They're local branches that you can't move; they're moved automatically for you whenever you do any network communication.
Remote branches act as bookmarks to remind you where the branches on your remote repositories were the last time you connected to them.
//////////////////////////
리모트 브랜치란 리모트 저장소에 있는 브랜치를 말한다.
사실 리모트 브랜치도 로컬에 있지만 멋대로 옮기거나 할 수 없고 리모트 저장소와 통신하면 자동으로 업데이트된다.
리모트 브랜치는 브랜치 상태를 알려주는 책갈피라고 볼 수 있다. 이 책갈피로 리모트 저장소에서 마지막으로 데이터를 가져온 시점의 상태를 알 수 있다.

//////////////////////////
They take the form `(remote)/(branch)`.
For instance, if you wanted to see what the `master` branch on your `origin` remote looked like as of the last time you communicated with it, you would check the `origin/master` branch.
If you were working on an issue with a partner and they pushed up an `iss53` branch, you might have your own local `iss53` branch; but the branch on the server would point to the commit at `origin/iss53`.
//////////////////////////
리모트 브랜치의 이름은 `(remote)/(branch)` 형식으로 되어 있다.
예를 들어 리모트 저장소 `origin`의 `master` 브랜치를 보고 싶다면 `origin/master`라는 이름으로 브랜치를 확인하면 된다.
다른 팀원과 함께 어떤 이슈를 구현할 때 그 팀원이 `iss53` 브랜치를 서버로 Push했고 당신도 로컬에 `iss53` 브랜치가 있다고 가정하자. 이때 서버의 `iss53` 브랜치가 가리키는 커밋은 로컬에서 `origin/iss53`이 가리키는 커밋이다.

//////////////////////////
This may be a bit confusing, so let's look at an example.
Let's say you have a Git server on your network at `git.ourcompany.com`.
If you clone from this, Git's `clone` command automatically names it `origin` for you, pulls down all its data, creates a pointer to where its `master` branch is, and names it `origin/master` locally.
Git also gives you your own local `master` branch starting at the same place as origin's `master` branch, so you have something to work from.
//////////////////////////
다소 헷갈릴 수 있으니 예제를 좀 더 살펴보자.
`git.ourcompany.com`이라는 Git 서버가 있고 이 서버의 저장소를 하나 Clone하면 Git은 자동으로 `origin`이라는 이름을 붙인다.
`origin`으로부터 저장소 데이터를 모두 내려받고 `master` 브랜치를 가리키는 포인터를 만든다. 이 포인터는 `origin/master`라고 부르고 멋대로 조종할 수 없다.
그리고 Git은 로컬의 `master` 브랜치가 `origin/master`를 가리키게 한다. 이제 이 `master` 브랜치에서 작업을 시작할 수 있다.

[NOTE]
//////////////////////////
.``origin'' is not special
====
Just like the branch name ``master'' does not have any special meaning in Git, neither does ``origin''. While ``master'' is the default name for a starting branch when you run `git init` which is the only reason it's widely used, ``origin'' is the default name for a remote when you run `git clone`. If you run `git clone -o booyah` instead, then you will have `booyah/master` as your default remote branch.(((origin)))
====
//////////////////////////
.``origin''의 의미
====
브랜치 이름으로 많이 사용하는 ``master''라는 이름이 괜히 특별한 의미를 가지는 게 아닌 것처럼 ``origin''도 특별한 의미가 있는 것은 아니다. `git init` 명령이 자동으로 만들기 때문에 사용하는 이름인 ``master''와 마찬가지로 ``origin''도 `git clone` 명령이 자동으로 만들어주는 리모트 이름이다. `git clone -o booyah` 라고 옵션을 주고 명령을 실행하면 `booyah/master` 라고 사용자가 정한 대로 리모트 이름을 생성해준다.(((origin)))
====

//////////////////////////
.Server and local repositories after cloning
image::images/remote-branches-1.png[Server and local repositories after cloning.]
//////////////////////////
.Clone 이후 서버와 로컬의 master 브랜치
image::images/remote-branches-1.png[Clone 이후 서버와 로컬의 master 브랜치]

//////////////////////////
If you do some work on your local master branch, and, in the meantime, someone else pushes to `git.ourcompany.com` and updates its `master` branch, then your histories move forward differently.
Also, as long as you stay out of contact with your origin server, your `origin/master` pointer doesn't move.
//////////////////////////
로컬 저장소에서 어떤 작업을 하고 있는데 동시에 다른 팀원이 `git.ourcompany.com` 서버에 Push하고 master 브랜치를 업데이트한다. 그러면 이제 팀원 간의 히스토리는 서로 달라진다.
서버 저장소로부터 어떤 데이터도 주고받지 않아서 `origin/master` 포인터는 그대로다.

//////////////////////////
.Local and remote work can diverge
image::images/remote-branches-2.png[Local and remote work can diverge.]
//////////////////////////
.로컬과 서버의 커밋 히스토리는 독립적임
image::images/remote-branches-2.png[로컬과 서버의 커밋 히스토리는 독립적임]

//////////////////////////
To synchronize your work, you run a `git fetch origin` command.
This command looks up which server ``origin'' is (in this case, it's `git.ourcompany.com`), fetches any data from it that you don't yet have, and updates your local database, moving your `origin/master` pointer to its new, more up-to-date position.
//////////////////////////
리모트 서버로부터 저장소 정보를 동기화하려면 `git fetch origin` 명령을 사용한다.
명령을 실행하면 우선 ``origin'' 서버의 주소 정보(이 예에서는 `git.ourcompany.com`)를 찾아서, 현재 로컬의 저장소가 갖고 있지 않은 새로운 정보가 있으면 모두 내려받고, 받은 데이터를 로컬 저장소에 업데이트하고 나서, origin/master 포인터의 위치를 최신 커밋으로 이동시킨다.

//////////////////////////
.`git fetch` updates your remote references
image::images/remote-branches-3.png[`git fetch` updates your remote references.]
//////////////////////////
.`git fetch` 명령은 리모트 브랜치 정보를 업데이트
image::images/remote-branches-3.png[`git fetch` 명령은 리모트 브랜치 정보를 업데이트]

//////////////////////////
To demonstrate having multiple remote servers and what remote branches for those remote projects look like, let's assume you have another internal Git server that is used only for development by one of your sprint teams.
This server is at `git.team1.ourcompany.com`.
You can add it as a new remote reference to the project you're currently working on by running the `git remote add` command as we covered in <<_git_basics_chapter>>.
Name this remote `teamone`, which will be your shortname for that whole URL.
//////////////////////////
리모트 저장소를 여러 개 운영하는 상황을 이해할 수 있도록 개발용으로 사용할 Git 저장소를 팀 내부에 하나 추가해 보자.
이 저장소의 주소가 `git.team1.ourcompany.com` 이며
<<_git_basics_chapter>>에서 살펴본 `git remote add` 명령으로 현재 작업 중인 프로젝트에 팀의 저장소를 추가한다.
이름을 `teamone`으로 짓고 긴 서버 주소 대신 사용한다.

//////////////////////////
.Adding another server as a remote
image::images/remote-branches-4.png[Adding another server as a remote.]
//////////////////////////
.서버를 리모트 저장소로 추가
image::images/remote-branches-4.png[서버를 리모트 저장소로 추가]

//////////////////////////
Now, you can run `git fetch teamone` to fetch everything the remote `teamone` server has that you don't have yet.
Because that server has a subset of the data your `origin` server has right now, Git fetches no data but sets a remote branch called `teamone/master` to point to the commit that `teamone` has as its `master` branch.
//////////////////////////
서버를 추가하고 나면 `git fetch teamone` 명령으로 `teamone` 서버의 데이터를 내려받는다.
명령을 실행해도 `teamone` 서버의 데이터는 모두 `origin` 서버에도 있는 것들이라서 아무것도 내려받지 않는다. 하지만, 이 명령은 `teamone/master` 브랜치가 `teamone` 서버의 `master` 브랜치가 가리키는 커밋을 가리키게 한다.

//////////////////////////
.Remote tracking branch for `teamone/master`
image::images/remote-branches-5.png[Remote tracking branch for `teamone/master`.]
//////////////////////////
.로컬 저장소에 만들어진 teamone의 master 브랜치를 가리키는 포인터
image::images/remote-branches-5.png[로컬 저장소에 만들어진 teamone의 master 브랜치를 가리키는 포인터]

[[_pushing_branches]]
//////////////////////////
==== Pushing
//////////////////////////
==== Push하기

(((pushing)))
//////////////////////////
When you want to share a branch with the world, you need to push it up to a remote that you have write access to.
Your local branches aren't automatically synchronized to the remotes you write to – you have to explicitly push the branches you want to share.
That way, you can use private branches for work you don't want to share, and push up only the topic branches you want to collaborate on.
//////////////////////////
로컬의 브랜치를 서버로 전송하려면 쓰기 권한이 있는 리모트 저장소에 Push해야 한다.
로컬 저장소의 브랜치는 자동으로 리모트 저장소로 전송되지 않는다. 명시적으로 브랜치를 Push해야 정보가 전송된다.
따라서 리모트 저장소에 전송하지 않고 로컬 브랜치에만 두는 비공개 브랜치를 만들 수 있다. 또 다른 사람과 협업하기 위해 토픽 브랜치만 전송할 수도 있다.

//////////////////////////
If you have a branch named `serverfix` that you want to work on with others, you can push it up the same way you pushed your first branch.
Run `git push (remote) (branch)`:(((git commands, push)))
//////////////////////////
`serverfix`라는 브랜치를 다른 사람과 공유할 때에도 브랜치를 처음 Push하는 것과 같은 방법으로 Push한다.
다음과 같이 `git push (remote) (branch)` 명령을 사용한다.(((git commands, push)))

[source,console]
----
$ git push origin serverfix
Counting objects: 24, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (15/15), done.
Writing objects: 100% (24/24), 1.91 KiB | 0 bytes/s, done.
Total 24 (delta 2), reused 0 (delta 0)
To https://github.com/schacon/simplegit
 * [new branch]      serverfix -> serverfix
----

//////////////////////////
This is a bit of a shortcut.
Git automatically expands the `serverfix` branchname out to `refs/heads/serverfix:refs/heads/serverfix`, which means, ``Take my serverfix local branch and push it to update the remote's serverfix branch.''
We'll go over the `refs/heads/` part in detail in <<_git_internals>>, but you can generally leave it off.
You can also do `git push origin serverfix:serverfix`, which does the same thing – it says, ``Take my serverfix and make it the remote's serverfix.''
You can use this format to push a local branch into a remote branch that is named differently.
If you didn't want it to be called `serverfix` on the remote, you could instead run `git push origin serverfix:awesomebranch` to push your local `serverfix` branch to the `awesomebranch` branch on the remote project.
//////////////////////////
Git은 serverfix라는 브랜치 이름을 `refs/heads/serverfix:refs/heads/serverfix`로 확장한다.
이것은 `serverfix`라는 로컬 브랜치를 서버로 Push하는데 리모트의 `serverfix` 브랜치로 업데이트한다는 것을 의미한다.
나중에 <<_git_internals>>에서 `refs/heads/`의 뜻을 자세히 알아볼 것이기 때문에 일단 넘어가도록 한다.
`git push origin serverfix:serverfix`라고 Push하는 것도 같은 의미인데 이것은 ``로컬의 serverfix 브랜치를 리모트 저장소의 serverfix 브랜치로 Push하라'' 라는 뜻이다.
로컬 브랜치의 이름과 리모트 서버의 브랜치 이름이 다를 때 필요하다.
리모트 저장소에 `serverfix`라는 이름 대신 다른 이름을 사용하려면 `git push origin serverfix:awesomebranch`처럼 사용한다.

[NOTE]
//////////////////////////
.Don't type your password every time
====
If you're using an HTTPS URL to push over, the Git server will ask you for your username and password for authentication. By default it will prompt you on the terminal for this information so the server can tell if you're allowed to push.

If you don't want to type it every single time you push, you can set up a ``credential cache''. The simplest is just to keep it in memory for a few mintues, which you can easily set up by running `git config --global credential.helper cache`.

For more information on the various credential caching options available, see <<_credential_caching>>.
====
//////////////////////////
.패스워드를 매번 입력하지 않아도 된다
====
HTTPS URL로 시작하는 리모트 저장소를 사용한다면 아마도 Push나 Pull을 할 때 인증을 위한 ID나 Password를 묻는 것을 볼 수 있다. 보통 터미널에서 작업하는 경우 Git이 이 정보를 사용자로부터 받기 위해 ID나 Password를 입력받아 서버로 전달해서 권한을 확인한다.

Push할 때마다 매번 ID나 Password를 입력하지 않도록 ``crediential cache'' 기능을 이용할 수 있다. 이 기능을 활성화하면 Git은 몇 분 동안 입력한 ID나 Password를 저장해둔다. 이 기능을 활성화하려면 `git config --global credential.helper cache` 명령을 실행하여 환경설정을 추가한다.

이 기능이 제공하는 다른 옵션에 대한 자세한 설명은 <<_credential_caching>>를 참고한다.
====

//////////////////////////
The next time one of your collaborators fetches from the server, they will get a reference to where the server's version of `serverfix` is under the remote branch `origin/serverfix`:
//////////////////////////
나중에 누군가 저장소를 Fetch하고 나서 서버에 있는 `serverfix` 브랜치에 접근할 때 `origin/serverfix`라는 이름으로 접근할 수 있다.

[source,console]
----
$ git fetch origin
remote: Counting objects: 7, done.
remote: Compressing objects: 100% (2/2), done.
remote: Total 3 (delta 0), reused 3 (delta 0)
Unpacking objects: 100% (3/3), done.
From https://github.com/schacon/simplegit
 * [new branch]      serverfix    -> origin/serverfix
----

//////////////////////////
It's important to note that when you do a fetch that brings down new remote branches, you don't automatically have local, editable copies of them.
In other words, in this case, you don't have a new `serverfix` branch – you only have an `origin/serverfix` pointer that you can't modify.
//////////////////////////
여기서 짚고 넘어가야 할 게 있다. Fetch 명령으로 리모트 브랜치를 내려받는다고 해서 로컬 저장소에 수정할 수 있는 브랜치가 새로 생기는 것이 아니다.
다시 말해서 `serverfix`라는 브랜치가 생기는 것이 아니라 그저 수정 못 하는 `origin/serverfix` 브랜치 포인터가 생기는 것이다.

//////////////////////////
To merge this work into your current working branch, you can run `git merge origin/serverfix`.
If you want your own `serverfix` branch that you can work on, you can base it off your remote branch:
//////////////////////////
새로 받은 브랜치의 내용을 Merge하려면 `git merge origin/serverfix` 명령을 사용한다.
Merge하지 않고 리모트 브랜치에서 시작하는 새 브랜치를 만들려면 아래와 같은 명령을 사용한다.

[source,console]
----
$ git checkout -b serverfix origin/serverfix
Branch serverfix set up to track remote branch serverfix from origin.
Switched to a new branch 'serverfix'
----

//////////////////////////
This gives you a local branch that you can work on that starts where `origin/serverfix` is.
//////////////////////////
그러면 `origin/serverfix`에서 시작하고 수정할 수 있는 `serverfix`라는 로컬 브랜치가 만들어진다.

[[_tracking_branches]]
//////////////////////////
==== Tracking Branches
//////////////////////////
==== 브랜치 추적

(((branches, tracking)))(((branches, upstream)))
//////////////////////////
Checking out a local branch from a remote branch automatically creates what is called a ``tracking branch'' (or sometimes an ``upstream branch'').
Tracking branches are local branches that have a direct relationship to a remote branch.
If you're on a tracking branch and type `git pull`, Git automatically knows which server to fetch from and branch to merge into.
//////////////////////////
리모트 브랜치를 로컬 브랜치로 Checkout하면 자동으로 ``트래킹(Tracking) 브랜치''가 만들어진다 (종종 ``업스트림(Upstream) 브랜치'' 라고 부르기도 함).
트래킹 브랜치는 리모트 브랜치와 직접적인 연결고리가 있는 로컬 브랜치이다.
트래킹 브랜치에서 `git pull` 명령을 내리면 리모트 저장소로부터 데이터를 내려받아 연결된 리모트 브랜치와 자동으로 Merge한다.

//////////////////////////
When you clone a repository, it generally automatically creates a `master` branch that tracks `origin/master`.
However, you can set up other tracking branches if you wish – ones that track branches on other remotes, or don't track the `master` branch.
The simple case is the example you just saw, running `git checkout -b [branch] [remotename]/[branch]`.
This is a common enough operation that git provides the `--track` shorthand:
//////////////////////////
서버로부터 저장소를 Clone을 하면 Git은 자동으로 `master` 브랜치를 `origin/master` 브랜치의 트래킹 브랜치로 만든다.
트래킹 브랜치를 직접 만들 수 있는데 리모트를 `origin`이 아닌 다른 리모트로 할 수도 있고, 브랜치도 `master`가 아닌 다른 브랜치로 추적하게 할 수 있다.
`git checkout -b [branch] [remotename]/[branch]` 명령으로 간단히 트래킹 브랜치를 만들 수 있다.
`--track` 옵션을 사용하여 로컬 브랜치 이름을 자동으로 생성할 수 있다.

[source,console]
----
$ git checkout --track origin/serverfix
Branch serverfix set up to track remote branch serverfix from origin.
Switched to a new branch 'serverfix'
----

//////////////////////////
To set up a local branch with a different name than the remote branch, you can easily use the first version with a different local branch name:
//////////////////////////
리모트 브랜치와 다른 이름으로 브랜치를 만들려면 로컬 브랜치의 이름을 아래와 같이 다르게 지정한다.

[source,console]
----
$ git checkout -b sf origin/serverfix
Branch sf set up to track remote branch serverfix from origin.
Switched to a new branch 'sf'
----

//////////////////////////
Now, your local branch `sf` will automatically pull from `origin/serverfix`.
//////////////////////////
이제 `sf` 브랜치에서 Push나 Pull하면 자동으로 `origin/serverfix`로 데이터를 보내거나 가져온다.

//////////////////////////
If you already have a local branch and want to set it to a remote branch you just pulled down, or want to change the upstream branch you're tracking, you can use the `-u` or `--set-upstream-to` option to `git branch` to explicitly set it at any time.
//////////////////////////
이미 로컬에 존재하는 브랜치가 리모트의 특정 브랜치를 추적하게 하려면 `git branch` 명령에 `-u`나 `--set-upstream-to` 옵션을 붙여서 다음과 같이 설정한다.

[source,console]
----
$ git branch -u origin/serverfix
Branch serverfix set up to track remote branch serverfix from origin.
----

[NOTE]
//////////////////////////
.Upstream shorthand
====
When you have a tracking branch set up, you can reference it with the `@{upstream}` or `@{u}` shorthand. So if you're on the `master` branch and it's tracking `origin/master`, you can say something like `git merge @{u}` instead of `git merge origin/master` if you wish.(((+++@{u}+++)))(((+++@{upstream}+++)))
====
//////////////////////////
.업스트림 별명
====
추적 브랜치를 설정했다면 추적 브랜치를 `@{upstream}`이나 `@{u}`로 짧게 대체하여 사용할 수 있다. `master` 브랜치가 `origin/master` 브랜치를 추적하는 경우라면 `git merge origin/master` 명령과 `git merge @{u}` 명령을 똑같이 사용할 수 있다.(((+++@{u}+++)))(((+++@{upstream}+++)))
====

//////////////////////////
If you want to see what tracking branches you have set up, you can use the `-vv` option to `git branch`. This will list out your local branches with more information including what each branch is tracking and if your local branch is ahead, behind or both.
//////////////////////////
추적 브랜치가 현재 어떻게 설정되어 있는지 확인하려면 `git branch` 명령에 `-vv` 옵션을 더한다. 이 명령을 실행하면 로컬 브랜치 목록과 로컬 브랜치가 추적하고 있는 리모트 브랜치도 함께 보여준다. 게다가, 로컬 브랜치가 앞서가는지 뒤쳐지는지에 대한 내용도 보여준다.

[source,console]
----
$ git branch -vv
  iss53     7e424c3 [origin/iss53: ahead 2] forgot the brackets
  master    1ae2a45 [origin/master] deploying index fix
* serverfix f8674d9 [teamone/server-fix-good: ahead 3, behind 1] this should do it
  testing   5ea463a trying something new
----

//////////////////////////
So here we can see that our `iss53` branch is tracking `origin/iss53` and is ``ahead'' by two, meaning that we have two commits locally that are not pushed to the server. We can also see that our `master` branch is tracking `origin/master` and is up to date. Next we can see that our `serverfix` branch is tracking the `server-fix-good` branch on our `teamone` server and is ahead by three and behind by one, meaning that there is one commit on the server we haven't merged in yet and three commits locally that we haven't pushed. Finally we can see that our `testing` branch is not tracking any remote branch.
//////////////////////////
위의 결과를 보면 `iss53` 브랜치는 `origin/iss53` 리모트 브랜치를 추적하고 있다는 것을 알 수 있고 ``ahead'' 표시를 통해 로컬 브랜치가 커밋 2개 앞서 있다(리모트 브랜치에는 없는 커밋이 로컬에는 존재)는 것을 알 수 있다. `master` 브랜치는 `origin/master` 브랜치를 추적하고 있으며 두 브랜치가 가리키는 커밋 내용이 같은 상태이다. 로컬 브랜치 중 `serverfix` 브랜치는 `server-fix-good` 이라는 `teamone` 리모트 서버의 브랜치를 추적하고 있으며 커밋 3개 앞서 있으며 동시에 커밋 1개로 뒤쳐져 있다. 이 말은 `serverfix` 브랜치에 서버로 보내지 않은 커밋이 3개, 서버의 브랜치에서 아직 로컬 브랜치로 머지하지 않은 커밋이 1개 있다는 말이다. 마지막 `testing` 브랜치는 추적하는 브랜치가 없는 상태이다.

//////////////////////////
It's important to note that these numbers are only since the last time you fetched from each server. This command does not reach out to the servers, it's telling you about what it has cached from these servers locally. If you want totally up to date ahead and behind numbers, you'll need to fetch from all your remotes right before running this. You could do that like this: `$ git fetch --all; git branch -vv`
//////////////////////////
여기서 중요한 점은 명령을 실행했을 때 나타나는 결과는 모두 마지막으로 서버에서 데이터를 가져온(fetch) 시점을 바탕으로 계산한다는 점이다. 단순이 이 명령만으로는 서버의 최신 데이터를 반영하지는 않으며 로컬에 저장된 서버의 캐시 데이터를 사용한다. 현재 시점에서 진짜 최신 데이터로 추적 상황을 알아보려면 먼저 서버로부터 최신 데이터를 받아온 후에 추적 상황을 확인해야 한다. `$ git fetch --all; git branch -vv` 처럼 두 명령을 함께 사용하는 것이 적당하다 하겠다.

//////////////////////////
==== Pulling
//////////////////////////
==== Pull하기

(((pulling)))
//////////////////////////
While the `git fetch` command will fetch down all the changes on the server that you don't have yet, it will not modify your working directory at all.
It will simply get the data for you and let you merge it yourself.
However, there is a command called `git pull` which is essentially a `git fetch` immediately followed by a `git merge` in most cases.
If you have a tracking branch set up as demonstrated in the last section, either by explicitly setting it or by having it created for you by the `clone` or `checkout` commands, `git pull` will look up what server and branch your current branch is tracking, fetch from that server and then try to merge in that remote branch.
//////////////////////////
`git fetch` 명령을 실행하면 서버에는 존재하지만, 로컬에는 아직 없는 데이터를 받아와서 저정한다. 이 때 워킹 디렉토리의 파일 내용은 변경되지 않고 그대로 남는다.
서버로부터 데이터를 가져와서 저장해두고 사용자가 Merge하도록 준비만 해둔다.
간단히 말하면 `git pull` 명령은 대부분 `git fetch` 명령을 실행하고 나서 자동으로 `git merge` 명령을 수행하는 것 뿐이다.
바로 앞 절에서 살펴본 대로 `clone`이나 `checkout` 명령을 실행하여 추적 브랜치가 설정되면 `git pull` 명령은 서버로부터 데이터를 가져와서 현재 로컬 브랜치와 서버의 추적 브랜치를 Merge한다.

//////////////////////////
Generally it's better to simply use the `fetch` and `merge` commands explicitly as the magic of `git pull` can often be confusing.
//////////////////////////
일반적으로 `fetch`와 `merge` 명령을 명시적으로 사용하는 것이 `pull` 명령으로 한번에 두 작업을 하는 것보다 낫다.

[[_delete_branches]]
//////////////////////////
==== Deleting Remote Branches
//////////////////////////
==== 리모트 브랜치 삭제

(((branches, deleting remote)))
//////////////////////////
Suppose you're done with a remote branch – say you and your collaborators are finished with a feature and have merged it into your remote's `master` branch (or whatever branch your stable codeline is in).
You can delete a remote branch using the `--delete` option to `git push`.
If you want to delete your `serverfix` branch from the server, you run the following:
//////////////////////////
동료와 협업하기 위해 리모트 브랜치를 만들었다가 작업을 마치고 `master` 브랜치로 Merge했다. 협업하는 데 사용했던 그 리모트 브랜치는 이제 더 이상 필요하지 않기에 삭제할 수 있다.
`git push` 명령에 `--delete` 옵션을 사용하여 리모트 브랜치를 삭제할 수 있다.
`serverfix`라는 리모트 브랜치를 삭제하려면 다음과 같이 실행한다.

[source,console]
----
$ git push origin --delete serverfix
To https://github.com/schacon/simplegit
 - [deleted]         serverfix
----

//////////////////////////
Basically all this does is remove the pointer from the server. The Git server will generally keep the data there for a while until a garbage collection runs, so if it was accidentally deleted, it's often easy to recover.
//////////////////////////
위 명령을 실행하면 서버에서 브랜치(즉 커밋을 가리키는 포인터) 하나가 사라진다. 서버에서 가비지 컬렉터가 동작하지 않는 한 데이터는 사라지지 않기 때문에 종종 의도치 않게 삭제한 경우에도 커밋한 데이터를 살릴 수 있다.
