//////////////////////////
=== Basic Branching and Merging
//////////////////////////
=== 브랜치와 Merge의 기초

//////////////////////////
Let's go through a simple example of branching and merging with a workflow that you might use in the real world.
You'll follow these steps:
//////////////////////////
실제 개발과정에서 겪을 만한 예제를 하나 살펴보자.
브랜치와 Merge는 보통 이런 식으로 진행한다.

//////////////////////////
. Do work on a web site.
. Create a branch for a new story you're working on.
. Do some work in that branch.
//////////////////////////
. 작업 중인 웹사이트가 있다.
. 새로운 이슈를 처리할 새 Branch를 하나 생성한다.
. 새로 만든 Branch에서 작업을 진행한다.

//////////////////////////
At this stage, you'll receive a call that another issue is critical and you need a hotfix.
You'll do the following:
//////////////////////////
이때 중요한 문제가 생겨서 그것을 해결하는 Hotfix를 먼저 만들어야 한다.
그러면 다음과 같이 할 수 있다.

//////////////////////////
. Switch to your production branch.
. Create a branch to add the hotfix.
. After it's tested, merge the hotfix branch, and push to production.
. Switch back to your original story and continue working.
//////////////////////////
. 새로운 이슈를 처리하기 이전의 운영(Production) 브랜치로 이동한다.
. Hotfix 브랜치를 새로 하나 생성한다.
. 수정한 Hotfix 테스트를 마치고 운영 브랜치로 Merge한다.
. 다시 작업하던 브랜치로 옮겨가서 하던 일 진행한다.

[[_basic_branching]]
//////////////////////////
==== Basic Branching
//////////////////////////
==== 브랜치의 기초

(((branches, basic workflow)))
//////////////////////////
First, let's say you're working on your project and have a couple of commits already.
//////////////////////////
먼저 지금 작업하는 프로젝트에서 이전에 커밋을 몇 번 했다고 가정한다.

//////////////////////////
.A simple commit history
image::images/basic-branching-1.png[A simple commit history.]
//////////////////////////
.현재 커밋 히스토리
image::images/basic-branching-1.png[현재 커밋 히스토리]

//////////////////////////
You've decided that you're going to work on issue #53 in whatever issue-tracking system your company uses.
To create a branch and switch to it at the same time, you can run the `git checkout` command with the `-b` switch:
//////////////////////////
이슈 관리 시스템에 등록된 53번 이슈를 처리한다고 하면 이 이슈에 집중할 수 있는 브랜치를 새로 하나 만든다.
브랜치를 만들면서 Checkout까지 한 번에 하려면 `git checkout` 명령에 `-b`라는 옵션을 추가한다.

[source,console]
----
$ git checkout -b iss53
Switched to a new branch "iss53"
----

//////////////////////////
This is shorthand for:
//////////////////////////
위 명령은 아래 명령을 줄여놓은 것이다.

[source,console]
----
$ git branch iss53
$ git checkout iss53
----

//////////////////////////
.Creating a new branch pointer
image::images/basic-branching-2.png[Creating a new branch pointer.]
//////////////////////////
.브랜치 포인터를 새로 만듦
image::images/basic-branching-2.png[브랜치 포인터를 새로 만듦]

//////////////////////////
You work on your web site and do some commits.
Doing so moves the `iss53` branch forward, because you have it checked out (that is, your `HEAD` is pointing to it):
//////////////////////////
`iss53` 브랜치를 Checkout했기 때문에(즉, `HEAD`는 `iss53` 브랜치를 가리킨다)
뭔가 일을 하고 커밋하면 `iss53` 브랜치가 앞으로 진행한다.

[source,console]
----
$ vim index.html
$ git commit -a -m 'added a new footer [issue 53]'
----

//////////////////////////
.The iss53 branch has moved forward with your work
image::images/basic-branching-3.png[The iss53 branch has moved forward with your work.]
//////////////////////////
.진행 중인 iss53 브랜치
image::images/basic-branching-3.png[진행 중인 iss53 브랜치]

//////////////////////////
Now you get the call that there is an issue with the web site, and you need to fix it immediately.
With Git, you don't have to deploy your fix along with the `iss53` changes you've made, and you don't have to put a lot of effort into reverting those changes before you can work on applying your fix to what is in production.
All you have to do is switch back to your `master` branch.
//////////////////////////
다른 상황을 가정해보자. 만드는 사이트에 문제가 생겨서 즉시 고쳐야 한다.
버그를 해결한 Hotfix에 `iss53`이 섞이는 것을 방지하기 위해 `iss53`과 관련된 코드를 어딘가에 저장해두고 원래 운영 환경의 소스로 복구해야 한다.
Git을 사용하면 이런 노력을 들일 필요 없이 그냥 `master` 브랜치로 옮기면 된다.

//////////////////////////
However, before you do that, note that if your working directory or staging area has uncommitted changes that conflict with the branch you're checking out, Git won't let you switch branches.
It's best to have a clean working state when you switch branches.
There are ways to get around this (namely, stashing and commit amending) that we'll cover later on, in <<_git_stashing>>.
For now, let's assume you've committed all your changes, so you can switch back to your master branch:
//////////////////////////
그렇지만, 브랜치를 이동하려면 해야 할 일이 있다. 아직 커밋하지 않은 파일이 Checkout할 브랜치와 충돌 나면 브랜치를 변경할 수 없다.
브랜치를 변경할 때에는 워킹 디렉토리를 정리하는 것이 좋다.
이런 문제를 다루는 방법은(주로, Stash이나 커밋 Amend에 대해) 나중에 <<_git_stashing>> 에서 다룰 것이다.
지금은 작업하던 것을 모두 커밋하고 master 브랜치로 옮긴다:

[source,console]
----
$ git checkout master
Switched to branch 'master'
----

//////////////////////////
At this point, your project working directory is exactly the way it was before you started working on issue #53, and you can concentrate on your hotfix.
This is an important point to remember: when you switch branches, Git resets your working directory to look like it did the last time you committed on that branch.
It adds, removes, and modifies files automatically to make sure your working copy is what the branch looked like on your last commit to it.
//////////////////////////
이때 워킹 디렉토리는 53번 이슈를 시작하기 이전 모습으로 되돌려지기 때문에 새로운 문제에 집중할 수 있는 환경이 만들어진다.
Git은 자동으로 워킹 디렉토리에 파일들을 추가하고, 지우고, 수정해서
Checkout한 브랜치의 마지막 스냅샷으로 되돌려 놓는다는 것을 기억해야 한다.

//////////////////////////
Next, you have a hotfix to make.
Let's create a hotfix branch on which to work until it's completed:
//////////////////////////
이젠 해결해야 할 핫픽스가 생겼을 때를 예를 들어보자.
hotfix라는 브랜치를 만들고 새로운 이슈를 해결할 때까지 사용한다.

[source,console]
----
$ git checkout -b hotfix
Switched to a new branch 'hotfix'
$ vim index.html
$ git commit -a -m 'fixed the broken email address'
[hotfix 1fb7853] fixed the broken email address
 1 file changed, 2 insertions(+)
----

//////////////////////////
.Hotfix branch based on `master`
image::images/basic-branching-4.png[Hotfix branch based on `master`.]
//////////////////////////
.`master` 브랜치에서 갈라져 나온 hotfix 브랜치
image::images/basic-branching-4.png[`master` 브랜치에서 갈라져 나온 hotfix 브랜치]

//////////////////////////
You can run your tests, make sure the hotfix is what you want, and merge it back into your master branch to deploy to production.
You do this with the `git merge` command:(((git commands, merge)))
//////////////////////////
운영 환경에 적용하려면 문제를 제대로 고쳤는지 테스트하고 master 브랜치에 합쳐야 한다.
`git merge` 명령으로 다음과 같이 한다.(((git commands, merge)))

[source,console]
----
$ git checkout master
$ git merge hotfix
Updating f42c576..3a0874c
Fast-forward
 index.html | 2 ++
 1 file changed, 2 insertions(+)
----

//////////////////////////
You'll notice the phrase ``fast-forward'' in that merge.
Because the commit pointed to by the branch you merged in was directly upstream of the commit you're on, Git simply moves the pointer forward.
To phrase that another way, when you try to merge one commit with a commit that can be reached by following the first commit's history, Git simplifies things by moving the pointer forward because there is no divergent work to merge together – this is called a ``fast-forward.''
//////////////////////////
Merge 메시지에서 ``fast-forward''가 보이는가.
Merge할 브랜치가 가리키고 있던 커밋이 현 브랜치가 가리키는 것보다 '앞으로 진행한' 커밋이기 때문에 master 브랜치 포인터는 최신 커밋으로 이동한다.
이런 Merge 방식을 'Fast forward'라고 부른다. 다시 말해서 A 브랜치에서 다른 B 브랜치를 Merge할 때 B가 A 이후의 커밋을 가리키고 있으면 그저 A가 B의 커밋을 가리키게 할 뿐이다.

//////////////////////////
Your change is now in the snapshot of the commit pointed to by the `master` branch, and you can deploy the fix.
//////////////////////////
이제 hotfix는 master 브랜치에 포함됐고 운영환경에 적용할 수 있는 상태가 되었다고 가정해보자.

//////////////////////////
.`master` is fast-forwarded to `hotfix`
image::images/basic-branching-5.png[`master` is fast-forwarded to `hotfix`.]
//////////////////////////
.Merge 후 `hotfix` 같은 것을 가리키는 `master` 브랜치
image::images/basic-branching-5.png[Merge 후 `hotfix` 같은 것을 가리키는 `master` 브랜치]

//////////////////////////
After your super-important fix is deployed, you're ready to switch back to the work you were doing before you were interrupted.
However, first you'll delete the `hotfix` branch, because you no longer need it – the `master` branch points at the same place.
You can delete it with the `-d` option to `git branch`:
//////////////////////////
급한 문제를 해결하고 master 브랜치에 적용하고 나면 다시 일하던 브랜치로 돌아가야 한다.
이제 더 이상 필요없는 hotfix 브랜치는 삭제한다.
`git branch` 명령에 `-d` 옵션을 주고 브랜치를 삭제한다.

[source,console]
----
$ git branch -d hotfix
Deleted branch hotfix (3a0874c).
----

//////////////////////////
Now you can switch back to your work-in-progress branch on issue #53 and continue working on it.
//////////////////////////
자 이제 이슈 53번을 처리하던 환경으로 되돌아가서 하던 일을 계속 하자.

[source,console]
----
$ git checkout iss53
Switched to branch "iss53"
$ vim index.html
$ git commit -a -m 'finished the new footer [issue 53]'
[iss53 ad82d7a] finished the new footer [issue 53]
1 file changed, 1 insertion(+)
----

//////////////////////////
.Work continues on `iss53`
image::images/basic-branching-6.png[Work continues on `iss53`.]
//////////////////////////
.master와 별개로 진행하는 iss53 브랜치
image::images/basic-branching-6.png[master와 별개로 진행하는 iss53 브랜치]

//////////////////////////
It's worth noting here that the work you did in your `hotfix` branch is not contained in the files in your `iss53` branch.
If you need to pull it in, you can merge your `master` branch into your `iss53` branch by running `git merge master`, or you can wait to integrate those changes until you decide to pull the `iss53` branch back into `master` later.
//////////////////////////
위에서 작업한 `hotfix`가 `iss53` 브랜치에 영향을 끼치지 않는다는 점을 이해하는 것이 중요하다.
`git merge master` 명령으로 `master` 브랜치를 `iss53` 브랜치에 Merge하면 `iss53` 브랜치에 `hotfix`가 적용된다. 아니면 `iss53` 브랜치가 `master`에 Merge할 수 있는 수준이 될 때까지 기다렸다가 Merge하면 `hotfix`와 `iss53` 브랜치가 합쳐진다.

[[_basic_merging]]
//////////////////////////
==== Basic Merging
//////////////////////////
==== Merge의 기초

(((branches, merging)))(((merging)))
//////////////////////////
Suppose you've decided that your issue #53 work is complete and ready to be merged into your `master` branch.
In order to do that, you'll merge in your `iss53` branch, much like you merged in your `hotfix` branch earlier.
All you have to do is check out the branch you wish to merge into and then run the `git merge` command:
//////////////////////////
53번 이슈를 다 구현하고 master 브랜치에 Merge하는 과정을 살펴보자.
`iss53` 브랜치를 `master` 브랜치에 Merge하는 것은 앞서 살펴본 `hotfix` 브랜치를 Merge하는 것과 비슷하다.
`git merge` 명령으로 합칠 브랜치에서 합쳐질 브랜치를 Merge하면 된다.

[source,console]
----
$ git checkout master
Switched to branch 'master'
$ git merge iss53
Merge made by the 'recursive' strategy.
index.html |    1 +
1 file changed, 1 insertion(+)
----

//////////////////////////
This looks a bit different than the `hotfix` merge you did earlier.
In this case, your development history has diverged from some older point.
Because the commit on the branch you're on isn't a direct ancestor of the branch you're merging in, Git has to do some work.
In this case, Git does a simple three-way merge, using the two snapshots pointed to by the branch tips and the common ancestor of the two.
//////////////////////////
`hotfix`를 Merge했을 때와 메시지가 다르다.
현재 브랜치가 가리키는 커밋이 Merge할 브랜치의 조상이 아니므로
Git은 'Fast-forward'로 Merge하지 않는다.
이 경우에는 Git은 각 브랜치가 가리키는 커밋 두 개와 공통 조상 하나를 사용하여 3-way Merge를 한다.

//////////////////////////
.Three snapshots used in a typical merge
image::images/basic-merging-1.png[Three snapshots used in a typical merge.]
//////////////////////////
.커밋 3개를 Merge한다
image::images/basic-merging-1.png[커밋 3개를 Merge한다]

//////////////////////////
Instead of just moving the branch pointer forward, Git creates a new snapshot that results from this three-way merge and automatically creates a new commit that points to it.
This is referred to as a merge commit, and is special in that it has more than one parent.
//////////////////////////
단순히 브랜치 포인터를 최신 커밋으로 옮기는 게 아니라 3-way Merge의 결과를 별도의 커밋으로 만들고 나서 해당 브랜치가 그 커밋을 가리키도록 이동시킨다.
그래서 이런 커밋은 부모가 여러 개고 Merge 커밋이라고 부른다.

//////////////////////////
.A merge commit
image::images/basic-merging-2.png[A merge commit.]
//////////////////////////
.Merge 커밋
image::images/basic-merging-2.png[Merge 커밋]

//////////////////////////
It's worth pointing out that Git determines the best common ancestor to use for its merge base; this is different than older tools like CVS or Subversion (before version 1.5), where the developer doing the merge had to figure out the best merge base for themselves.
This makes merging a heck of a lot easier in Git than in these other systems.
//////////////////////////
Git은 Merge하는데 필요한 최적의 공통 조상을 자동으로 찾는다. 이런 기능도 Git이 다른 버전 관리 시스템보다 나은 점이다. CVS나 Subversion 같은 버전 관리 시스템은 개발자가 직접 공통 조상을 찾아서 Merge해야 한다.
Git은 다른 시스템보다 Merge가 대단히 쉽다.

//////////////////////////
Now that your work is merged in, you have no further need for the `iss53` branch.
You can close the ticket in your ticket-tracking system, and delete the branch:
//////////////////////////
iss53 브랜치를 master에 Merge하고 나면 더는 iss53 브랜치가 필요 없다.
다음 명령으로 브랜치를 삭제하고 이슈의 상태를 처리 완료로 표시한다.

[source,console]
----
$ git branch -d iss53
----

[[_basic_merge_conflicts]]
//////////////////////////
==== Basic Merge Conflicts
//////////////////////////
==== 충돌의 기초

(((merging, conflicts)))
//////////////////////////
Occasionally, this process doesn't go smoothly.
If you changed the same part of the same file differently in the two branches you're merging together, Git won't be able to merge them cleanly.
If your fix for issue #53 modified the same part of a file as the `hotfix`, you'll get a merge conflict that looks something like this:
//////////////////////////
가끔씩 3-way Merge가 실패할 때도 있다.
Merge하는 두 브랜치에서 같은 파일의 한 부분을 동시에 수정하고 Merge하면 Git은 해당 부분을 Merge하지 못한다.
예를 들어, 53번 이슈와 `hotfix`가 같은 부분을 수정했다면 Git은 Merge하지 못하고 다음과 같은 충돌(Conflict) 메시지를 출력한다.

[source,console]
----
$ git merge iss53
Auto-merging index.html
CONFLICT (content): Merge conflict in index.html
Automatic merge failed; fix conflicts and then commit the result.
----

//////////////////////////
Git hasn't automatically created a new merge commit.
It has paused the process while you resolve the conflict.
If you want to see which files are unmerged at any point after a merge conflict, you can run `git status`:
//////////////////////////
Git은 자동으로 Merge하지 못해서 새 커밋이 생기지 않는다.
변경사항의 충돌을 개발자가 해결하지 않는 한 Merge 과정을 진행할 수 없다.
Merge 충돌이 일어났을 때 Git이 어떤 파일을 Merge할 수 없었는지 살펴보려면 `git status` 명령을 이용한다.

[source,console]
----
$ git status
On branch master
You have unmerged paths.
  (fix conflicts and run "git commit")

Unmerged paths:
  (use "git add <file>..." to mark resolution)

    both modified:      index.html

no changes added to commit (use "git add" and/or "git commit -a")
----

//////////////////////////
Anything that has merge conflicts and hasn't been resolved is listed as unmerged.
Git adds standard conflict-resolution markers to the files that have conflicts, so you can open them manually and resolve those conflicts.
Your file contains a section that looks something like this:
//////////////////////////
충돌이 일어난 파일은 unmerged 상태로 표시된다.
Git은 충돌이 난 부분을 표준 형식에 따라 표시해준다. 그러면 개발자는 해당 부분을 수동으로 해결한다.
충돌 난 부분은 다음과 같이 표시된다.

[source,html]
----
<<<<<<< HEAD:index.html
<div id="footer">contact : email.support@github.com</div>
=======
<div id="footer">
 please contact us at support@github.com
</div>
>>>>>>> iss53:index.html
----

//////////////////////////
This means the version in `HEAD` (your `master` branch, because that was what you had checked out when you ran your merge command) is the top part of that block (everything above the `=======`), while the version in your `iss53` branch looks like everything in the bottom part.
In order to resolve the conflict, you have to either choose one side or the other or merge the contents yourself.
For instance, you might resolve this conflict by replacing the entire block with this:
//////////////////////////
`=======` 위쪽의 내용은 `HEAD` 버전(merge 명령을 실행할 때 작업하던 `master` 브랜치)의 내용이고 아래쪽은 `iss53` 브랜치의 내용이다.
충돌을 해결하려면 위쪽이나 아래쪽 내용 중에서 고르거나 새로 작성하여 Merge한다.
다음은 아예 새로 작성하여 충돌을 해결하는 예제다.

[source,html]
----
<div id="footer">
please contact us at email.support@github.com
</div>
----

//////////////////////////
This resolution has a little of each section, and the `<<<<<<<`, `=======`, and `>>>>>>>` lines have been completely removed.
After you've resolved each of these sections in each conflicted file, run `git add` on each file to mark it as resolved.
Staging the file marks it as resolved in Git.
//////////////////////////
충돌한 양쪽에서 조금씩 가져와서 새로 수정했다.
그리고 `<<<<<<<`, `=======`, `>>>>>>>` 가 포함된 행을 삭제하였다.
이렇게 충돌한 부분을 해결하고 `git add` 명령으로 다시 Git에 저장한다.

//////////////////////////
If you want to use a graphical tool to resolve these issues, you can run `git mergetool`, which fires up an appropriate visual merge tool and walks you through the conflicts:(((git commands, mergetool)))
//////////////////////////
다른 Merge 도구도 충돌을 해결할 수 있다. `git mergetool` 명령으로 실행한다.(((git commands, mergetool)))

[source,console]
----
$ git mergetool

This message is displayed because 'merge.tool' is not configured.
See 'git mergetool --tool-help' or 'git help config' for more details.
'git mergetool' will now attempt to use one of the following tools:
opendiff kdiff3 tkdiff xxdiff meld tortoisemerge gvimdiff diffuse diffmerge ecmerge p4merge araxis bc3 codecompare vimdiff emerge
Merging:
index.html

Normal merge conflict for 'index.html':
  {local}: modified file
  {remote}: modified file
Hit return to start merge resolution tool (opendiff):
----

//////////////////////////
If you want to use a merge tool other than the default (Git chose `opendiff` in this case because the command was run on a Mac), you can see all the supported tools listed at the top after ``one of the following tools.''
Just type the name of the tool you'd rather use.
//////////////////////////
기본 도구 말고 사용할 수 있는 다른 Merge 도구도 있는데(Mac에서는 `opendiff`가 실행된다), ``one of the following tools.'' 부분에 보여준다.
여기에 표시된 도구 중 하나를 고를 수 있다.

[NOTE]
//////////////////////////
====
If you need more advanced tools for resolving tricky merge conflicts, we cover more on merging in <<_advanced_merging>>.
====
//////////////////////////
====
Merge시에 발생한 충돌을 다루는 더 어렵고 요상한 내용은 뒤에 <<_advanced_merging>> 에서 다루기로 한다.
====

//////////////////////////
After you exit the merge tool, Git asks you if the merge was successful.
If you tell the script that it was, it stages the file to mark it as resolved for you.
You can run `git status` again to verify that all conflicts have been resolved:
//////////////////////////
Merge 도구를 종료하면 Git은 잘 Merge했는지 물어본다.
잘 마쳤다고 입력하면 자동으로 `git add`가 수행되고 해당 파일이 Staging Area에 저장된다.
`git status` 명령으로 충돌이 해결된 상태인지 다시 한번 확인해볼 수 있다.

[source,console]
----
$ git status
On branch master
All conflicts fixed but you are still merging.
  (use "git commit" to conclude merge)

Changes to be committed:

    modified:   index.html
----

//////////////////////////
If you're happy with that, and you verify that everything that had conflicts has been staged, you can type `git commit` to finalize the merge commit.
The commit message by default looks something like this:
//////////////////////////
충돌을 해결하고 나서 해당 파일이 Staging Area에 저장됐는지 확인했으면 `git commit` 명령으로 Merge 한 것을 커밋한다.
충돌을 해결하고 Merge할 때에는 커밋 메시지가 아래와 같다.

[source,console]
----
Merge branch 'iss53'

Conflicts:
    index.html
#
# It looks like you may be committing a merge.
# If this is not correct, please remove the file
#	.git/MERGE_HEAD
# and try again.


# Please enter the commit message for your changes. Lines starting
# with '#' will be ignored, and an empty message aborts the commit.
# On branch master
# All conflicts fixed but you are still merging.
#
# Changes to be committed:
#	modified:   index.html
#
----

//////////////////////////
You can modify that message with details about how you resolved the merge if you think it would be helpful to others looking at this merge in the future – why you did what you did, if it's not obvious.
//////////////////////////
어떻게 충돌을 해결했고 좀 더 확인해야 하는 부분은 무엇이고 왜 그렇게 해결했는지에 대해서 자세하게 기록한다. 자세한 기록은 나중에 이 Merge 커밋을 이해하는데 도움을 준다.
