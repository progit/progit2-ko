[[_rebasing]]
//////////////////////////
=== Rebasing
//////////////////////////
=== Rebase 하기

(((rebasing)))
//////////////////////////
In Git, there are two main ways to integrate changes from one branch into another: the `merge` and the `rebase`.
In this section you'll learn what rebasing is, how to do it, why it's a pretty amazing tool, and in what cases you won't want to use it.
//////////////////////////
Git에서 한 브랜치에서 다른 브랜치로 합치는 방법으로는 두 가지가 있다. 하나는 Merge 이고 다른 하나는 Rebase 다.
이 절에서는 Rebase가 무엇인지, 어떻게 사용하는지, 좋은 점은 뭐고, 어떤 상황에서 사용하고 어떤 상황에서 사용하지 말아야 하는지 알아 본다.

//////////////////////////
==== The Basic Rebase
//////////////////////////
==== Rebase 의 기초

//////////////////////////
If you go back to an earlier example from <<_basic_merging>>, you can see that you diverged your work and made commits on two different branches.
//////////////////////////
앞의 <<_basic_merging>> 절에서 살펴본 예제로 다시 돌아가 보자. 두 개의 나누어진 브랜치의 모습을 볼 수 있다.

//////////////////////////
.Simple divergent history
image::images/basic-rebase-1.png[Simple divergent history.]
//////////////////////////
.두 개의 브랜치로 나누어진 커밋 히스토리
image::images/basic-rebase-1.png[두 개의 브랜치로 나누어진 커밋 히스토리]

//////////////////////////
The easiest way to integrate the branches, as we've already covered, is the `merge` command.
It performs a three-way merge between the two latest branch snapshots (`C3` and `C4`) and the most recent common ancestor of the two (`C2`), creating a new snapshot (and commit).
//////////////////////////
이 두 브랜치를 합치는 가장 쉬운 방법은 앞에서 살펴본 대로 `merge` 명령을 사용하는 것이다.
두 브랜치의 마지막 커밋 두 개(`C3`, `C4`)와 공통 조상(`C2`)을 사용하는 3-way Merge로 새로운 커밋을 만들어 낸다.

//////////////////////////
.Merging to integrate diverged work history
image::images/basic-rebase-2.png[Merging to integrate diverged work history.]
//////////////////////////
.나뉜 브랜치를 Merge 하기
image::images/basic-rebase-2.png[나뉜 브랜치를 Merge 하기]

//////////////////////////
However, there is another way: you can take the patch of the change that was introduced in `C4` and reapply it on top of `C3`.
In Git, this is called _rebasing_.
With the `rebase` command, you can take all the changes that were committed on one branch and replay them on another one.(((git commands, rebase)))
//////////////////////////

비슷한 결과를 만드는 다른 방식으로, `C4` 에서 변경된 사항을 Patch로 만들고 이를 다시 `C3` 에 적용시키는 방법이 있다.
Git에서는 이런 방식을 _Rebase_ 라고 한다.
`rebase` 명령으로 한 브랜치에서 변경된 사항을 다른 브랜치에 적용할 수 있다.(((git commands, rebase)))

//////////////////////////
In this example, you'd run the following:
//////////////////////////
위의 예제는 아래와 같은 명령으로 Rebase 한다.

[source,console]
----
$ git checkout experiment
$ git rebase master
First, rewinding head to replay your work on top of it...
Applying: added staged command
----

//////////////////////////
It works by going to the common ancestor of the two branches (the one you're on and the one you're rebasing onto), getting the diff introduced by each commit of the branch you're on, saving those diffs to temporary files, resetting the current branch to the same commit as the branch you are rebasing onto, and finally applying each change in turn.
//////////////////////////

실제로 일어나는 일을 설명하자면 일단 두 브랜치가 나뉘기 전인 공통 커밋으로 이동하고 나서 그 커밋부터 지금 Checkout 한 브랜치가 가리키는 커밋까지 diff를 차례로 만들어 어딘가에 임시로 저장해 놓는다. Rebase 할 브랜치(역주 - experiment)가 합칠 브랜치(역주 - master)가 가리키는 커밋을 가리키게 하고 아까 저장해 놓았던 변경사항을 차례대로 적용한다.

//////////////////////////
.Rebasing the change introduced in `C4` onto `C3`
image::images/basic-rebase-3.png[Rebasing the change introduced in `C4` onto `C3`.]
//////////////////////////
.`C4` 의 변경사항을 `C3` 에 적용하는 Rebase 과정
image::images/basic-rebase-3.png[`C4` 의 변경사항을 `C3` 에 적용하는 Rebase 과정.]

//////////////////////////
At this point, you can go back to the `master` branch and do a fast-forward merge.
//////////////////////////
그리고 나서 `master` 브랜치를 Fast-forward 시킨다.

[source,console]
----
$ git checkout master
$ git merge experiment
----

//////////////////////////
.Fast-forwarding the master branch
image::images/basic-rebase-4.png[Fast-forwarding the master branch.]
//////////////////////////
.master 브랜치를 Fast-forward시키기
image::images/basic-rebase-4.png[master 브랜치를 Fast-forward시키기]

//////////////////////////
Now, the snapshot pointed to by `C4'` is exactly the same as the one that was pointed to by `C5` in the merge example.
There is no difference in the end product of the integration, but rebasing makes for a cleaner history.
If you examine the log of a rebased branch, it looks like a linear history: it appears that all the work happened in series, even when it originally happened in parallel.
//////////////////////////
`C4'` 로 표시된 커밋에서의 내용은 Merge 예제에서 살펴본 `C5` 커밋에서의 내용과 같을 것이다.
Merge 이든 Rebase 든 둘 다 합치는 관점에서는 서로 다를 게 없다. 하지만, Rebase가 좀 더 깨끗한 히스토리를 만든다.
Rebase 한 브랜치의 Log를 살펴보면 히스토리가 선형이다. 일을 병렬로 동시에 진행해도 Rebase 하고 나면 모든 작업이 차례대로 수행된 것처럼 보인다.

//////////////////////////
Often, you'll do this to make sure your commits apply cleanly on a remote branch -- perhaps in a project to which you're trying to contribute but that you don't maintain.
In this case, you'd do your work in a branch and then rebase your work onto `origin/master` when you were ready to submit your patches to the main project.
That way, the maintainer doesn't have to do any integration work -- just a fast-forward or a clean apply.
//////////////////////////
Rebase는 보통 리모트 브랜치에 커밋을 깔끔하게 적용하고 싶을 때 사용한다. 아마 이렇게 Rebase 하는 리모트 브랜치는 직접 관리하는 것이 아니라 그냥 참여하는 브랜치일 것이다.
메인 프로젝트에 Patch를 보낼 준비가 되면 하는 것이 Rebase 니까 브랜치에서 하던 일을 완전히 마치고 `origin/master` 로 Rebase 한다.
이렇게 Rebase 하고 나면 프로젝트 관리자는 어떠한 통합작업도 필요 없다. 그냥 master 브랜치를 Fast-forward 시키면 된다.

//////////////////////////
Note that the snapshot pointed to by the final commit you end up with, whether it's the last of the rebased commits for a rebase or the final merge commit after a merge, is the same snapshot – it's only the history that is different.
Rebasing replays changes from one line of work onto another in the order they were introduced, whereas merging takes the endpoints and merges them together.
//////////////////////////

Rebase를 하든지, Merge를 하든지 최종 결과물은 같고 커밋 히스토리만 다르다는 것이 중요하다.
Rebase 의 경우는 브랜치의 변경사항을 순서대로 다른 브랜치에 적용하면서 합치고 Merge 의 경우는 두 브랜치의 최종결과만을 가지고 합친다.

//////////////////////////
==== More Interesting Rebases
//////////////////////////
==== Rebase 활용

//////////////////////////
You can also have your rebase replay on something other than the rebase target branch.
Take a history like <<rbdiag_e>>, for example.
You branched a topic branch (`server`) to add some server-side functionality to your project, and made a commit.
Then, you branched off that to make the client-side changes (`client`) and committed a few times.
Finally, you went back to your server branch and did a few more commits.
//////////////////////////
Rebase는 단순히 브랜치를 합치는 것만 아니라 다른 용도로도 사용할 수 있다.
<<rbdiag_e>> 같은 히스토리가 있다고 하자.
`server` 브랜치를 만들어서 서버 기능을 추가하고
그 브랜치에서 다시 `client` 브랜치를 만들어 클라이언트 기능을 추가한다.
마지막으로 `server` 브랜치로 돌아가서 몇 가지 기능을 더 추가한다.

[[rbdiag_e]]
//////////////////////////
.A history with a topic branch off another topic branch
image::images/interesting-rebase-1.png[A history with a topic branch off another topic branch.]
//////////////////////////
.다른 토픽 브랜치에서 갈라져 나온 토픽 브랜치
image::images/interesting-rebase-1.png[다른 토픽 브랜치에서 갈라져 나온 토픽 브랜치]

//////////////////////////
Suppose you decide that you want to merge your client-side changes into your mainline for a release, but you want to hold off on the server-side changes until it's tested further.
You can take the changes on client that aren't on server (`C8` and `C9`) and replay them on your `master` branch by using the `--onto` option of `git rebase`:
//////////////////////////
이때 테스트가 덜 된 `server` 브랜치는 그대로 두고 `client` 브랜치만 `master` 로 합치려는 상황을 생각해보자.
`server` 와는 아무 관련이 없는 `client` 커밋은 `C8`, `C9` 이다. 이 두 커밋을 `master` 브랜치에 적용하기 위해서 `--onto` 옵션을 사용하여 아래와 같은 명령을 실행한다:

[source,console]
----
$ git rebase --onto master server client
----

//////////////////////////
This basically says, “Take the `client` branch, figure out the patches since it diverged from the `server` branch, and replay these patches in the `client` branch as if it was based directly off the `master` branch instead.”
It's a bit complex, but the result is pretty cool.
//////////////////////////
이 명령은 `master` 브랜치부터 `server` 브랜치와 `client` 브랜치의 공통 조상까지의 커밋을 `client` 브랜치에서 없애고 싶을 때 사용한다. `client` 브랜치에서만 변경된 패치를 만들어 `master` 브랜치에서 `client` 브랜치를 기반으로 새로 만들어 적용한다.
조금 복잡하긴 해도 꽤 쓸모 있다.

//////////////////////////
.Rebasing a topic branch off another topic branch
image::images/interesting-rebase-2.png[Rebasing a topic branch off another topic branch.]
//////////////////////////
.다른 토픽 브랜치에서 갈라져 나온 토픽 브랜치를 Rebase 하기
image::images/interesting-rebase-2.png[다른 토픽 브랜치에서 갈라져 나온 토픽 브랜치를 Rebase 하기]

//////////////////////////
Now you can fast-forward your `master` branch (see <<rbdiag_g>>):
//////////////////////////
이제 master 브랜치로 돌아가서 Fast-forward 시킬 수 있다(<<rbdiag_g>> 참고).

[source,console]
----
$ git checkout master
$ git merge client
----

[[rbdiag_g]]
//////////////////////////
.Fast-forwarding your master branch to include the client branch changes
image::images/interesting-rebase-3.png[Fast-forwarding your master branch to include the client branch changes.]
//////////////////////////
.master 브랜치를 client 브랜치 위치로 진행 시키기
image::images/interesting-rebase-3.png[master 브랜치를 client 브랜치 위치로 진행 시키기]

//////////////////////////
Let's say you decide to pull in your server branch as well.
You can rebase the server branch onto the `master` branch without having to check it out first by running `git rebase <basebranch> <topicbranch>` -- which checks out the topic branch (in this case, `server`) for you and replays it onto the base branch (`master`):
//////////////////////////
`server` 브랜치의 일이 다 끝나면 `git rebase <basebranch> <topicbranch>` 라는 명령으로 Checkout 하지 않고 바로 `server` 브랜치를 `master` 브랜치로 Rebase 할 수 있다.
이 명령은 토픽(server) 브랜치를 Checkout 하고 베이스(master) 브랜치에 Rebase 한다.

[source,console]
----
$ git rebase master server
----

//////////////////////////
This replays your `server` work on top of your `master` work, as shown in <<rbdiag_h>>.
//////////////////////////
server 브랜치의 수정사항을 master 브랜치에 적용했다. 그 결과는 <<rbdiag_h>> 같다.

[[rbdiag_h]]
//////////////////////////
.Rebasing your server branch on top of your master branch
image::images/interesting-rebase-4.png[Rebasing your server branch on top of your master branch.]
//////////////////////////
.master 브랜치에 server 브랜치의 수정 사항을 적용
image::images/interesting-rebase-4.png[master 브랜치에 server 브랜치의 수정 사항을 적용]

//////////////////////////
Then, you can fast-forward the base branch (`master`):
//////////////////////////
그리고 나서 `master` 브랜치를 Fast-forward 시킨다.

[source,console]
----
$ git checkout master
$ git merge server
----

//////////////////////////
You can remove the `client` and `server` branches because all the work is integrated and you don't need them anymore, leaving your history for this entire process looking like <<rbdiag_i>>:
//////////////////////////
모든 것이 `master` 브랜치에 통합됐기 때문에 더 필요하지 않다면 `client` 나 `server` 브랜치는 삭제해도 된다. 브랜치를 삭제해도 커밋 히스토리는 <<rbdiag_i>> 같이 여전히 남아 있다.

[source,console]
----
$ git branch -d client
$ git branch -d server
----

[[rbdiag_i]]
//////////////////////////
.Final commit history
image::images/interesting-rebase-5.png[Final commit history.]
//////////////////////////
.최종 커밋 히스토리
image::images/interesting-rebase-5.png[최종 커밋 히스토리]

[[_rebase_peril]]
//////////////////////////
==== The Perils of Rebasing
//////////////////////////
==== Rebase 의 위험성

(((rebasing, perils of)))
//////////////////////////
Ahh, but the bliss of rebasing isn't without its drawbacks, which can be summed up in a single line:
//////////////////////////
Rebase가 장점이 많은 기능이지만 단점이 없는 것은 아니니 조심해야 한다. 그 주의사항은 아래 한 문장으로 표현할 수 있다.

//////////////////////////
*Do not rebase commits that exist outside your repository.*
//////////////////////////
*이미 공개 저장소에 Push 한 커밋을 Rebase 하지 마라*

//////////////////////////
If you follow that guideline, you'll be fine.
If you don't, people will hate you, and you'll be scorned by friends and family.
//////////////////////////
이 지침만 지키면 Rebase를 하는 데 문제 될 게 없다.
하지만, 이 주의사항을 지키지 않으면 사람들에게 욕을 먹을 것이다.

//////////////////////////
When you rebase stuff, you're abandoning existing commits and creating new ones that are similar but different.
If you push commits somewhere and others pull them down and base work on them, and then you rewrite those commits with `git rebase` and push them up again, your collaborators will have to re-merge their work and things will get messy when you try to pull their work back into yours.
//////////////////////////
Rebase는 기존의 커밋을 그대로 사용하는 것이 아니라 내용은 같지만 다른 커밋을 새로 만든다.
새 커밋을 서버에 Push 하고 동료 중 누군가가 그 커밋을 Pull 해서 작업을 한다고 하자. 그런데 그 커밋을 `git rebase` 로 바꿔서 Push 해버리면 동료가 다시 Push 했을 때 동료는 다시 Merge 해야 한다. 그리고 동료가 다시 Merge 한 내용을 Pull 하면 내 코드는 정말 엉망이 된다.

//////////////////////////
Let's look at an example of how rebasing work that you've made public can cause problems.
Suppose you clone from a central server and then do some work off that.
Your commit history looks like this:
//////////////////////////
이미 공개 저장소에 Push 한 커밋을 Rebase 하면 어떤 결과가 초래되는지 예제를 통해 알아보자.
중앙 저장소에서 Clone 하고 일부 수정을 하면
커밋 히스토리는 아래와 같아 진다.

//////////////////////////
.Clone a repository, and base some work on it
image::images/perils-of-rebasing-1.png["Clone a repository, and base some work on it."]
//////////////////////////
.저장소를 Clone 하고 일부 수정함
image::images/perils-of-rebasing-1.png["저장소를 Clone 하고 일부 수정함"]

//////////////////////////
Now, someone else does more work that includes a merge, and pushes that work to the central server.
You fetch it and merge the new remote branch into your work, making your history look something like this:
//////////////////////////
이제 팀원 중 누군가 커밋, Merge 하고 나서 서버에 Push 한다.
이 리모트 브랜치를 Fetch, Merge 하면 히스토리는 아래와 같이 된다.

//////////////////////////
.Fetch more commits, and merge them into your work
image::images/perils-of-rebasing-2.png["Fetch more commits, and merge them into your work."]
//////////////////////////
.Fetch 한 후 Merge 함
image::images/perils-of-rebasing-2.png["Fetch 한 후 Merge 함"]

//////////////////////////
Next, the person who pushed the merged work decides to go back and rebase their work instead; they do a `git push --force` to overwrite the history on the server.
You then fetch from that server, bringing down the new commits.
//////////////////////////
그런데 Push 했던 팀원은 Merge 한 일을 되돌리고 다시 Rebase 한다. 서버의 히스토리를 새로 덮어씌우려면 `git push --force` 명령을 사용해야 한다.
이후에 저장소에서 Fetch 하고 나면 아래 그림과 같은 상태가 된다.

[[_pre_merge_rebase_work]]
//////////////////////////
.Someone pushes rebased commits, abandoning commits you've based your work on
image::images/perils-of-rebasing-3.png["Someone pushes rebased commits, abandoning commits you've based your work on."]
//////////////////////////
.한 팀원이 다른 팀원이 의존하는 커밋을 없애고 Rebase 한 커밋을 다시 Push 함
image::images/perils-of-rebasing-3.png["한 팀원이 다른 팀원이 의존하는 커밋을 없애고 Rebase 한 커밋을 다시 Push 함"]

//////////////////////////
Now you're both in a pickle.
If you do a `git pull`, you'll create a merge commit which includes both lines of history, and your repository will look like this:
//////////////////////////
자 이렇게 되면 짬뽕이 된다.
`git pull` 로 서버의 내용을 가져와서 Merge 하면 같은 내용의 수정사항을 포함한 Merge 커밋이 아래와 같이 만들어진다.

[[_merge_rebase_work]]
//////////////////////////
.You merge in the same work again into a new merge commit
image::images/perils-of-rebasing-4.png[You merge in the same work again into a new merge commit.]
//////////////////////////
.같은 Merge를 다시 한다
image::images/perils-of-rebasing-4.png[같은 Merge를 다시 한다]

//////////////////////////
If you run a `git log` when your history looks like this, you'll see two commits that have the same author, date, and message, which will be confusing.
Furthermore, if you push this history back up to the server, you'll reintroduce all those rebased commits to the central server, which can further confuse people.
It's pretty safe to assume that the other developer doesn't want `C4` and `C6` to be in the history; that's why they rebased in the first place.
//////////////////////////
`git log` 로 히스토리를 확인해보면 저자, 커밋 날짜, 메시지가 같은 커밋이 두 개 있다(C4, C4'). 이렇게 되면 혼란스럽다.
게다가 이 히스토리를 서버에 Push 하면 같은 커밋이 두 개 있기 때문에 다른 사람들도 혼란스러워한다.
`C4` 와 `C6` 는 포함되지 말았어야 할 커밋이다. 애초에 서버로 데이터를 보내기 전에 Rebase로 커밋을 정리했어야 했다.

[[_rebase_rebase]]
//////////////////////////
==== Rebase When You Rebase
//////////////////////////
==== Rebase 한 것을 다시 Rebase 하기

//////////////////////////
If you *do* find yourself in a situation like this, Git has some further magic that might help you out.
If someone on your team force pushes changes that overwrite work that you've based work on, your challenge is to figure out what is yours and what they've rewritten.
//////////////////////////
만약 이런 상황에 빠질 때 유용한 Git 기능이 하나 있다.
어떤 팀원이 강제로 내가 한일을 덮어썼다고 하자. 그러면 내가 했던 일이 무엇이고 덮어쓴 내용이 무엇인지 알아내야 한다.

//////////////////////////
It turns out that in addition to the commit SHA-1 checksum, Git also calculates a checksum that is based just on the patch introduced with the commit.
This is called a “patch-id”.
//////////////////////////
커밋 SHA 체크섬 외에도 Git은 커밋에 Patch 할 내용으로 SHA-1 체크섬을 한번 더 구한다.
이 값은 “patch-id” 라고 한다.

//////////////////////////
If you pull down work that was rewritten and rebase it on top of the new commits from your partner, Git can often successfully figure out what is uniquely yours and apply them back on top of the new branch.
//////////////////////////
덮어쓴 커밋을 받아서 그 커밋을 기준으로 Rebase 할 때 Git은 원래 누가 작성한 코드인지 잘 찾아 낸다. 그래서 Patch가 원래대로 잘 적용된다.

//////////////////////////
For instance, in the previous scenario, if instead of doing a merge when we're at <<_pre_merge_rebase_work>> we run `git rebase teamone/master`, Git will:
//////////////////////////
예를 들어 앞서 살펴본 예제를 보면 <<_pre_merge_rebase_work>> 상황에서 Merge 하는 대신 `git rebase teamone/master` 명령을 실행하면 Git은 아래와 같은 작업을 한다.

//////////////////////////
* Determine what work is unique to our branch (C2, C3, C4, C6, C7)
* Determine which are not merge commits (C2, C3, C4)
* Determine which have not been rewritten into the target branch (just C2 and C3, since C4 is the same patch as C4')
* Apply those commits to the top of `teamone/master`
//////////////////////////
* 현재 브랜치에만 포함된 커밋을 결정한다. (C2, C3, C4, C6, C7)
* Merge 커밋이 아닌 것을 결정한다. (C2, C3, C4)
* 이 중 merge할 브랜치에 덮어쓰이지 않은 커밋을 결정한다. (C2, C3. C4는 C4'와 동일한 Patch다)
* 결정한 커밋을 `teamone/master` 브랜치에 적용한다.

//////////////////////////
So instead of the result we see in <<_merge_rebase_work>>, we would end up with something more like <<_rebase_rebase_work>>.
//////////////////////////
결과를 확인해보면 <<_merge_rebase_work>> 같은 결과 대신 제대로 정리된 <<_rebase_rebase_work>> 같은 결과를 얻을 수 있다.

[[_rebase_rebase_work]]
//////////////////////////
.Rebase on top of force-pushed rebase work.
image::images/perils-of-rebasing-5.png[Rebase on top of force-pushed rebase work.]
//////////////////////////
.강제로 덮어쓴 브랜치에 Rebase 하기
image::images/perils-of-rebasing-5.png[강제로 덮어쓴 브랜치에 Rebase 하기]

//////////////////////////
This only works if C4 and C4' that your partner made are almost exactly the same patch.
Otherwise the rebase won't be able to tell that it's a duplicate and will add another C4-like patch (which will probably fail to apply cleanly, since the changes would already be at least somewhat there).
//////////////////////////
동료가 생성했던 C4와 C4' 커밋 내용이 완전히 같을 때만 이렇게 동작된다.
커밋 내용이 아예 다르거나 비슷하다면 커밋이 두 개 생긴다(같은 내용이 두 번 커밋될 수 있기 때문에 깔끔하지 않다).

//////////////////////////
You can also simplify this by running a `git pull --rebase` instead of a normal `git pull`.
Or you could do it manually with a `git fetch` followed by a `git rebase teamone/master` in this case.
//////////////////////////
`git pull` 명령을 실행할 때 옵션을 붙여서 `git pull --rebase` 로 Rebase 할 수도 있다.
물론 `git fetch` 와 `git rebase teamone/master` 이 두 명령을 직접 순서대로 실행해도 된다.

//////////////////////////
If you are using `git pull` and want to make `--rebase` the default, you can set the `pull.rebase` config value with something like `git config --global pull.rebase true`.
//////////////////////////
`git pull` 명령을 실행할 때 기본적으로 `--rebase` 옵션이 적용되도록 `pull.rebase` 설정을 추가할 수 있다. `git config --global pull.rebase true` 명령으로 추가한다.

//////////////////////////
If you treat rebasing as a way to clean up and work with commits before you push them, and if you only rebase commits that have never been available publicly, then you'll be fine.
If you rebase commits that have already been pushed publicly, and people may have based work on those commits, then you may be in for some frustrating trouble, and the scorn of your teammates.
//////////////////////////
Push 하기 전에 정리하려고 Rebase 하는 것은 괜찮다. 또 절대 공개하지 않고 혼자 Rebase 하는 경우도 괜찮다.
하지만, 이미 공개하여 사람들이 사용하는 커밋을 Rebase 하면 틀림없이 문제가 생긴다.

//////////////////////////
If you or a partner does find it necessary at some point, make sure everyone knows to run `git pull --rebase` to try to make the pain after it happens a little bit simpler.
//////////////////////////
나중에 후회하지 말고 `git pull --rebase` 로 문제를 미리 방지할 수 있다는 것을 같이 작업하는 동료와 모두 함께 공유하기 바란다.

//////////////////////////
==== Rebase vs. Merge
//////////////////////////
==== Rebase vs. Merge

(((rebasing, vs. merging)))(((merging, vs. rebasing)))
//////////////////////////
Now that you've seen rebasing and merging in action, you may be wondering which one is better.
Before we can answer this, let's step back a bit and talk about what history means.
//////////////////////////
Merge가 뭔지, Rebase가 뭔지 여러 예제를 통해 간단히 살펴보았다. 지금쯤 이런 의문이 들 거로 생각한다. 둘 중 무엇을 쓰는 게 좋지?
이 질문에 대한 답을 찾기 전에 히스토리의 의미에 대해서 잠깐 다시 생각해보자.

//////////////////////////
One point of view on this is that your repository's commit history is a *record of what actually happened.*
It's a historical document, valuable in its own right, and shouldn't be tampered with.
From this angle, changing the commit history is almost blasphemous; you're _lying_ about what actually transpired.
So what if there was a messy series of merge commits?
That's how it happened, and the repository should preserve that for posterity.
//////////////////////////
히스토리를 보는 관점 중에 하나는 **작업한 내용의 기록**으로 보는 것이 있다.
작업 내용을 기록한 문서이고, 각 기록은 각각 의미를 가지며, 변경할 수 없다.
이런 관점에서 커밋 히스토리를 변경한다는 것은 역사를 부정하는 꼴이 된다. 언제 무슨 일이 있었는지 기록에 대해 _거짓말_ 을 하게 되는 것이다.
이렇게 했을 때 지저분하게 수많은 Merge 커밋이 히스토리에 남게 되면 문제가 없을까?
**역사**는 후세를 위해 기록하고 보존해야 한다.

//////////////////////////
The opposing point of view is that the commit history is the *story of how your project was made.*
You wouldn't publish the first draft of a book, and the manual for how to maintain your software deserves careful editing.
This is the camp that uses tools like rebase and filter-branch to tell the story in the way that's best for future readers.
//////////////////////////
히스토리를 **프로젝트가 어떻게 진행되었나에 대한 이야기**로도 볼 수 있다.
소프트웨어를 주의 깊게 편집하는 방법에 메뉴얼이나 세세한 작업내용을 초벌부터 공개하고 싶지 않을 수 있다.
나중에 다른 사람에게 들려주기 좋도록 Rebase 나 filter-branch 같은 도구로 프로젝트의 진행 이야기를 다듬으면 좋다.

//////////////////////////
Now, to the question of whether merging or rebasing is better: hopefully you'll see that it's not that simple.
Git is a powerful tool, and allows you to do many things to and with your history, but every team and every project is different.
Now that you know how both of these things work, it's up to you to decide which one is best for your particular situation.
//////////////////////////
Merge 나 Rebase 중 무엇이 나으냐는 질문은 다시 생각해봐도 답이 그리 간단치 않다.
Git은 매우 강력한 도구고 기능이 많아서 히스토리를 잘 쌓을 수 있지만, 모든 팀과 모든 이가 처한 상황은 모두 다르다.
예제를 통해 Merge 나 Rebase가 무엇이고 어떤 의미인지 배웠다. 이 둘을 어떻게 쓸지는 각자의 상황과 각자의 판단에 달렸다.

//////////////////////////
In general the way to get the best of both worlds is to rebase local changes you've made but haven't shared yet before you push them in order to clean up your story, but never rebase anything you've pushed somewhere.
//////////////////////////
일반적인 해답을 굳이 드리자면 로컬 브랜치에서 작업할 때는 히스토리를 정리하기 위해서 Rebase 할 수도 있지만, 리모트 등 어딘가에 Push로 내보낸 커밋에 대해서는 절대 Rebase 하지 말아야 한다.
