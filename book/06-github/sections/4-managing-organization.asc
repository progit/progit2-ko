[[_github_orgs]]
//////////////////////////
=== Managing an organization
//////////////////////////
=== Organization 관리하기

(((GitHub, organizations)))
//////////////////////////
In addition to single-user accounts, GitHub has what are called Organizations.
Like personal accounts, Organizational accounts have a namespace where all their projects exist, but many other things are different.
These accounts represent a group of people with shared ownership of projects, and there are many tools to manage subgroups of those people.
Normally these accounts are used for Open Source groups (such as ``perl'' or ``rails'') or companies (such as ``google'' or ``twitter'').
//////////////////////////
GitHub에는 Organization이라는 계정도 있다.
개인 계정처럼 Organizaiton 계정도 프로젝트 네임스페이스지만 다른 점이 많다.
이 계정은 여러 명이 같은 프로젝트를 관리하는 데 사용하는 그룹 계정이고 사람들을 서브 그룹을 나누어 관리하는 도구도 있다.
이 계정은 ``perl''이나 ``rails'' 같은 오픈소스 그룹이나 ``goolge''이나 ``twitter''같은 회사가 사용한다.

//////////////////////////
==== Organization Basics
//////////////////////////
==== Organization 기초

//////////////////////////
An organization is pretty easy to create; just click on the ``+'' icon at the top-right of any GitHub page, and select ``New organization'' from the menu.
//////////////////////////
Organization을 만드는 것은 매우 쉽다. GitHub 페이지 오른쪽 위에 있는 ``+'' 아이콘을 클릭하고 메뉴에서 ``New organization''을 선택하면 된다.

//////////////////////////
.The ``New organization'' menu item.
image::images/neworg.png[The ``New organization'' menu item.]
//////////////////////////
.``New organization'' 메뉴 아이템.
image::images/neworg.png[``New organization'' 메뉴 아이템.]

//////////////////////////
First you'll need to name your organzation and provide an email address for a main point of contact for the group. Then you can invite other users to be co-owners of the account if you want to.
//////////////////////////
먼저 이름과 소유자 이메일 주소를 입력해서 Organization 계정을 만든다. 그리고 나서 다른 사람들을 초대한다. 필요하면 공동 소유자로 만들 수 있다.

//////////////////////////
Follow these steps and you'll soon be the owner of a brand-new organization.
Like personal accounts, organizations are free if everything you plan to store there will be open source.
//////////////////////////
다 만들면 Organization의 소유자가 된다.
개인 계정과 마찬가지로 Organization도 오픈 소스에는 무료다.

//////////////////////////
As an owner in an organization, when you fork a repository, you'll have the choice of forking it to your organization's namespace. When you create new repositories you can create them either under your personal account or under any of the organizations that you are an owner in. You also automatically ``watch'' any new repository created under these organizations.
//////////////////////////
GitHub은 Organization 소유자가 저장소를 Fork할 때는 어느 계정으로 Fork하는 것인지 묻는다. 새 저장소를 만들 때도 개인 계정 밑에 만들지 Organization 밑에 만들지 선택할 수 있다. 그리고 소유자는 해당 Organization에 저장소가 생길 때마다 자동으로 ``Watching'' 상태가 된다.

//////////////////////////
Just like in <<_personal_avatar>>, you can upload an avatar for your organization to personalize it a bit. Also just like personal accounts, you have a landing page for the organization that lists all of your repositories and can be viewed by other people.
//////////////////////////
<<_personal_avatar>>에서 개인 아바타를 올렸던 것처럼 Organization 계정에도 똑같이 아바타를 올릴 수 있다. 계정 랜딩 페이지도 개인 계정과 같다. 가지고 있는 저장소의 목록 페이지가 랜딩 페이지이고 다른 사람들이 볼 수 있다.

//////////////////////////
Now let's cover some of the things that are a bit different with an organizational account.
//////////////////////////
Organization 계정이 개인 계정과 다른 점이 있는데 그 점들을 살펴보자.

//////////////////////////
==== Teams
//////////////////////////
==== 팀

//////////////////////////
Organizations are associated with individual people by way of teams, which are simply a grouping of individual user accounts and repositories within the organization and what kind of access those people have in those repositories.
//////////////////////////
Organization과 개인은 팀을 통해 연결된다. Organizatoin의 사용자와 저장소는 팀으로 관리되고 저장소의 권한 설정도 팀으로 관리한다.

//////////////////////////
For example, say your company has three repositories: `frontend`, `backend`, and `deployscripts`.
You'd want your HTML/CSS/Javascript developers to have access to `frontend` and maybe `backend`, and your Operations people to have access to `backend` and `deployscripts`.
Teams make this easy, without having to manage the collaborators for every individual repository.
//////////////////////////
만약 회사에 `frontend`, `backend`, `deployscripts` 이렇게 저장소가 세 개 있다고 하자.
HTML/CSS/Javascript 개발자는 `frontend` 저장소에 접근 권한이 있어야 한다. 반대로 운영하는 사람들은 `backend`나 `deployscripts` 같은 저장소에 접근 권한이 있어야 한다.
Organization에서 팀은 저장소에서 함께 일하는 사람을 관리하는 효과적인 도구다.

//////////////////////////
The Organization page shows you a simple dashboard of all the repositories, users and teams that are under this organziation.
//////////////////////////
Organization 페이지는 저장소, 사용자, 팀을 한눈에 보여주는 대시보드다.

[[_org_page]]
//////////////////////////
.The Organization page.
image::images/orgs-01-page.png[]
//////////////////////////
.Organization 페이지
image::images/orgs-01-page.png[]

//////////////////////////
To manage your Teams, you can click on the Teams sidebar on the right hand side of the page in <<_org_page>>. This will bring you to a page you can use to add members to the team, add repositories to the team or manage the settings and access control levels for the team. Each team can have read only, read/write or administrative access to the repositories. You can change that level by clicking the ``Settings'' button in <<_team_page>>.
//////////////////////////
<<_org_page>> 오른쪽에 있는 'Teams' 사이드바를 클릭하면 팀을 관리하는 페이지로 넘어간다. 다음 페이지에서 팀에 팀원이나 저장소를 추가하고, 설정을 관리하고, 팀의 권한 설정을 할 수 있다. 팀은 저장소에 대해 읽기 전용, 읽고 쓰기, 관리 권한을 가질 수 있다. <<_team_page>>에 있는 ``Settings'' 버튼을 클릭하면 권한 수준을 변경할 수 있다.

[[_team_page]]
//////////////////////////
.The Team page.
image::images/orgs-02-teams.png[]
//////////////////////////
.팀 페이지.
image::images/orgs-02-teams.png[]

//////////////////////////
When you invite someone to a team, they will get an email letting them know they've been invited.
//////////////////////////
누군가를 팀에 초대하면 그 사람에게 초대 메일이 간다.

//////////////////////////
Additionally, team `@mentions` (such as `@acmecorp/frontend`) work much the same as they do with individual users, except that *all* members of the team are then subscribed to the thread.
This is useful if you want the attention from someone on a team, but you don't know exactly who to ask.
//////////////////////////
개인 사용자에 멘션하는 것처럼 팀 `@mentions`도 사용할 수 있다. `@acmecorp/frontend`처럼 하면 팀의 모든 멤버가 참여하게 된다.
정확히 누구한테 물어야 할지 모를 때는 그냥 팀 전체에 문의하는 것도 방법이다.

//////////////////////////
A user can belong to any number of teams, so don't limit yourself to only access-control teams.
Special-interest teams like `ux`, `css`, or `refactoring` are useful for certain kinds of questions, and others like `legal` and `colorblind` for an entirely different kind.
//////////////////////////
사용자가 속하는 팀의 수는 제한이 없다. 단순히 팀을 권한 관리 용도로 사용하지 마라.
`ux`, `css`, `refactoring`과 같이 팀은 어떤 질문 등을 관리하기에 좋고 `legal`, `colorblind` 같은 팀은 또 다른 이슈를 처리하는 데 좋다.

//////////////////////////
==== Audit Log
//////////////////////////
==== 감사 로그

//////////////////////////
Organizations also give owners access to all the information about what went on under the organization. You can go to the 'Audit Log' tab and see what events have happened at an organization level, who did them and where in the world they were done.
//////////////////////////
소유자는 Organization에서 일어나는 모든 정보를 알 수 있다. 'Audit Log' 탭에 보면 저장소에서 일어난 일들의 로그가 있다. 누가 세계 어디에서 무슨 일을 했는지 보여준다.

[[_audit_log]]
//////////////////////////
.The Audit log.
image::images/orgs-03-audit.png[]
//////////////////////////
.감사 로그.
image::images/orgs-03-audit.png[]

//////////////////////////
You can also filter down to specific types of events, specific places or specific people.
//////////////////////////
소유자는 이 화면에서 누가, 어디서, 무엇을 했는지 걸러 볼 수 있다.
