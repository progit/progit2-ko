//////////////////////////
=== Scripting GitHub
//////////////////////////
=== GitHub 스크립팅

//////////////////////////
So now we've covered all of the major features and workflows of GitHub, but any large group or project will have customizations they may want to make or external services they may want to integrate.
//////////////////////////
지금까지 GitHub의 주요기능과 Workflow를 모두 살펴봤다. 프로젝트가 크거나 그룹이 크면 매우 꼼꼼하게 설정하거나 다른 서비스를 통합시켜야 할 필요도 있다.

//////////////////////////
Luckily for us, GitHub is really quite hackable in many ways. In this section we'll cover how to use the GitHub hooks system and it's API to make GitHub work how we want it to.
//////////////////////////
다행히 GitHub에는 해커들에게 제공하는 방법이 있다. 이 절에서는 GitHub 훅과 API을 사용하는 법을 설명한다.

//////////////////////////
==== Hooks
//////////////////////////
==== 훅

//////////////////////////
The Hooks and Services section of GitHub repository administration is the easiest way to have GitHub interact with external systems.
//////////////////////////
GitHub 저장소 관리의 훅과 서비스 절에 보면 다른 시스템과 연동하는 가장 쉬운 방법이 나온다.

//////////////////////////
===== Services
//////////////////////////
===== 서비스

//////////////////////////
First we'll take a look at Services. Both the Hooks and Services integrations can be found in the Settings section of your repository, where we previously looked at adding Collaborators and changing the default branch of your project. Under the ``Webhooks and Services'' tab you will see something like <<_services_hooks>>.
//////////////////////////
GitHub 서비스부터 살펴보자. 훅과 서비스는 저장소의 설정 페이지에서 연동할 수 있다. 이전에 동료를 추가하거나 기본 브랜치를 설정하던 그곳이다. ``Webhooks와 Services'' 탭은 <<_services_hooks>>처럼 생겼다.

[[_services_hooks]]
//////////////////////////
.Services and Hooks configuration section.
image::images/scripting-01-services.png[Services and hooks]
//////////////////////////
.서비스와 훅 설정 화면.
image::images/scripting-01-services.png[서비스와 훅]

//////////////////////////
There are dozens of services you can choose from, most of them integrations into other commercial and open source systems. Most of them are for Continuous Integration services, bug and issue trackers, chat room systems and documentation systems. We'll walk through setting up a very simple one, the Email hook. If you choose ``email'' from the ``Add Service'' dropdown, you'll get a configuration screen like <<_service_config>>.
//////////////////////////
CI, 버그 트래커, 이슈 트래커, 채팅, 문서 시스템 등등과 연동하는 데 사용하는 서비스가 수십 개 준비돼 있다. 여기서는 가장 단순한 Email 훅을 살펴본다. ``Add Service'' 메뉴에서 ``email''을 선택하면 <<_service_config>> 같은 설정 화면으로 이동한다.

[[_service_config]]
//////////////////////////
.Email service configuration.
image::images/scripting-02-email-service.png[Email service]
//////////////////////////
.Email 서비스 설정.
image::images/scripting-02-email-service.png[Email 서비스]

//////////////////////////
In this case, if we hit the ``Add service'' button, the email address we specified will get an email every time someone pushes to the repository. Services can listen for lots of different types of events, but most only listen for push events and then do something with that data.
//////////////////////////
이메일을 입력하고 ``Add service'' 버튼을 누르면 누군가 저장소에 Push할 때마다 이메일이 날아간다. 서비스는 다양한 이벤트를 처리할 수 있지만, 보통은 Push할 때 그 데이터를 가지고 뭔가를 한다.

//////////////////////////
If there is a system you are using that you would like to integrate with GitHub, you should check here to see if there is an existing service integration available. For example, if you're using Jenkins to run tests on your codebase, you can enable the Jenkins builtin service integration to kick off a test run every time someone pushes to your repository.
//////////////////////////
연동하려는 시스템을 지원하는 서비스가 이미 있는지 GitHub에서 먼저 찾아봐야 한다. 예를 들어, Jenkins를 사용해서 코드 테스트할 계획이라면 Jenkins 서비스를 이용해서 연동한다. 누군가 저장소에 Push할 때마다 테스트를 수행되도록 할 수 있다.

//////////////////////////
===== Hooks
//////////////////////////
===== 훅

//////////////////////////
If you need something more specific or you want to integrate with a service or site that is not included in this list, you can instead use the more generic hooks system. GitHub repository hooks are pretty simple. You specify a URL and GitHub will post an HTTP payload to that URL on any event you want.
//////////////////////////
GitHub 서비스에 없는 사이트나 외부 서비스와 연동하고 싶거나 좀 더 세세한 설정을 하고 싶으면 GitHub 훅을 이용한다. GitHub 저장소의 훅은 단순하다. URL을 하나 주면 그 URL로 HTTP 페이로드를 보내준다.

//////////////////////////
Generally the way this works is you can setup a small web service to listen for a GitHub hook payload and then do something with the data when it is received.
//////////////////////////
GitHub 훅 페이로드를 처리하는 간단한 웹 서비스를 하나 만들고 그 서비스에 원하는 동작을 구현하는 것이 일반적이다.

//////////////////////////
To enable a hook, you click the ``Add webhook'' button in <<_services_hooks>>. This will bring you to a page that looks like <<_web_hook>>.
//////////////////////////
<<_services_hooks>>의 ``Add webhook'' 버튼을 클릭하면 아래와 같은 페이지로 이동한다.

[[_web_hook]]
//////////////////////////
.Web hook configuration.
image::images/scripting-03-webhook.png[Web hook]
//////////////////////////
.웹훅 설정.
image::images/scripting-03-webhook.png[웹훅]

//////////////////////////
The configuration for a web hook is pretty simple. In most cases you simply enter a URL and a secret key and hit ``Add webhook''. There are a few options for which events you want GitHub to send you a payload for -- the default is to only get a payload for the `push` event, when someone pushes new code to any branch of your repository.
//////////////////////////
웹훅 설정은 매우 간단하다. URL와 보안 키를 입력하고 ``Add webhook'' 버튼을 클릭한다. 어떤 이벤트의 페이로드가 필요한 것인지 선택할 수 있지만 `push` 이벤트의 페이로드만 보내는 것이 기본이다. 그래서 누군가 아무 브랜치에나 코드를 Push하면 HTTP 페이로드가 전송된다.

//////////////////////////
Let's see a small example of a web service you may set up to handle a web hook. We'll use the Ruby web framework Sinatra since it's fairly concise and you should be able to easily see what we're doing.
//////////////////////////
웹훅을 처리하는 간단한 웹서비스 예제를 하나 살펴보자. 이 웹서비스는 Ruby 웹 프레임워크인 Sinatra를 사용했다. 간략하기 때문에 무엇을 하는 웹 서비스인지 쉽게 이해할 수 있을 것이다.

//////////////////////////
Let's say we want to get an email if a specific person pushes to a specific branch of our project modifying a specific file. We could fairly easily do that with code like this:
//////////////////////////
이메일을 보내는 서비스를 만들어 보자. 이 서비스는 누가 어느 브랜치에 어떤 파일을 Push했는 지를 알려준다. 이런 서비스는 매우 간단하게 만들 수 있다.

[source,ruby]
----
require 'sinatra'
require 'json'
require 'mail'

post '/payload' do
  push = JSON.parse(request.body.read) # parse the JSON

  # gather the data we're looking for
  pusher = push["pusher"]["name"]
  branch = push["ref"]

  # get a list of all the files touched
  files = push["commits"].map do |commit|
    commit['added'] + commit['modified'] + commit['removed']
  end
  files = files.flatten.uniq

  # check for our criteria
  if pusher == 'schacon' &&
     branch == 'ref/heads/special-branch' &&
     files.include?('special-file.txt')

    Mail.deliver do
      from     'tchacon@example.com'
      to       'tchacon@example.com'
      subject  'Scott Changed the File'
      body     "ALARM"
    end
  end
end
----

//////////////////////////
Here we're taking the JSON payload that GitHub delivers us and looking up who pushed it, what branch they pushed to and what files were touched in all the commits that were pushed. Then we check that against our criteria and send an email if it matches.
//////////////////////////
GitHub은 누가 Push했는지, 어느 브랜치에 Push했는지, Push한 커밋에서 어떤 파일을 수정했는지에 대한 정보를 JSON 페이로드에 담아서 보낸다. 여기서는 특정 조건을 검사해서 만족할 때만 이메일을 보낸다.

//////////////////////////
In order to develop and test something like this, you have a nice developer console in the same screen where you set the hook up. You can see the last few deliveries that GitHub has tried to make for that webhook. For each hook you can dig down into when it was delivered, if it was successful and the body and headers for both the request and the response. This makes it incredibly easy to test and debug your hooks.
//////////////////////////
Github은 개발하고 테스트할 때 사용하는 개발자 콘솔도 제공한다. 이 콘솔은 혹을 설정한 페이지에 있다. 콘솔에서 해당 웹훅의 최근 히스토리 몇 개를 확인할 수 있다. 어떤 데이터가 전송됐는지 확인할 수 있다. 만약 전송에 성공했으면 요청과 응답의 바디와 헤더를 모두 확인할 수 있다. 이것으로 훅을 쉽게 테스트하고 디버깅할 수 있다.

[[_web_hook_debug]]
//////////////////////////
.Web hook debugging information.
image::images/scripting-04-webhook-debug.png[Webhook debug]
//////////////////////////
.웹훅 디버깅 정보.
image::images/scripting-04-webhook-debug.png[웹훅 디버그]

//////////////////////////
The other great feature of this is that you can redeliver any of the payloads to test your service easily.
//////////////////////////
서비스를 테스트할 수 있도록 히스토리에 있는 페이로드를 재전송할 수 있다.

//////////////////////////
For more information on how to write webhooks and all the different event types you can listen for, go to the GitHub Developer documentation at: https://developer.github.com/webhooks/
//////////////////////////
어떤 이벤트가 있고 각각 어떻게 웹훅을 만드는지가 자세히 알고 싶다면 GitHub 개발 문서를 봐라: https://developer.github.com/webhooks/

//////////////////////////
==== The GitHub API
//////////////////////////
==== GitHub API

(((GitHub, API)))
//////////////////////////
Services and hooks give you a way to receive push notifications about events that happen on your repositories, but what if you need more information about these events? What if you need to automate something like adding collaborators or labeling issues?
//////////////////////////
서비스와 훅은 저장소에서 발생한 이벤트의 알림을 받는 방법이다. 그런데 이벤트의 정보를 좀 더 자세히 알고 싶으면, 자동으로 동료를 추가하거나 이슈에 레이블을 달도록 하고 싶으면, 뭐 좋은 방법이 없을까?

//////////////////////////
This is where the GitHub API comes in handy. GitHub has tons of API endpoints for doing nearly anything you can do on the website in an automated fashion. In this section we'll learn how to authenticate and connect to the API, how to comment on an issue and how to change the status of a Pull Request through the API.
//////////////////////////
이런 일을 위해서 GitHub API가 준비돼 있다. GitHub이 제공하는 API Endpoint는 매우 많아서 웹 사이트에서 하는 웬만한 일은 자동화할 수 있다. 이 절에서는 인증하고 API에 연결하고, 이슈에 코멘트하고, Pull Request의 상태를 변경하는 법을 배운다.

//////////////////////////
==== Basic Usage
//////////////////////////
==== 기본 사용법

//////////////////////////
The most basic thing you can do is a simple GET request on an endpoint that doesn't require authentication. This could be a user or read-only information on an open source project. For example, if we want to know more about a user named ``schacon'', we can run something like this:
//////////////////////////
인증이 필요하지 않은 API Endpoint에 GET 요청을 보내기가 가장 쉽다. 사용자 정보나 오픈 소스 프로젝트의 정보를 읽어오는 것들이 이에 해당한다. 아래처럼 요청을 보내면 ``schacon''이라는 사용자에 대해 자세히 알 수 있다.

[source,javascript]
----
$ curl https://api.github.com/users/schacon
{
  "login": "schacon",
  "id": 70,
  "avatar_url": "https://avatars.githubusercontent.com/u/70",
# …
  "name": "Scott Chacon",
  "company": "GitHub",
  "following": 19,
  "created_at": "2008-01-27T17:19:28Z",
  "updated_at": "2014-06-10T02:37:23Z"
}
----

//////////////////////////
There are tons of endpoints like this to get information about organizations, projects, issues, commits -- just about anything you can publicly see on GitHub. You can even use the API to render arbitrary Markdown or find a `.gitignore` template.
//////////////////////////
이렇게 Organization, 프로젝트, 이슈, 커밋 정보를 가져오는 Endpoint가 많이 있다. GitHub에서 공개된 것은 전부라고 생각해도 된다. Markdown을 렌더링하거나 `.gitignore` 템플릿을 제공하는 API도 있다.

[source,javascript]
----
$ curl https://api.github.com/gitignore/templates/Java
{
  "name": "Java",
  "source": "*.class

# Mobile Tools for Java (J2ME)
.mtj.tmp/

# Package Files #
*.jar
*.war
*.ear

# virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml
hs_err_pid*
"
}
----

//////////////////////////
==== Commenting on an Issue
//////////////////////////
==== 이슈에 코멘트하기

//////////////////////////
However, if you want to do an action on the website such as comment on an Issue or Pull Request or if you want to view or interact with private content, you'll need to authenticate.
//////////////////////////
이슈나 Pull Request에 코멘트를 달거나 공개하지 않은 정보를 얻으려고 할 때는 인증이 필요하다.

//////////////////////////
There are several ways to authenticate. You can use basic authentication with just your username and password, but generally it's a better idea to use a personal access token.
You can generate this from the ``Applications'' tab of your settings page.
//////////////////////////
몇 가지 방법으로 인증할 수 있다. 사용자 이름과 암호가 필요한 Basic 인증도 가능하지만, 개인 엑세스 토큰을 사용하는 게 낫다.
설정 페이지의 ``Applications'' 탭에서 생성할 수 있다.

[[_access_token]]
//////////////////////////
.Generate your access token from the ``Applications'' tab of your settings page.
image::images/scripting-05-access-token.png[엑세스 토큰]
//////////////////////////
.설정 페이지의 ``Applications'' 탭에서 엑세스 토큰을 생성한다.
image::images/scripting-05-access-token.png[엑세스 토큰]

//////////////////////////
It will ask you which scopes you want for this token and a description. Make sure to use a good description so you feel comfortable removing the token when your script or application is no longer used.
//////////////////////////
토큰을 어디에 쓸지 범위를 선택하고 설명을 입력한다. 나중에 다 쓰고 삭제하기 쉽도록 이해하기 쉬운 설명을 다는 게 좋다.

//////////////////////////
GitHub will only show you the token once, so be sure to copy it. You can now use this to authenticate in your script instead of using a username and password. This is nice because you can limit the scope of what you want to do and the token is revokable.
//////////////////////////
토큰이 생성되면 복사해서 사용한다. 이제 스크립트에서 사용자 이름과 암호를 사용하지 않고 이 토큰을 사용할 수 있다. 토큰은 허용하는 범위가 제한돼 있고 언제든지 폐기할 수 있어서 좋다.

//////////////////////////
This also has the added advantage of increasing your rate limit. Without authenticating, you will be limited to 60 requests per hour. If you authenticate you can make up to 5,000 requests per hour.
//////////////////////////
인증을 하지 않으면 API 사용 횟수 제한이 매우 낮다. 인증을 하지 않으면 한 시간에 60번만 허용되지만, 인증을 하면 한 시간에 5,000번까지 허용된다.

//////////////////////////
So let's use it to make a comment on one of our issues. Let's say we want to leave a comment on a specific issue, Issue #6. To do so we have to do an HTTP POST request to `repos/<user>/<repo>/issues/<num>/comments` with the token we just generated as an Authorization header.
//////////////////////////
이제 이슈에 코멘트를 달아보자. #6 이슈에 코멘트를 달 거다. `repos/<user>/<repo>/issues/<num>/comments` 형식의 URL로 POST 요청을 보내는데 'Authorization' 헤더에 생성한 토큰을 넣어서 함께 보낸다.

[source,javascript]
----
$ curl -H "Content-Type: application/json" \
       -H "Authorization: token TOKEN" \
       --data '{"body":"A new comment, :+1:"}' \
       https://api.github.com/repos/schacon/blink/issues/6/comments
{
  "id": 58322100,
  "html_url": "https://github.com/schacon/blink/issues/6#issuecomment-58322100",
  ...
  "user": {
    "login": "tonychacon",
    "id": 7874698,
    "avatar_url": "https://avatars.githubusercontent.com/u/7874698?v=2",
    "type": "User",
  },
  "created_at": "2014-10-08T07:48:19Z",
  "updated_at": "2014-10-08T07:48:19Z",
  "body": "A new comment, :+1:"
}
----

//////////////////////////
Now if you go to that issue, you can see the comment that we just successfully posted as in <<_api_comment>>.
//////////////////////////
해당 이슈 페이지에 가면 코멘트를 확인할 수 있다. <<_api_comment>>처럼 잘 써진다.

[[_api_comment]]
//////////////////////////
.A comment posted from the GitHub API.
image::images/scripting-06-comment.png[API Comment]
//////////////////////////
.GitHub API로 쓴 코멘트.
image::images/scripting-06-comment.png[API 코멘트]

//////////////////////////
You can use the API to do just about anything you can do on the website -- creating and setting milestones, assigning people to Issues and Pull Requests, creating and changing labels, accessing commit data, creating new commits and branches, opening, closing or merging Pull Requests, creating and editing teams, commenting on lines of code in a Pull Request, searching the site and on and on.
//////////////////////////
웹사이트에서 할 수 있는 일은 전부 API로도 할 수 있다. 마일스톤을 만들고 설정하기, 사람들에게 이슈나 Pull Request를 할당하기, 레이블을 만들고 수정하기, 커밋 데이터 사용하기, 커밋을 하거나 브랜치 만들기, Pull Request를 만들고 닫고 Merge하기, 팀을 만들고 수정하기, Pull Request 코드에 코멘트하기, 사이트에서 검색하기 등등 다 된다.

//////////////////////////
==== Changing the Status of a Pull Request
//////////////////////////
==== Pull Request의 상태 변경하기

//////////////////////////
One final example we'll look at since it's really useful if you're working with Pull Requests. Each commit can have one or more statuses associated with it and there is an API to add and query that status.
//////////////////////////
우리가 살펴볼 마지막 예제는 Pull Request에 관한 것인데 굉장히 유용하다. 커밋은 하나 이상의 상태를 가질 수 있는데 API를 통해서 상태를 추가하거나 조회할 수 있다.

//////////////////////////
Most of the Continuous Integration and testing services make use of this API to react to pushes by testing the code that was pushed, and then report back if that commit has passed all the tests. You could also use this to check if the commit message is properly formatted, if the submitter followed all your contribution guidelines, if the commit was validly signed -- any number of things.
//////////////////////////
대부분의 CI나 테스팅 서비스들은 코드가 푸시되면 바로 테스트를 하고 나서 이 API를 사용한다. 커밋이 모든 테스트를 통과하면 리포트한다. 이 API로 커밋 메시지가 규칙에 맞게 작성됐지 리포트할 수 있다. 코드를 보낸 사람이 제대로 가이드라인을 지켰는지나 커밋에 제대로 서명했는지도 기록할 수 있다.

//////////////////////////
Let's say you set up a webhook on your repository that hits a small web service that checks for a `Signed-off-by` string in the commit message.
//////////////////////////
커밋 메시지에 `Signed-off-by`라는 스트링이 있는지 검사하는 웹 서비스를 만들어 보자. 먼저 저장소에 이 웹서비스를 호출하는 웹훅을 등록한다.

[source,ruby]
----
require 'httparty'
require 'sinatra'
require 'json'

post '/payload' do
  push = JSON.parse(request.body.read) # parse the JSON
  repo_name = push['repository']['full_name']

  # look through each commit message
  push["commits"].each do |commit|

    # look for a Signed-off-by string
    if /Signed-off-by/.match commit['message']
      state = 'success'
      description = 'Successfully signed off!'
    else
      state = 'failure'
      description = 'No signoff found.'
    end

    # post status to GitHub
    sha = commit["id"]
    status_url = "https://api.github.com/repos/#{repo_name}/statuses/#{sha}"

    status = {
      "state"       => state,
      "description" => description,
      "target_url"  => "http://example.com/how-to-signoff",
      "context"     => "validate/signoff"
    }
    HTTParty.post(status_url,
      :body => status.to_json,
      :headers => {
        'Content-Type'  => 'application/json',
        'User-Agent'    => 'tonychacon/signoff',
        'Authorization' => "token #{ENV['TOKEN']}" }
    )
  end
end
----

//////////////////////////
Hopefully this is fairly simple to follow. In this web hook handler we look through each commit that was just pushed, we look for the string 'Signed-off-by' in the commit message and finally we POST via HTTP to the `/repos/<user>/<repo>/statuses/<commit_sha>` API endpoint with the status.
//////////////////////////
이 웹훅 서비스는 별로 어렵지 않다. 누군가 Push하면 모든 커밋을 훑는데, 커밋 메시지에서 `Signed-off-by` 스트링을 찾는다. 그 결과의 상태를  `/repos/<user>/<repo>/statuses/<commit_sha>`라는 Endpoint 주소에 POST 요청으로 보낸다.

//////////////////////////
In this case you can send a state ('success', 'failure', 'error'), a description of what happened, a target URL the user can go to for more information and a ``context'' in case there are multiple statuses for a single commit. For example, a testing service may provide a status and a validation service like this may also provide a status -- the ``context'' field is how they're differentiated.
//////////////////////////
커밋의 상태는 'success', 'failure', 'error'일 수 있다. 커밋의 상태(state)와 설명(description), 자세한 정보를 확인할 수 있는 URL(target_url), 상태를 구분하는 ``컨텍스트(context)''를 함께 전송한다. 한 커밋에 대해서 테스팅 서비스도 어떤 상태를 보내올 것이고 검증 서비스도 어떤 상태를 보내올 것이라서 ``컨텍스트''가 필요하다.

//////////////////////////
If someone opens a new Pull Request on GitHub and this hook is setup, you may see something like <<_commit_status>>.
//////////////////////////
이 훅을 적용하고 나서 누군가 Pull Request를 새로 열면 <<_commit_status>>같은 상태 메시지를 보게 된다.

[[_commit_status]]
//////////////////////////
.Commit status via the API.
image::images/scripting-07-status.png[Commit status]
//////////////////////////
.API로 표기한 커밋 상태.
image::images/scripting-07-status.png[커밋 상태]

//////////////////////////
You can now see a little green check mark next to the commit that has a ``Signed-off-by'' string in the message and a red cross through the one where the author forgot to sign off. You can also see that the Pull Request takes the status of the last commit on the branch and warns you if it is a failure. This is really useful if you're using this API for test results so you don't accidentally merge something where the last commit is failing tests.
//////////////////////////
``Signed-off-by'' 스트링이 있는 커밋 메시지에는 녹색 체크 아이콘이 달리고 그렇지 않은 커밋에는 빨간 'X' 표시가 달린다. 그리고 Pull Request의 상태는 마지막 커밋의 상태를 보여주는데 상태가 'failure'면 경고해준다. 이 API를 사용해서 테스트 결과를 Pull Request에 리포트하는 것은 매우 유용하다. 테스트에 실패하는 커밋을 Merge하는 일을 미연에 방지할 수 있다.

==== Octokit

//////////////////////////
Though we've been doing nearly everything through `curl` and simple HTTP requests in these examples, several open-source libraries exist that make this API available in a more idiomatic way.
At the time of this writing, the supported languages include Go, Objective-C, Ruby, and .NET.
Check out http://github.com/octokit[] for more information on these, as they handle much of the HTTP for you.
//////////////////////////
이 책에서는 단순한 HTTP 요청을 보냈기 때문에 `curl`만 사용했다. 하지만, 더 편리하게 API를 사용할 수 있게 해주는 오픈소스 라이브러리가 있다.
이 책을 쓰는 시점에서는 Go와 Objective-C, Ruby, .NET을 지원한다.
자세한 정보는 http://github.com/octokit[]에 가서 확인하면 되고 이미 많은 기능을 지원한다.

//////////////////////////
Hopefully these tools can help you customize and modify GitHub to work better for your specific workflows.
For complete documentation on the entire API as well as guides for common tasks, check out https://developer.github.com[].
//////////////////////////
이 도구로 프로젝트가 요구하는 데로 GitHub의 Workflow를 최적화할 수 있다.
전체 API에 대한 구체적인 문서와 상황별 가이드는 https://developer.github.com[]에서 확인해야 한다.
