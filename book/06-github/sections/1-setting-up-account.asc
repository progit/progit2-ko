//////////////////////////
=== Account Setup and Configuration
//////////////////////////
=== 계정 만들고 설정하기

(((GitHub, user accounts)))
//////////////////////////
The first thing you need to do is set up a free user account.
Simply visit https://github.com[], choose a user name that isn't already taken, provide an email address and a password, and click the big green ``Sign up for GitHub'' button.
//////////////////////////
가장 먼저 할 일은 무료 사용자 계정을 만드는 일이다.
https://github.com[]에 방문해서 사용자 이름과 이메일 주소, 암호를 입력하고 ``Sign up for GitHub''이라는 큰 녹색 버튼을 누른다.

//////////////////////////
.The GitHub sign-up form.
image::images/signup.png[The GitHub sign-up form.]
//////////////////////////
.GitHub 가입 폼.
image::images/signup.png[GitHub 가입 폼.]

//////////////////////////
The next thing you'll see is the pricing page for upgraded plans, but it's safe to ignore this for now.
GitHub will send you an email to verify the address you provided.
Go ahead and do this, it's pretty important (as we'll see later).
//////////////////////////
다음 보이는 화면은 유료 옵션에 대한 안내 페이지인데, 지금은 무시한다.
GitHub은 입력한 이메일 주소로 확인 메일을 보냈을 것이다.
메일의 지시를 따르자. 나중에 살펴볼 테지만 이 과정은 매우 중요하다.

[NOTE]
//////////////////////////
====
GitHub provides all of its functionality with free accounts, with the limitation that all of your projects are fully public (everyone has read access).
GitHub's paid plans include a set number of private projects, but we won't be covering those in this book.
====
//////////////////////////
====
무료 계정도 GitHub 기능을 전부 사용할 수 있다. 딱 한 가지 제약이 있는데 모든 사람이 읽을 수 있는 공개 프로젝트만 만들 수 있다.
GitHub에 돈을 내면 비공개 프로젝트도 만들 수 있지만, 이 책에서 설명하지 않는다.
====

//////////////////////////
Clicking the Octocat logo at the top-left of the screen will take you to your dashboard page.
You're now ready to use GitHub.
//////////////////////////
화면 왼쪽 꼭대기에 있는 Octocat 로고를 클릭하면 대시보드 페이지로 이동한다.
이제 GitHub을 사용할 준비가 된 것이다.

//////////////////////////
==== SSH Access
//////////////////////////
==== SSH 사용하기

(((SSH keys, with GitHub)))
//////////////////////////
As of right now, you're fully able to connect with Git repositories using the `https://` protocol, authenticating with the username and password you just set up.
However, to simply clone public projects, you don't even need to sign up - the account we just created comes into play when we fork projects and push to our forks a bit later.
//////////////////////////
이제는 `https://` 프로토콜로도 Git 저장소를 사용하는 데 부족함이 없다. 간단히 사용자 이름과 암호로 인증만 하면 된다.
공개 프로젝트를 Clone하는 데는 인증도 필요 없다. 우리가 만든 계정은 프로젝트를 Fork하고 그 프로젝트에 Push할 때가 돼야 비로소 필요하다.

//////////////////////////
If you'd like to use SSH remotes, you'll need to configure a public key.
(If you don't already have one, see <<_generate_ssh_key>>.)
Open up your account settings using the link at the top-right of the window:
//////////////////////////
SSH 리모트를 쓰려면 공개키를 설정해야 한다.
(아직 공개키가 없으면 <<_generate_ssh_key>>를 참고)
아래 윈도우의 오른쪽 꼭대기에 있는 계정 설정 링크를 클릭하자.

//////////////////////////
.The ``Account settings'' link.
image::images/account-settings.png[The ``Account settings'' link.]
//////////////////////////
.``계정 설정'' 링크.
image::images/account-settings.png[``계정 설정'' 링크.]

//////////////////////////
Then select the ``SSH keys'' section along the left-hand side.
//////////////////////////
그 왼쪽 메뉴에서 ``SSH keys''를 선택한다.

//////////////////////////
.The ``SSH keys'' link.
image::images/ssh-keys.png[The ``SSH keys'' link.]
//////////////////////////
.``SSH keys'' 링크.
image::images/ssh-keys.png[``SSH keys'' 링크.]

//////////////////////////
From there, click the "`Add an SSH key`" button, give your key a name, paste the contents of your `~/.ssh/id_rsa.pub` (or whatever you named it) public-key file into the text area, and click ``Add key''.
//////////////////////////
여기서 ``Add an SSH key'' 버튼을 클릭한다. 키 이름을 적당히 입력하고 `~/.ssh/id_rsa.pub` 파일의 내용을 입력 칸에 복사해 넣는다. 그리고 ``Add key'' 버튼을 클릭한다.

[NOTE]
//////////////////////////
====
Be sure to name your SSH key something you can remember. You can name each of your keys (eg, "My Laptop" or "Work Account") so that if you need to revoke a key later, you can easily tell which one you're looking for.
====
//////////////////////////
====
SSH key 이름은 기억하기 쉬운 걸로 짓는다. "내 노트북"이나 "회사 계정"같이 구분하기 쉬운 이름으로 짓는다. 나중에 키를 삭제할 때 헷갈리지 않고 바로 알 수 있도록 짓는 것이 중요하다.
====

[[_personal_avatar]]
//////////////////////////
==== Your Avatar
//////////////////////////
==== 아바타

//////////////////////////
Next, if you wish, you can replace the avatar that is generated for you with an image of your choosing. First go to the ``Profile'' tab (above the SSH Keys tab) and click ``Upload new picture''.
//////////////////////////
자동으로 생성해준 아바타를 다른 아바타로 바꿀 수도 있다. ``SSh Keys'' 탭 위에 있는 ``Profile'' 탭으로 가서 ``Upload new picture''를 클릭한다.

//////////////////////////
.The ``Profile'' link.
image::images/your-profile.png[The ``Profile'' link.]
//////////////////////////
.``Profile'' 링크.
image::images/your-profile.png[``Profile'' 링크.]

//////////////////////////
We'll chose a copy of the Git logo that is on our hard drive and then we get a chance to crop it.
//////////////////////////
여기서는 여러분의 하드디스크에 있을 Git 로고를 선택하고 필요한 만큼 자른다.

//////////////////////////
.Crop your avatar
image::images/avatar-crop.png[Crop your uploaded avatar.]
//////////////////////////
.아바타 자르기.
image::images/avatar-crop.png[아바타 자르기.]

//////////////////////////
Now anywhere you interact on the site, people will see your avatar next to your username.
//////////////////////////
이제부터 GitHub 사이트에서 어디에서든 사용자 이름 옆에 아바타가 보인다.

//////////////////////////
If you happen to have uploaded an avatar to the popular Gravatar service (often used for Wordpress accounts), that avatar will be used by default and you don't need to do this step.
//////////////////////////
Gravatar 서비스에 아바타를 업로드 한 적이 있으면 자동으로 그 아바타가 사용되고 지금 이 단계를 밟을 필요가 없다.

//////////////////////////
==== Your Email Addresses
//////////////////////////
==== 사용자 이메일 주소

//////////////////////////
The way that GitHub maps your Git commits to your user is by email address. If you use multiple email addresses in your commits and you want GitHub to link them up properly, you need to add all the email addresses you have used to the Emails section of the admin section.
//////////////////////////
Github은 Git 커밋에 있는 이메일 주소를 보고 어떤 사용자인지 식별한다. 사용자가 이메일 주소를 여러 개 사용해서 커밋했어도 GitHub에 그 이메일을 모두 등록하기만 했으면 GitHub은 잘 처리한다. ``Emails'' 화면에서 모두 등록한다.

[[_add_email_addresses]]
//////////////////////////
.Add email addresses
image::images/email-settings.png[Add all your email addresses.]
//////////////////////////
.이메일 주소 추가하기.
image::images/email-settings.png[이메일 주소를 전부 추가하기.]

//////////////////////////
In <<_add_email_addresses>> we can see some of the different states that are possible. The top address is verified and set as the primary address, meaning that is where you'll get any notifications and receipts. The second address is verified and so can be set as the primary if you wish to switch them. The final address is unverified, meaning that you can't make it your primary address. If GitHub sees any of these in commit messages in any repository on the site, it will be linked to your user now.
//////////////////////////
<<_add_email_addresses>>의 이메일 주소는 각각 다른 상태다. 첫 번째 주소는 주(Primary) 주소고 이미 확인됐다. 알림이나 영수증 메일은 주 주소로 간다. 두 번째 주소는 확인한 상태라서 주 주소로 바꿀 수 있는 상태다. 마지막 주소는 아직 확인되지 않아 주 주소로 변경할 수 없다. GitHub은 저장소의 커밋 메시지에 이 주소 세 개 중의 하나가 있으면 해당 사용자 계정 페이지로 링크를 걸어준다.

//////////////////////////
==== Two Factor Authentication
//////////////////////////
==== 투 팩터 인증

//////////////////////////
Finally, for extra security, you should definitely set up Two-factor Authentication or ``2FA''. Two-factor Authentication is an authentication mechanism that is becoming more and more popular recently to mitigate the risk of your account being compromised if your password is stolen somehow. Turning it on will make GitHub ask you for two different methods of authentication, so that if one of them is compromised, an attacker will not be able to access your account.
//////////////////////////
더 안전한 보안을 위해서 ``2FA''(2 팩터 인증)을 설정한다. 2FA는 최근 들어 인기가 높아지는 인증 메커니즘이다. 암호를 도둑맞았을 때 위험을 완화하기 위해 사용한다. 2FA를 켜면 GitHub은 두 가지 방법으로 인증받도록 요구한다. 둘 중 한 가지 방법만 뚫려서는 공격자가 계정에 접근할 수 없다.

//////////////////////////
You can find the Two-factor Authentication setup under the Security tab of your Account settings.
//////////////////////////
2FA 설정 화면은 계정 설정 페이지의 Security tab에 있다.

//////////////////////////
.2FA in the Security Tab
image::images/2fa-1.png[2FA in the Security Tab]
//////////////////////////
.Security 탭에 있는 2FA
image::images/2fa-1.png[Security 탭에 있는 2FA]

//////////////////////////
If you click on the ``Set up two-factor authentication'' button, it will take you to a configuration page where you can choose to use a phone app to generate your secondary code (a ``time based one-time password''), or you can have GitHub send you a code via SMS each time you need to log in.
//////////////////////////
``Set up two-factor authentication'' 버튼을 클릭하면 2FA 설정 페이지로 이동한다. ``TOTP(Time based One-Time Password)''를 생성하는 스마트폰 앱을 사용하는 방식을 고르거나 GitHub이 인증 코드를 SMS로 전송해주는 방식을 고를 수 있다. 설정하면 로그인할 때 TOTP나 인증코드가 필요하다.

//////////////////////////
After you choose which method you prefer and follow the instructions for setting up 2FA, your account will then be a little more secure and you will have to provide a code in addition to your password whenever you log into GitHub.
//////////////////////////
마음에 드는 인증 방법을 고르고 지시에 따라 2FA를 설정한다. GitHub에 로그인할 때마다 한 가지 코드를 더 입력해야 한다. 이제 계정은 좀 더 안전해졌다.
