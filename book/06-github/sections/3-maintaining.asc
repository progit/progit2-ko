[[_maintaining_gh_project]]
//////////////////////////
=== Maintaining a Project
//////////////////////////
=== 프로젝트 관리하기

//////////////////////////
Now that we're comfortable contributing to a project, let's look at the other side: creating, maintaining and administering your own project.
//////////////////////////
지금까지 남의 프로젝트에 기여하는 법을 살펴보았고 이번에는 직접 프로젝트를 운영하는 법을 살펴보자. 프로젝트를 생성해서 관리하는 방식 말이다.

//////////////////////////
==== Creating a New Repository
//////////////////////////
==== 새 저장소 만들기

//////////////////////////
Let's create a new repository to share our project code with.
Start by clicking the ``New repository'' button on the right-hand side of the dashboard, or from the `+` button in the top toolbar next to your username as seen in <<_new_repo_dropdown>>.
//////////////////////////
저장소를 새로 만들고 프로젝트 코드를 공유해 보자.
대시보드 오른쪽에 있는 ``New repository'' 버튼을 클릭하면 저장소를 만드는 폼으로 이동한다. 맨 위 툴바의 사용자이름 옆에 있는 `+` 버튼을 클릭해도 된다.

//////////////////////////
.The ``Your repositories'' area.
image::images/newrepo.png[The ``Your repositories'' area.]
//////////////////////////
.``Your repositories'' 박스.
image::images/newrepo.png[``Your repositories'' 박스.]

[[_new_repo_dropdown]]
//////////////////////////
.The ``New repository'' dropdown.
image::images/new-repo.png[The ``new repository'' dropdown.]
//////////////////////////
.사용자이름 옆 ``New repository'' 메뉴.
image::images/new-repo.png[사용자 이름 옆 ``new repository'' 메뉴.]

//////////////////////////
This takes you to the ``new repository'' form:
//////////////////////////
위 버튼을 누르면 ``새 저장소''를 만드는 화면으로 이동한다.

//////////////////////////
.The ``new repository'' form.
image::images/newrepoform.png[The ``new repository'' form.]
//////////////////////////
.``새 저장소'' 만들기.
image::images/newrepoform.png[``새 저장소'' 만들기.]

//////////////////////////
All you really have to do here is provide a project name; the rest of the fields are completely optional.
For now, just click the ``Create Repository'' button, and boom – you have a new repository on GitHub, named `<user>/<project_name>`.
//////////////////////////
꼭 해야 하는 것은 프로젝트 이름을 넣는 것뿐이다. 다른 것은 생략해도 된다.
``Create Repository'' 버튼을 클릭하면 '뿅'하고  `<user>/<project_name>` 위치에 GitHub 저장소가 생긴다.

//////////////////////////
Since you have no code there yet, GitHub will show you instructions for how create a brand-new Git repository, or connect an existing Git project.
We won't belabor this here; if you need a refresher, check out <<_git_basics_chapter>>.
//////////////////////////
아직 저장소에 코드가 하나도 없어서, GitHub은 Git 저장소를 만드는 방법이나 기존 Git 프로젝트를 넣는 방법을 보여준다.
이 내용을 다시 살펴보고 싶다면 <<_git_basics_chapter>>를 보라. 여기서 또 설명하지 않는다.

//////////////////////////
Now that your project is hosted on GitHub, you can give the URL to anyone you want to share your project with.
Every project on GitHub is accessible over HTTP as `https://github.com/<user>/<project_name>`, and over SSH as `git@github.com:<user>/<project_name>`.
Git can fetch from and push to both of these URLs, but they are access-controlled based on the credentials of the user connecting to them.
//////////////////////////
GitHub에 프로젝트를 올렸으면 다른 사람들에게 프로젝트 URL을 알려주고 공유할 수 있다.
모든 프로젝트의 HTTL URL은 `https://github.com/<user>/<project_name>`처럼 생겼고 SSH는 `git@github.com:<user>/<project_name>`처럼 생겼다.
Git은 이 두 URL을 통해서 Fetch하고 Push할 수 있지만, 인증 방식은 사용하는 프로토콜에 따라 다르다.

[NOTE]
//////////////////////////
====
It is often preferable to share the HTTP based URL for a public project, since the user does not have to have a GitHub account to access it for cloning. Users will have to have an account and an uploaded SSH key to access your project if you give them the SSH URL. The HTTP one is also exactly the same URL they would paste into a browser to view the project there.
====
//////////////////////////
====
GitHub 계정 없이 Clone할 수 있기 때문에 공개 프로젝트를 공유할 때는 SSH보다 HTTP URL를 더 많이 공유한다. SSH URL을 사용하려면 계정도 있어야 하고 SSH 키도 GitHub에 등록해야 한다. 브라우저에서 프로젝트 페이지에 접속할 때도 저장소 URL로 사용하는 HTTP URL을 그대로 사용한다.
====

//////////////////////////
==== Adding Collaborators
//////////////////////////
==== 동료 추가하기

//////////////////////////
If you're working with other people who you want to give commit access to, you need to add them as ``collaborators''.
If Ben, Jeff, and Louise all sign up for accounts on GitHub, and you want to give them push access to your repository, you can add them to your project.
Doing so will give them ``push'' access, which means they have both read and write access to the project and Git repository.
//////////////////////////
저장소에 커밋 권한을 주고 싶은 동료가 있으면 ``Collaborator''로 추가해야 한다.
Ben과 Jeff, Louise라는 동료가 있는데 그들이 내 저장소에 Push할 수 있도록 하고 싶으면 내 프로젝트에 GitHub 계정들을 추가해야 한다.
계정이 추가된 사람은 해당 프로젝트와 Git 저장소에 ``Push''할 수 있을 뿐만 아니라 읽고 쓰기도 가능하다.

//////////////////////////
Click the ``Settings'' link at the bottom of the right-hand sidebar.
//////////////////////////
오른쪽 밑에 있는 ``Settings`` 링크를 클릭한다.

//////////////////////////
.The repository settings link.
image::images/reposettingslink.png[The repository settings link.]
//////////////////////////
.저장소 설정 링크.
image::images/reposettingslink.png[저장소 설정 링크.]

//////////////////////////
Then select ``Collaborators'' from the menu on the left-hand side.
Then, just type a username into the box, and click ``Add collaborator.''
You can repeat this as many times as you like to grant access to everyone you like.
If you need to revoke access, just click the ``X'' on the right-hand side of their row.
//////////////////////////
왼쪽 메뉴에서 ``Collaborators''를 선택한다.
텍스트 박스에 사용자이름을 입력하고 ``Add collaborator''를 클릭한다.
필요한 사람을 모두 추가할 때까지 반복한다.
그리고 오른쪽에 있는 ``X''를 클릭하면 권한이 회수된다.

//////////////////////////
.Repository collaborators.
image::images/collaborators.png[The repository collaborators box.]
//////////////////////////
.저장소의 동료.
image::images/collaborators.png[저장소의 동료.]

//////////////////////////
==== Managing Pull Requests
//////////////////////////
==== Pull Request 관리하기

//////////////////////////
Now that you have a project with some code in it and maybe even a few collaborators who also have push access, let's go over what to do when you get a Pull Request yourself.
//////////////////////////
프로젝트를 만들고 코드도 넣고 동료가 Push할 수 있게 하였다. 이제 Pull Reqeust가 왔을 때 어떻게 해야 하는지 보자.

//////////////////////////
Pull Requests can either come from a branch in a fork of your repository or they can come from another branch in the same repository. The only difference is that the ones in a fork are often from people where you can't push to their branch and they can't push to yours, whereas with internal Pull Requests generally both parties can access the branch.
//////////////////////////
Pull Request는 같은 저장소나 Fork한 저장소에서 브랜치를 보내오는 것이다. 그 둘의 차이는 권한에 있다. Fork한 저장소는 다른 사람의 저장소이기 때문에 그 보내온 브랜치에 Push할 권한이 없다. 하지만, 같은 저장소의 브랜치에는 Push할 수 있다.

//////////////////////////
For these examples, let's assume you are ``tonychacon'' and you've created a new Arudino code project named ``fade''.
//////////////////////////
``tonychacon''이라는 사람이 ``fade''라는 Arduino 프로젝트를 만든 상황을 살펴보자.

[[_email_notifications]]
//////////////////////////
===== Email Notifications
//////////////////////////
===== 이메일 알림

//////////////////////////
Someone comes along and makes a change to your code and sends you a Pull Request. You should get an email notifying you about the new Pull Request and it should look something like <<_email_pr>>.
//////////////////////////
어떤 사람이 코드를 수정해서 Pull Request를 보내왔다. 그러면 새로운 Pull Request가 왔다는 메일이 담당자에게 간다. <<_email_pr>> 같은 메일이 보내진다.

[[_email_pr]]
//////////////////////////
.Email notification of a new Pull Request.
image::images/maint-01-email.png[Pull Request email notification]
//////////////////////////
.새 Pull Request에 대한 이메일 알림.
image::images/maint-01-email.png[Pull Request 이메일 알림]

//////////////////////////
There are a few things to notice about this email. It will give you a small diffstat -- a list of files that have changed in the Pull Request and by how much. It gives you a link to the Pull Request on GitHub. It also gives you a few URLs that you can use from the command line.
//////////////////////////
이 이메일은 무엇이 달라진 것인지 간략히 보여준다. 해당 Pull Request에서 어떤 파일이 얼마나 변경됐는지 보여준다. 그리고 Pull Request 페이지 링크도 있고 CLI로 Merge하는 방법과 URL도 간략히 보여준다.

//////////////////////////
If you notice the line that says `git pull <url> patch-1`, this is a simple way to merge in a remote branch without having to add a remote. We went over this quickly in <<_checking_out_remotes>>. If you wish, you can create and switch to a topic branch and then run this command to merge in the Pull Request changes.
//////////////////////////
`git pull <url> patch-1`라는 명령이 궁금할 텐데 이렇게 하면 리모트 브랜치를 간단히 Merge할 수 있다. 저장소를 리모트로 추가하지 않아도 된다. 필요하면 토픽 브랜치를 만들고 <<_checking_out_remotes>>에서 배운 명령어로 Pull Request로 직접 Merge해도 된다.

//////////////////////////
The other interesting URLs are the `.diff` and `.patch` URLs, which as you may guess, provide unified diff and patch versions of the Pull Request. You could technically merge in the Pull Request work with something like this:
//////////////////////////
그리고 눈치챘을 테지만 `.diff`와 `.patch` URL은 Pull Request의 'Unified Diff'와 Patch 버전의 URL이다. 이 URL로 아래와 같이 Pull Request를 Merge할 수 있다.

[source,shell]
----
$ curl http://github.com/tonychacon/fade/pull/1.patch | git am
----

//////////////////////////
===== Collaborating on the Pull Request
//////////////////////////
===== Pull Request로 함께 일하기.

//////////////////////////
As we covered in <<_github_flow>>, you can now have a conversation with the person who opened the Pull Request. You can comment on specific lines of code, comment on whole commits or comment on the entire Pull Request itself, using GitHub Flavored Markdown everywhere.
//////////////////////////
<<_github_flow>>에서 설명했듯이 Pull Request를 만든 사람과 토론할 수 있다. 코멘트를 Pull Request에 대고 남길 수도 있고 특정 커밋을 고르거나 특정 라인을 집어서 남길 수도 있다.

//////////////////////////
Every time someone else comments on the Pull Request you will continue to get email notifications so you know there is activity happening. They will each have a link to the Pull Request where the activity is happening and you can also directly respond to the email to comment on the Pull Request thread.
//////////////////////////
일단 대화에 참여하고 나면 누군가 코멘트할 때마다 이메일 알림이 계속 온다. 그 이메일에는 Pull Request 페이지의 링크가 포함돼 있기 때문에 어떤 일이 일어나고 있는지 쉽게 알 수 있다. 그리고 답 메일을 보내면 Pull Request의 코멘트로 달린다.

//////////////////////////
.Responses to emails are included in the thread.
image::images/maint-03-email-resp.png[Email response]
//////////////////////////
.답변 메일이 Pull Request의 스레드가 된다.
image::images/maint-03-email-resp.png[답 메일]

//////////////////////////
Once the code is in a place you like and want to merge it in, you can either pull the code down and merge it locally, either with the `git pull <url> <branch>` syntax we saw earlier, or by adding the fork as a remote and fetching and merging.
//////////////////////////
보내온 코드가 마음에 들어서 Merge하고 싶다면 로컬에 가져와서 Merge할 수 있다. `git pull <url> <branch>` 명령으로 Merge하면 되는데 먼저 Fork한 저장소를 리모트로 추가하고 Fetch해서 Merge한다.

//////////////////////////
If the merge is trivial, you can also just hit the ``Merge'' buton on the GitHub site. This will do a ``non-fast-forward'' merge, creating a merge commit even if a fast-forward merge was possible. This means that no matter what, every time you hit the merge button, a merge commit is created. As you can see in <<_merge_button>>, GitHub gives you all of this information if you click the hint link.
//////////////////////////
GitHub 사이트에서 ``Merge'' 버튼을 누르는 것으로 간편하게 Merge할 수 있다(Trivial Merge). ``fast-forward''가 가능할 때에도 ``fast-forward'' Merge를 하지 않기 때문에 Merge 커밋이 생긴다. 그래서 ``Merge'' 버튼을 클릭해서 Merge하면 항상 Merge 커밋이 생긴다. 여기서 어떻게 해야 할지는 'command line' 힌트 링크를 클릭하면 <<_merge_button>>과 같이 알려준다.

[[_merge_button]]
//////////////////////////
.Merge button and instructions for merging a Pull Request manually.
image::images/maint-02-merge.png[Merge button]
//////////////////////////
.Merge 버튼과 Pull Request를 수동으로 Merge하는 방법.
image::images/maint-02-merge.png[Merge 버튼]

//////////////////////////
If you decide you don't want to merge it, you can also just close the Pull Request and the person who opened it will be notified.
//////////////////////////
만약 Pull Request를 Merge하지 않기로 했다면 그냥 닫으면 된다. 그러면 그 Pull Request를 보낸 사람에게 알림이 간다.

[[_pr_refs]]
//////////////////////////
===== Pull Request Refs
//////////////////////////
===== Pull Request의 Ref

//////////////////////////
If you're dealing with a *lot* of Pull Requests and don't want to add a bunch of remotes or do one time pulls every time, there is a neat trick that GitHub allows you to do. This is a bit of an advanced trick and we'll go over the details of this a bit more in <<_refspec>>, but it can be pretty useful.
//////////////////////////
일일이 리모트를 등록하고 Pull하는 것은 Pull Request를 많이 처리하는 사람에게는 고통스럽다. GitHub은 이럴 때 사용하는 방법을 제공한다. 이 내용은 <<_refspec>>에서 자세히 설명할 거고 조금 어려울 수 있다.

//////////////////////////
GitHub actually advertises the Pull Request branches for a repository as sort of pseudo-branches on the server. By default you don't get them when you clone, but they are there in an obscured way and you can access them pretty easily.
//////////////////////////
GitHub은 Pull Request의 브랜치를 서버에 있는 가상 브랜치로 노출해준다. GitHub이 자동으로 해주기 때문에 바로 이용하면 된다.

//////////////////////////
To demonstrate this, we're going to use a low-level command (often referred to as a ``plumbing'' command, which we'll read about more in <<_plumbing_porcelain>>) called `ls-remote`. This command is generally not used in day-to-day Git operations but it's useful to show us what references are present on the server.
//////////////////////////
이걸 해보려면 저수준(``plumbing'') 명령어인 `ls-remote`가 필요하다. 이 명령어는 아무래도 매일 쓰는 명령어는 아니지만, 서버에 어떤 Ref가 있는지 보여 준다. ``plumbing'' 명령어는 <<_plumbing_porcelain>>에서 자세히 설명한다.

//////////////////////////
If we run this command against the ``blink'' repository we were using earlier, we will get a list of all the branches and tags and other references in the repository.
//////////////////////////
이 명령어로 좀 전의 ``blink'' 저장소를 살펴보자. 저장소 브랜치뿐만 아니라 태그 등 온갖 Ref를 보여준다.

[source,shell]
----
$ git ls-remote https://github.com/schacon/blink
10d539600d86723087810ec636870a504f4fee4d	HEAD
10d539600d86723087810ec636870a504f4fee4d	refs/heads/master
6a83107c62950be9453aac297bb0193fd743cd6e	refs/pull/1/head
afe83c2d1a70674c9505cc1d8b7d380d5e076ed3	refs/pull/1/merge
3c8d735ee16296c242be7a9742ebfbc2665adec1	refs/pull/2/head
15c9f4f80973a2758462ab2066b6ad9fe8dcf03d	refs/pull/2/merge
a5a7751a33b7e86c5e9bb07b26001bb17d775d1a	refs/pull/4/head
31a45fc257e8433c8d8804e3e848cf61c9d3166c	refs/pull/4/merge
----

//////////////////////////
Of course, if you're in your repository and you run `git ls-remote origin` or whatever remote you want to check, it will show you something similar to this.
//////////////////////////
저장소 안이라면 `git ls-remote origin`이라고 실행시켜도 된다. 저장된 리모트 이름을 사용할 수 있다.

//////////////////////////
If the repository is on GitHub and you have any Pull Requests that have been opened, you'll get these references that are prefixed with `refs/pull/`. These are basically branches, but since they're not under `refs/heads/` you don't get them normally when you clone or fetch from the server -- the process of fetching ignores them normally.
//////////////////////////
GitHub에 있는 저장소에 열려 있는 Pull Reqeust가 있으면 `refs/pull/`로 시작하는 이름으로 Ref가 생성된다. 이것도 브랜치지만 `refs/heads/`로 시작하는 브랜치와는 달리 Clone과 Fetch할 때 받아지지 않는다. 기본적으로 무시된다.

//////////////////////////
There are two references per Pull Request - the one that ends in `/head` points to exactly the same commit as the last commit in the Pull Request branch. So if someone opens a Pull Request in our repository and their branch is named `bug-fix` and it points to commit `a5a775`, then in *our* repository we will not have a `bug-fix` branch (since that's in their fork), but we _will_ have `pull/<pr#>/head` that points to `a5a775`. This means that we can pretty easily pull down every Pull Request branch in one go without having to add a bunch of remotes.
//////////////////////////
Pull Request에는 두 종류의 Ref가 있다. `/head`로 끝나는 것은 Pull Request 브랜치가 가리키는 마지막 커밋이다. 누군가 우리 저장소에 `bug-fix`라는 브랜치를 Pull Request로 보내는 상황을 살펴보자. 이 브랜치는 `a5a775` 커밋을 가리킨다. `bug-fix` 브랜치는 Fork한 저장소에 있는 브랜치라서 우리 저장소에 없다. 하지만 `a5a775`를 가리키는 `pull/<pr#>/head` 형식의 브랜치가 자동으로 생긴다. 그래서 매번 다른 저장소를 리모트로 등록하지 않고서도 Pull Request 브랜치를 쉽게 Pull할 수 있다.

//////////////////////////
Now, you could do something like fetching the reference directly.
//////////////////////////
그 브랜치를 한번 가져와 보자.

[source,shell]
----
$ git fetch origin refs/pull/958/head
From https://github.com/libgit2/libgit2
 * branch            refs/pull/958/head -> FETCH_HEAD
----

//////////////////////////
This tells Git, ``Connect to the `origin` remote, and download the ref named `refs/pull/958/head`.''
Git happily obeys, and downloads everything you need to construct that ref, and puts a pointer to the commit you want under `.git/FETCH_HEAD`.
You can follow that up with `git merge FETCH_HEAD` into a branch you want to test it in, but that merge commit message looks a bit weird.
Also, if you're reviewing a *lot* of pull requests, this gets tedious.
//////////////////////////
``리모트의 브랜치 `origin`을 `refs/pull/958/head`로 Fetch한다''는 뜻이다.
Git은 충실하게 전부 내려받고 마지막 커밋을 `.git/FETCH_HEAD`에 저장한다.
`git merge FETCH_HEAD`으로 Merge해서 테스트할 수 있다. 이렇게 Merge하면 Merge 커밋 메시지가 특이해지고 많은 Pull Request를 처리해야 하면 쓸데없는 Merge 커밋도 많이 생긴다.

//////////////////////////
There's also a way to fetch _all_ of the pull requests, and keep them up to date whenever you connect to the remote.
Open up `.git/config` in your favorite editor, and look for the `origin` remote.
It should look a bit like this:
//////////////////////////
항상 Pull Request를 _전부_ 가져오게 할 수 있다.
`.git/config` 파일을 열어서 `origin` 리모트를 찾는다.
`origin` 리모트는 사실 아래와 같은 것을 의미한다.

----
[remote "origin"]
    url = https://github.com/libgit2/libgit2
    fetch = +refs/heads/*:refs/remotes/origin/*
----

//////////////////////////
That line that begins with `fetch =` is a ``refspec.''
It's a way of mapping names on the remote with names in your local `.git` directory.
This particular one tells Git, "the things on the remote that are under `refs/heads` should go in my local repository under `refs/remotes/origin`."
You can modify this section to add another refspec:
//////////////////////////
`fetch =`로 시작하는 줄이 ``refspec.''이라는 거다.
리모트 이름과 로컬 `.git` 디렉토리를 어떻게 매핑하는지 나타낸다.
여기서는 해당 리모트에서 `refs/heads`에 해당하는 이름이 `refs/remotes/origin` 디렉토리에 매핑된다는 의미다.
Refspec을 새로 추가해보자.

----
[remote "origin"]
    url = https://github.com/libgit2/libgit2.git
    fetch = +refs/heads/*:refs/remotes/origin/*
    fetch = +refs/pull/*/head:refs/remotes/origin/pr/*
----

//////////////////////////
That last line tells Git, ``All the refs that look like `refs/pull/123/head` should be stored locally like `refs/remotes/origin/pr/123`.''
Now, if you save that file, and do a `git fetch`:
//////////////////////////
추가한 마지막 줄의 의미는 `` `refs/pull/123/head` 같은 Ref를 `refs/remotes/origin/pr/123`에 저장'' 한다는 의미다.
`git fetch`라고 실행하면 새 Refspec의 브랜치도 가져온다.

[source,shell]
----
$ git fetch
# …
 * [new ref]         refs/pull/1/head -> origin/pr/1
 * [new ref]         refs/pull/2/head -> origin/pr/2
 * [new ref]         refs/pull/4/head -> origin/pr/4
# …
----

//////////////////////////
Now all of the remote pull requests are represented locally with refs that act much like tracking branches; they're read-only, and they update when you do a fetch.
This makes it super easy to try the code from a pull request locally:
//////////////////////////
서버에 있는 모든 Pull Request을 추적하는 트래킹 브린치가 생겼다. 쓰기는 불가능하지만 계속 Fetch해 올 수 있다.
이렇게 하면 Pull Request를 로컬에 가져와서 작업하는 게 편해진다.

[source,shell]
----
$ git checkout pr/2
Checking out files: 100% (3769/3769), done.
Branch pr/2 set up to track remote branch pr/2 from origin.
Switched to a new branch 'pr/2'
----

//////////////////////////
The eagle-eyed among you would note the `head` on the end of the remote portion of the refspec.
There's also a `refs/pull/#/merge` ref on the GitHub side, which represents the commit that would result if you push the ``merge'' button on the site. This can allow you to test the merge before even hitting the button.
//////////////////////////
`head`로 끝나는 Refspec에 대해서 살펴봤고 `refs/pull/#/merge` 처럼 생긴 것을 알아보자. 이 브랜치는 GitHub에서 Merge 버튼으로 Merge했을 때 적용되는 결과다. GitHub에서 실제로 Merge하기 전에 로컬로 가져와서 먼저 테스트할 수 있다.

//////////////////////////
===== Pull Requests on Pull Requests
//////////////////////////
===== Pull Request 이어가기

//////////////////////////
Not only can you open Pull Requests that target the main or `master` branch, you can actually open a Pull Request targeting any branch in the network. In fact, you can even target another Pull Request.
//////////////////////////
Pull Request를 Merge할 브랜치는 `master`가 아니어도 된다. 주 브랜치를 고를 수도 있고 Pull Request를 열 때 다른 브랜치를 골라도 된다. 심지어 다른 Pull Request를 고를 수도 있다.

//////////////////////////
If you see a Pull Request that is moving in the right direction and you have an idea for a change that depends on it or you're not sure is a good idea, or you just don't have push access to the target branch, you can open a Pull Request directly to it.
//////////////////////////
착착 잘 진행하는 어떤 Pull Request가 있는데 거기에 뭔가 아이디어를 더하고 싶다는 생각이 들었다. 좋은 아이디어라는 확신도 부족하고 무엇보다 Merge될 브랜치에 Push 권한이 없다. 이럴 땐 Pull Request에 Pull Request를 보낼 수 있다.

//////////////////////////
When you go to open a Pull Request, there is a box at the top of the page that specifies which branch you're requesting to pull to and which you're requesting to pull from. If you hit the ``Edit'' button at the right of that box you can change not only the branches but also which fork.
//////////////////////////
Pull Request를 만들러 가면 페이지 위쪽에 어떤 저장소의 브랜치를 어떤 저장소의 브랜치로 요청하는 것인지를 보여주는 박스가 있다. ``Edit'' 버튼을 누르면 Fork한 저장소 중 하나로 저장소를 변경하고 해당 저장소의 브랜치로 변경할 수 있다.

[[_pr_targets]]
//////////////////////////
.Manually change the Pull Request target fork and branch.
image::images/maint-04-target.png[PR targets]
//////////////////////////
.Pull Request을 어디로 보낼지 고른다.
image::images/maint-04-target.png[PR의 대상 브랜치]

//////////////////////////
Here you can fairly easily specify to merge your new branch into another Pull Request or another fork of the project.
//////////////////////////
쉽게 다른 Fork 저장소나 Pull Request의 브랜치를 골라 Pull Request를 열 수 있다.

//////////////////////////
==== Mentions and Notifications
//////////////////////////
==== 멘션과 알림

//////////////////////////
GitHub also has a pretty nice notifications system built in that can come in handy when you have questions or need feedback from specific individuals or teams.
//////////////////////////
어떤 팀이나 사람에게 질문하거나 피드백을 받고 싶을 때 GitHub의 알림 시스템이 쉽고 편하다.

//////////////////////////
In any comment you can start typing a `@` character and it will begin to autocomplete with the names and usernames of people who are collaborators or contributors in the project.
//////////////////////////
GitHub 어디에서나 `@`만 입력해도 동료나 기여자의 사용자 이름이 자동완성 된다.

//////////////////////////
.Start typing @ to mention someone.
image::images/maint-05-mentions.png[Mentions]
//////////////////////////
.`@`만 입력.
image::images/maint-05-mentions.png[멘션]

//////////////////////////
You can also mention a user who is not in that dropdown, but often the autocompleter can make it faster.
//////////////////////////
자동완성 메뉴에 없는 사람도 입력할 수 있지만, 자동완성이 편하고 빠르다.

//////////////////////////
Once you post a comment with a user mention, that user will be notified. This means that this can be a really effective way of pulling people into conversations rather than making them poll. Very often in  Pull Requests on GitHub people will pull in other people on their teams or in their company to review an Issue or Pull Request.
//////////////////////////
GitHub에서 글을 쓸 때 `@멘션`을 하면 해당 사용자에게 알림이 간다. 일일이 의견을 물으러 다니는 것보다 이렇게 토론에 참여시키는 게 훨씬 유용하다.
GitHub에서는 멘션으로 팀의 동료나 다른 사람을 이슈나 Pull Request에 참여시킨다.

//////////////////////////
If someone gets mentioned on a Pull Request or Issue, they will be ``subscribed'' to it and will continue getting notifications any time some activity occurs on it. You will also be subscribed to something if you opened it, if you're watching the repository or if you comment on something. If you no longer wish to receive notifications, there is an ``Unsubscribe'' button on the page you can click to stop receiving updates on it.
//////////////////////////
한번 `@멘션`으로 언급되면 그 사람은 ``구독 상태(Subscribed)''가 된다. 그래서 해당 이슈나 Pull Request에서 계속 알림이 온다. 이슈나 Pull Request를 직접 만들었거나, 해당 저장소를 'Watching'하는 상태이거나, 코멘트를 단 경우에도 구독 상태가 된다. 더는 알림을 받고 싶지 않으면 화면의 ``Unsubscribe'' 버튼으로 멈출 수 있다.

//////////////////////////
.Unsubscribe from an Issue or Pull Request.
image::images/maints-06-unsubscribe.png[Unsubscribe]
//////////////////////////
.특정 이슈와 Pull Request의 알림 끊기(Unsubscribe).
image::images/maint-06-unsubscribe.png[Unsubscribe]

//////////////////////////
===== The Notifications Page
//////////////////////////
===== 알림 페이지

//////////////////////////
When we mention ``notifications'' here with respect to GitHub, we mean a specific way that GitHub tries to get in touch with you when events happen and there are a few different ways you can configure them.
If you go to the ``Notification center'' tab from the settings page, you can see some of the options you have.
//////////////////////////
GitHub의 ``알림''은 프로젝트에서 어떤 일이 일어나면 바로 알 수 있도록 안내해 주는 것이다. 이 알림은 원하는 방법으로 설정해 쓸 수 있다.
설정의 ``Notification center'' 탭에 가면 설정할 수 있는 옵션이 있다.

//////////////////////////
.Notification center options.
image::images/maint-07-notifications.png[Notifiation center]
//////////////////////////
.Notification center 옵션.
image::images/maint-07-notifications.png[Notifiation center]

//////////////////////////
The two choices are to get notifications over ``Email'' and over ``Web'' and you can choose either, niether or both for when you actively participate in things and for activity on repositories you are watching.
//////////////////////////
알림을 Email로 받을지 Web으로 받을지 선택할 수 있다. 물론 두 가지 방법을 동시에 사용해도 된다. 그리고 그냥 대화에 참여하는 경우와 프로젝트를 'Watching'하는 경우를 나누어 선택할 수 있다.

//////////////////////////
====== Web Notifications
//////////////////////////
====== 웹 알림

//////////////////////////
Web notifications only exist on GitHub and you can only check them on GitHub. If you have this option selected in your preferences and a notification is triggered for you, you will see a small blue dot over your notifications icon at the top of your screen as seen in <<_not_center>>.
//////////////////////////
Web 알림은 GitHub에서 제공하는 것으로 GitHub 사이트에서만 확인할 수 있다. 이 옵션을 선택하면 알림이 오면 알림 아이콘에 파란 점을 볼 수 있다. <<_not_center>>을 확인해보자.

[[_not_center]]
//////////////////////////
.Notification center.
image::images/maint-08-notifications-page.png[Notifiation center]
//////////////////////////
.Notification center.
image::images/maint-08-notifications-page.png[Notifiation center]

//////////////////////////
If you click on that, you will see a list of all the items you have been notified about, grouped by project. You can filter to the notifications of a specific project by clicking on it's name in the left hand sidebar. You can also acknowledge the notifiction by clicking the checkmark icon next to any notification, or acknowledge _all_ of the notifictions in a project by clicking the checkmark at the top of the group. There is also a mute button next to each checkmark that you can click to not receive any further notifications on that item.
//////////////////////////
알림 아이콘을 클릭하면 알림 메시지를 확인할 수 있다. 알림은 프로젝트별로 분류된다. 왼쪽 메뉴에 있는 프로젝트를 선택하면 관련 알림만 걸러서 볼 수 있다. 각 알림에 있는 체크박스를 클릭해서 읽었다고 표시를 할 수 있고 제일 위에 있는 체크박스를 클릭하면 해당 알림에 대해서 전부 읽음 표시를 할 수 있다. 그리고 'Mute' 버튼을 클릭하면 해당 사항에 대해서는 더는 알림이 오지 않는다.

//////////////////////////
All of these tools are very useful for handling large numbers of notifications. Many GitHub power users will simply turn off email notifications entirely and manage all of their notifications through this screen.
//////////////////////////
이 기능을 사용하면 쏟아지는 알림들도 매우 효율적으로 처리할 수 있다. GitHub의 파워 유저는 이메일 알림을 꺼놓고 GitHub 사이트에서만 알림을 관리하기도 한다.

//////////////////////////
====== Email Notifications
//////////////////////////
====== 이메일 알림

//////////////////////////
Email notifications are the other way you can handle notifications through GitHub. If you have this turned on you will get emails for each notification. We saw examples of this in <<_email_notification>> and <<_email_pr>>. The emails will also be threaded properly, which is nice if you're using a threading email client.
//////////////////////////
이메일 알림을 켜 놓으면 이메일로도 GitHub 알림을 확인할 수 있다. <<_email_notification>>과 <<_email_pr>>의 예를 보면 관련 알림들이 이메일 스레드로 잘 분류되는 것을 볼 수 있다. 그래서 이메일 스레드를 잘 지원하는 메일 클라이언트를 사용하는 것이 좋다.

//////////////////////////
There is also a fair amount of metadata embedded in the headers of the emails that GitHub sends you, which can be really helpful for setting up custom filters and rules.
//////////////////////////
GitHub이 보낸 이메일 헤더를 보면 여러 가지 메타데이터가 들어 있다. 그래서 사용자는 이메일 필터나 룰 같은 자동 관리 기능으로 쉽게 관리할 수 있다.

//////////////////////////
For instance, if we look at the actual email headers sent to Tony in the email shown in <<_email_pr>>, we will see the following among the information sent:
//////////////////////////
<<_email_pr>>에서 보여준 이메일의 헤더는 아래와 같다.

[source,mbox]
----
To: tonychacon/fade <fade@noreply.github.com>
Message-ID: <tonychacon/fade/pull/1@github.com>
Subject: [fade] Wait longer to see the dimming effect better (#1)
X-GitHub-Recipient: tonychacon
List-ID: tonychacon/fade <fade.tonychacon.github.com>
List-Archive: https://github.com/tonychacon/fade
List-Post: <mailto:reply+i-4XXX@reply.github.com>
List-Unsubscribe: <mailto:unsub+i-XXX@reply.github.com>,...
X-GitHub-Recipient-Address: tchacon@example.com
----

//////////////////////////
There are a couple of interesting things here. If you want to highlight or re-route emails to this particular project or even Pull Request, the information in `Message-ID` gives you all the data in `<user>/<project>/<type>/<id>` format. If this were an issue, for example, the `<type>` field would have been ``issues'' rather than ``pull''.
//////////////////////////
프로젝트에 따라 혹은 Pull Request인지에 따라 분류하거나 다른 주소로 재전송하고 싶다면 `Message-ID`를 이용하는 게 좋다. 이 데이터는 `<user>/<project>/<type>/<id>` 형식으로 돼 있다. 만약 이슈에 대한 데이터면 `<type>`부분이 ``pull''이 아니라 ``issues''라고 돼 있을 것이다.

//////////////////////////
The `List-Post` and `List-Unsubscribe` fields mean that if you have a mail client that understands those, you can easily post to the list or ``Unsubscribe'' from the thread. That would be essentially the same as clicking the ``mute'' button on the web version of the notification or ``Unsubscribe'' on the Issue or Pull Request page itself.
//////////////////////////
`List-Post`와 `List-Unsubscribe` 필드를 인식하는 메일 클라이언트를 사용하고 있으면 좀 더 편리하게 사용할 수 있다. `List-Post`는 이메일로 리스트에 글을 올리는 데 사용하고 `List-Unsubscribe`는 이메일 클라이언트에서 알림을 그만 받도록 할 수 있다. 이슈와 Pull Request페이지의 ``Unsubscribe'' 버튼을 클릭하거나 웹 알림 페이지에서 ``Mute'' 버튼을 클릭하는 것과 같다.

//////////////////////////
It's also worth noting that if you have both email and web notifications enabled and you read the email version of the notification, the web version will be marked as read as well if you have images allowed in your mail client.
//////////////////////////
이메일과 웹 알림이 둘 다 켜져 있으면 알림이 이메일로도 오고 웹으로도 온다. 이메일 클라이언트에 이미지를 읽도록 설정돼 있으면 이메일 클라이언트에서 메일을 읽으면 웹에서도 읽었다고 표시된다.

//////////////////////////
==== Special Files
//////////////////////////
==== 특별한 파일

//////////////////////////
There are a couple of special files that GitHub will notice if they are present in your repository.
//////////////////////////
저장소에 있는 파일 중에서 GitHub이 사용하는 파일이 있다.

==== README

//////////////////////////
The first is the `README` file, which can be of nearly any format that GitHub recognizes as prose. For example, it could be `README`, `README.md`, `README.asciidoc`, etc. If GitHub sees a README file in your source, it will render it on the landing page of the project.
//////////////////////////
GitHub은 저장소 랜딩 페이지를 보여줄 때 README 파일을 이용해서 보여준다. README 파일 형식에 상관없이 잘 보여준다. `README.md` 파일이든 `README.asciidoc` 파일이든 GitHub이 자동으로 렌더링해서 보여준다.

//////////////////////////
Many teams use this file to hold all the relevant project information for someone who might be new to the repository or project. This generally includes things like:
//////////////////////////
많은 사람이 이 파일에 저장소나 프로젝트에 처음 방문한 사람들에게 필요한 정보를 정리해 둔다. 보통 아래와 같은 내용을 쓴다.

//////////////////////////
* What the project is for
* How to configure and install it
* An example of how to use it or get it running
* The license that the project is offered under
* How to contribute to it
//////////////////////////
* 무슨 프로젝트인지
* 설정하고 설치하는 방법
* 사용법과 실행결과에 대한 예제
* 프로젝트의 라이센스
* 기여하는 방법

//////////////////////////
Since GitHub will render this file, you can embed images or links in it for added ease of understanding.
//////////////////////////
GitHub은 README 파일을 렌더링하는 것이기 때문에 이미지나 외부 링크를 적어도 된다.

==== CONTRIBUTING

//////////////////////////
The other special file that GitHub recognizes is the `CONTRIBUTING` file. If you have a file named `CONTRIBUTING` with any file extension, GitHub will show <<_contrib_file>> when anyone starts opening a Pull Request.
//////////////////////////
GitHub은 CONTRIBUTING 파일도 인식한다. README와 마찬가지로 원하는 파일 형식을 사용하면 된다. Pull Request를 열 때 이 파일이 있으면 <<_contrib_file>>과 같이 링크를 보여준다.

[[_contrib_file]]
//////////////////////////
.Opening a Pull Request when a CONTRIBUTING file exists.
image::images/maint-09-contrib.png[Contributing notice]
//////////////////////////
.CONTRIBUTING 파일이 있음을 보여준다.
image::images/maint-09-contrib.png[Contributing notice]

//////////////////////////
The idea here is that you can specify specific things you want or don't want in a Pull Request sent to your project. This way people may actually read the guidelines before opening the Pull Request.
//////////////////////////
이 파일에는 프로젝트에 기여하는 방법과 Pull Request 규칙 같은 것을 적는다. 그러면 사람들이 Pull Request를 열 때 이 가이드라인을 참고할 수 있다.

//////////////////////////
==== Project Administration
//////////////////////////
==== 프로젝트 관리

//////////////////////////
Generally there are not a lot of administrative things you can do with a single project, but there are a couple of items that might be of interest.
//////////////////////////
특별히 관리할 만한 게 별로 없지만 알고 있으면 유용한 것들을 소개한다.

//////////////////////////
===== Changing the Default Branch
//////////////////////////
===== 기본 브랜치 변경하기

//////////////////////////
If you are using a branch other than ``master'' as your default branch that you want people to open Pull Requests on or see by default, you can change that in your repository's settings page under the ``Options'' tab.
//////////////////////////
기본 브랜치를 ``master''말고 다른 브랜치로 설정할 수 있다. Pull Request를 열 때 설정한 기본 브랜치가 기본으로 선택된다. 기본 브랜치는 저장소 설정 페이지의 ``Options'' 탭에서 변경한다.

[[_default_branch]]
//////////////////////////
.Change the default branch for a project.
image::images/maint-10-default-branch.png[Default branch]
//////////////////////////
.기본 브랜치 변경하기.
image::images/maint-10-default-branch.png[기본 브랜치]

//////////////////////////
Simply change the default branch in the dropdown and that will be the default for all major operations from then on, including which branch is checked out by default when someone clones the repository.
//////////////////////////
기본 브랜치 변경은 쉽고 정말로 기본으로 쓰인다. 저장소를 Clone하면 여기서 설정한 브랜치가 기본으로 Checkout된다.

//////////////////////////
===== Transferring a Project
//////////////////////////
===== 프로젝트 넘기기

//////////////////////////
If you would like to transfer a project to another user or an organization in GitHub, there is a ``Transfer ownership'' option at the bottom of the same ``Options'' tab of your repository settings page that allows you to do this.
//////////////////////////
프로젝트 소유자를 다른 사용자나 기관으로 변경할 수 있다. 저장소 설정 페이지의 ``Options''탭을 보면 페이지 아래쪽에 ``Transfer ownership'' 항목이 있다. 여기 있는 `Transfer` 버튼으로 프로젝트를 넘길 수 있다.

[[_transfer_project]]
//////////////////////////
.Transfer a project to anther GitHub user or Organization.
image::images/maint-11-transfer.png[Transfer]
//////////////////////////
.다른 GitHub 사용자나 기관에 프로젝트 넘기기.
image::images/maint-11-transfer.png[프로젝트 넘기기]

//////////////////////////
This is helpful if you are abandoning a project and someone wants to take it over, or if your project is getting bigger and want to move it into an organization.
//////////////////////////
맡던 프로젝트를 다른 사람에게 넘겨주거나 프로젝트가 커져서 Organizaiton 계정으로 옮기고 싶을 때 유용하다.

//////////////////////////
Not only does this move the repository along with all it's watchers and stars to another place, it also sets up a redirect from your URL to the new place. It will also redirect clones and fetches from Git, not just web requests.
//////////////////////////
저장소만 옮겨지는 것이 아니라 'Watching'하는 사람이나 'Star'한 사람까지도 함께 옮겨진다. 그리고 URL은 Redirect되는데 웹 접속뿐만 아니라 Clone이나 Fetch 요청까지도 Redirect된다.
