//////////////////////////
=== About Version Control
//////////////////////////
=== 버전 관리란?

(((version control)))
//////////////////////////
What is “version control”, and why should you care?
Version control is a system that records changes to a file or set of files over time so that you can recall specific versions later.
For the examples in this book, you will use software source code as the files being version controlled, though in reality you can do this with nearly any type of file on a computer.
//////////////////////////
“버전 관리” 는 무엇이고 우리는 왜 이것을 알아야 할까?
버전 관리 시스템은 파일 변화를 시간에 따라 기록했다가 나중에 특정 시점의 버전을 다시 꺼내올 수 있는 시스템이다.
이 책에서는 버전 관리하는 예제로 소프트웨어 소스 코드만 보여주지만, 실제로 거의 모든 컴퓨터 파일의 버전을 관리할 수 있다.

//////////////////////////
If you are a graphic or web designer and want to keep every version of an image or layout (which you would most certainly want to), a Version Control System (VCS) is a very wise thing to use.
It allows you to revert selected files back to a previous state, revert the entire project back to a previous state, compare changes over time, see who last modified something that might be causing a problem, who introduced an issue and when, and more.
Using a VCS also generally means that if you screw things up or lose files, you can easily recover.
In addition, you get all this for very little overhead.
//////////////////////////
그래픽 디자이너나 웹 디자이너도 버전 관리 시스템(VCS - Version Control System)을 사용할 수 있다. VCS로 이미지나 레이아웃의 버전(변경 이력 혹은 수정 내용)을 관리하는 것은 매우 현명하다.
VCS를 사용하면 각 파일을 이전 상태로 되돌릴 수 있고, 프로젝트를 통째로 이전 상태로 되돌릴 수 있고, 시간에 따라 수정 내용을 비교해 볼 수 있고, 누가 문제를 일으켰는지도 추적할 수 있고, 누가 언제 만들어낸 이슈인지도 알 수 있다.
VCS를 사용하면 파일을 잃어버리거나 잘못 고쳤을 때도 쉽게 복구할 수 있다.
이런 모든 장점을 큰 노력 없이 이용할 수 있다.

//////////////////////////
==== Local Version Control Systems
//////////////////////////
==== 로컬 버전 관리

(((version control,local)))
//////////////////////////
Many people's version-control method of choice is to copy files into another directory (perhaps a time-stamped directory, if they're clever).
This approach is very common because it is so simple, but it is also incredibly error prone.
It is easy to forget which directory you're in and accidentally write to the wrong file or copy over files you don't mean to.
//////////////////////////
많은 사람은 버전을 관리하기 위해 디렉토리로 파일을 복사하는 방법을 쓴다(똑똑한 사람이라면 디렉토리 이름에 시간을 넣을 거다).
이 방법은 간단하므로 자주 사용한다.
그렇지만, 정말 뭔가 잘못되기 쉽다.
작업하던 디렉토리를 지워버리거나, 실수로 파일을 잘못 고칠 수도 있고, 잘못 복사할 수도 있다.

//////////////////////////
To deal with this issue, programmers long ago developed local VCSs that had a simple database that kept all the changes to files under revision control.
//////////////////////////
이런 이유로 프로그래머들은 오래전에 로컬 VCS라는 걸 만들었다. 이 VCS는 아주 간단한 데이터베이스를 사용해서 파일의 변경 정보를 관리했다.

//////////////////////////
.Local version control.
image::images/local.png[Local version control diagram]
//////////////////////////
.로컬 버전 관리.
image::images/local.png[로컬 버전 관리]

//////////////////////////
One of the more popular VCS tools was a system called RCS, which is still distributed with many computers today.
RCS works by keeping patch sets (that is, the differences between files) in a special format on disk; it can then re-create what any file looked like at any point in time by adding up all the patches.
//////////////////////////
많이 쓰는 VCS 도구 중에 RCS(Revision Control System)라고 부르는 것이 있는데 오늘날까지도 아직 많은 회사가 사용하고 있다.
RCS는 기본적으로 Patch Set(파일에서 변경되는 부분)을 관리한다.
이 Patch Set은 특별한 형식의 파일로 저장한다.
그리고 일련의 Patch Set을 적용해서 모든 파일을 특정 시점으로 되돌릴 수 있다.

//////////////////////////
==== Centralized Version Control Systems
//////////////////////////
==== 중앙집중식 버전 관리(CVCS)

(((version control,centralized)))
//////////////////////////
The next major issue that people encounter is that they need to collaborate with developers on other systems.
To deal with this problem, Centralized Version Control Systems (CVCSs) were developed.
These systems (such as CVS, Subversion, and Perforce) have a single server that contains all the versioned files, and a number of clients that check out files from that central place. (((CVS)))(((Subversion)))(((Perforce)))
For many years, this has been the standard for version control.
//////////////////////////
프로젝트를 진행하다 보면 다른 개발자와 함께 작업해야 하는 경우가 많다.
이럴 때 생기는 문제를 해결하기 위해 CVCS(중앙집중식 VCS)가 개발됐다.
CVS, Subversion, Perforce 같은 시스템은 파일을 관리하는 서버가 별도로 있고 클라이언트가 중앙 서버에서 파일을 받아서 사용(Checkout)한다. (((CVS)))(((Subversion)))(((Perforce)))
수년 동안 이러한 시스템들이 많은 사랑을 받았다.

//////////////////////////
.Centralized version control.
image::images/centralized.png[Centralized version control diagram]
//////////////////////////
.중앙집중식 버전 관리(CVCS).
image::images/centralized.png[중앙집중식 버전 관리(CVCS)]

//////////////////////////
This setup offers many advantages, especially over local VCSs.
For example, everyone knows to a certain degree what everyone else on the project is doing.
Administrators have fine-grained control over who can do what, and it's far easier to administer a CVCS than it is to deal with local databases on every client.
//////////////////////////
CVCS 환경은 로컬 VCS에 비해 장점이 많다.
모두 누가 무엇을 하고 있는지 알 수 있다.
관리자는 누가 무엇을 할지 꼼꼼하게 관리할 수 있다. 모든 클라이언트의 로컬 데이터베이스를 관리하는 것보다 VCS 하나를 관리하기가 훨씬 쉽다.

//////////////////////////
However, this setup also has some serious downsides.
The most obvious is the single point of failure that the centralized server represents.
If that server goes down for an hour, then during that hour nobody can collaborate at all or save versioned changes to anything they're working on.
If the hard disk the central database is on becomes corrupted, and proper backups haven't been kept, you lose absolutely everything -- the entire history of the project except whatever single snapshots people happen to have on their local machines.
Local VCS systems suffer from this same problem -- whenever you have the entire history of the project in a single place, you risk losing everything.
//////////////////////////
그러나 이 CVCS 환경은 몇 가지 치명적인 결점이 있다.
가장 대표적인 것이 중앙 서버에 발생한 문제다.
만약 서버가 한 시간 동안 다운되면 그동안 아무도 다른 사람과 협업할 수 없고 사람들이 하는 일을 백업할 방법도 없다. 그리고 중앙 데이터베이스가 있는 하드디스크에 문제가 생기면 프로젝트의 모든 히스토리를 잃는다.
물론 사람마다 하나씩 가진 스냅샷은 괜찮다.
로컬 VCS 시스템도 이와 비슷한 결점이 있고 이런 문제가 발생하면 모든 것을 잃는다.

//////////////////////////
==== Distributed Version Control Systems
//////////////////////////
==== 분산 버전 관리 시스템

(((version control,distributed)))
//////////////////////////
This is where Distributed Version Control Systems (DVCSs) step in.
In a DVCS (such as Git, Mercurial or Darcs), clients don't just check out the latest snapshot of the files; rather, they fully mirror the repository, including its full history.
Thus, if any server dies, and these systems were collaborating via that server, any of the client repositories can be copied back up to the server to restore it.
Every clone is really a full backup of all the data.
//////////////////////////
DVCS(분산 버전 관리 시스템)을 설명할 차례다.
Git, Mecurial, Darcs 같은 DVCS에서의 클라이언트는 단순히 파일의 마지막 스냅샷을 Checkout 하지 않는다. 그냥 저장소를 히스토리와 더불어 전부 복제한다.
서버에 문제가 생기면 이 복제물로 다시 작업을 시작할 수 있다. 클라이언트 중에서 아무거나 골라도 서버를 복원할 수 있다.
Clone은 모든 데이터를 가진 진정한 백업이다.

//////////////////////////
.Distributed version control.
image::images/distributed.png[Distributed version control diagram]
//////////////////////////
.분산 버전 관리 시스템(DVCS).
image::images/distributed.png[분산 버전 관리 시스템(DVCS)]

//////////////////////////
Furthermore, many of these systems deal pretty well with having several remote repositories they can work with, so you can collaborate with different groups of people in different ways simultaneously within the same project.
This allows you to set up several types of workflows that aren't possible in centralized systems, such as hierarchical models.
//////////////////////////
게다가 대부분의 DVCS 환경에서는 리모트 저장소가 존재한다. 리모트 저장소가 많을 수도 있다. 그래서 사람들은 동시에 다양한 그룹과 다양한 방법으로 협업할 수 있다.
계층 모델 같은 중앙집중식 시스템으로는 할 수 없는 워크플로를 다양하게 사용할 수 있다.
