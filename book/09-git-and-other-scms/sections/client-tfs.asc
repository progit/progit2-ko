////////////
==== Git and TFS
////////////
==== Git과 TFS

(((Interoperation with other VCSs, TFS)))
(((TFS)))((("TFVC", see="TFS")))
////////////
Git is becoming popular with Windows developers, and if you're writing code on Windows, there's a good chance you're using Microsoft's Team Foundation Server (TFS).
TFS is a collaboration suite that includes defect and work-item tracking, process support for Scrum and others, code review, and version control.
There's a bit of confusion ahead: *TFS* is the server, which supports controlling source code using both Git and their own custom VCS, which they've dubbed *TFVC* (Team Foundation Version Control).
Git support is a somewhat new feature for TFS (shipping with the 2013 version), so all of the tools that predate that refer to the version-control portion as ``TFS'', even though they're mostly working with TFVC.
////////////
Git은 윈도우즈 개발자들도 많이 사용한다. 당신이 윈도우즈에서 개발하고 있다면 마이크로소프트 사의 팀 파운데이션 서버(TFS)를 써볼 좋은 기회다.
TFS는 결함과 작업 항목 추적, 스크럼 등의 개발방법 지원, 코드 리뷰, 버전 컨트롤 등의 기능을 모아놓은 도구다.
좀 혼동이 있을 수 있다. *TFS*는 Git뿐만이 아니라 자체 VCS와 맞물려 소스 코드를 컨트롤 하는 것도 가능한 서버이다. 자체 VCS는 *TFVC*(팀 파운데이션 버전 컨트롤)라고 한다.
대부분의 경우에 TFVC를 사용하지만, 앞에서 설명한 ``TFS''의 버전 컨트롤 부분에 해당하는 모든 도구와 같이, Git은 TFS(2013년 이후 버전)용 기능을 몇 가지 제공한다.

////////////
If you find yourself on a team that's using TFVC but you'd rather use Git as your version-control client, there's a project for you.
////////////
TFVC를 사용하는 팀에서 기존의 버전 컨트롤 클라이언트가 아닌 Git을 사용하고 싶다면, 그런 당신을 위해 준비했다.

////////////
===== Which Tool
////////////
===== 도구 선택

(((git-tf)))(((git-tfs)))
////////////
In fact, there are two: git-tf and git-tfs.
////////////
Git에는 이를 위한 두 개의 도구가 있다. git-tf와 git-tfs가 그것이다.

////////////
Git-tfs (found at http://git-tfs.com[]) is a .NET project, and (as of this writing) it only runs on Windows.
To work with Git repositories, it uses the .NET bindings for libgit2, a library-oriented implementation of Git which is highly performant and allows a lot of flexibility with the guts of a Git repository.
Libgit2 is not a complete implementation of Git, so to cover the difference git-tfs will actually call the command-line Git client for some operations, so there are no artificial limits on what it can do with Git repositories.
Its support of TFVC features is very mature, since it uses the Visual Studio assemblies for operations with servers (however, this means you need a version of Visual Studio installed that includes access to TFVC; as of this writing, none of the free-of-charge versions of Visual Studio can connect with a TFS server).
////////////
git-tfs는 .NET 프로젝트이다. (http://git-tfs.com[]에서 얻을 수 있다) 그리고 (이 글을 쓰는 현재) 윈도우즈에서만 동작한다.
Git 저장소와 연동하려면 .NET 바인딩을 위해 libgit2를 사용한다.  libgit2는 Git을 라이브러리처럼 사용하기 위한 고성능, 다기능 구현체이다.
libgit2는 Git을 완전히 구현하지는 않았다. 그래서 실제 Git 클라이언트와 동작이 다른 부분은 git-tfs에서 실제로 Git 클라이언트를 사용하여 libgit2의 단점을 보완한다. 그래서 Git 저장소를 이용하는 데에 특별한 제한이 없다.
서버와 통신하는 것은 Visual Studio 어셈블리를 이용하기 때문에 TFVC 지원 상황은 나무랄 데 없다. (이 말인즉슨, TFVC에 접속할 수 있는 Visual Studio가 설치되어 있어야 한다는 말이다. 이 글을 쓰는 지금은 TFS 서버에 접속할 수 있는 무료 Visual Studio 제품은 없다)

////////////
Git-tf (whose home is at https://gittf.codeplex.com[]) is a Java project, and as such runs on any computer with a Java runtime environment.
It interfaces with Git repositories through JGit (a JVM implementation of Git), which means it has virtually no limitations in terms of Git functions.
However, its support for TFVC is limited as compared to git-tfs – it does not support branches, for instance.
////////////
git-tf는 자바 프로젝트다. (홈페이지는 https://gittf.codeplex.com[]이다) 그래서 JRE가 있는 컴퓨터면 어디서든 동작한다.
Git 저장소와는 JGit(Git의 JVM 구현체)으로 통신한다. 즉, Git의 기능을 사용하면서 있어서 사실상 아무런 제약이 없다는 것이다.
하지만 TFVC 지원은 git-tfs에 비해 부족하다. 한 예로 git-tf에서는 브랜치를 사용할 수 없다.

////////////
So each tool has pros and cons, and there are plenty of situations that favor one over the other.
We'll cover the basic usage of both of them in this book.
////////////
이렇게 도구들은 각각 장단점이 있고, 여러 상황에 대해 한 도구가 다른 도구에 비해 뛰어나다고 단정 지을 수 없다.
이 책에서는 각 도구의 기본적인 사용 방법에 대해서만 다룰 예정이다.

[NOTE]
====
////////////
You'll need access to a TFVC-based repository to follow along with these instructions.
These aren't as plentiful in the wild as Git or Subversion repositories, so you may need to create one of your own.
Codeplex (https://www.codeplex.com[]) or Visual Studio Online (http://www.visualstudio.com[]) are both good choices for this.
////////////
아래에 나오는 단계를 진행하기 위해서는 접근 가능한 TFVC 기반의 저장소가 있어야 한다.
Git이나 서브버전처럼 서비스 제공자가 많지 않다. 그러니 혼자서 사용할 저장소 하나를 구해야 한다.
Codeplex(https://www.codeplex.com[])나 Visual Studio 온라인 (http://www.visualstudio.com[])을 추천한다.
====



////////////
===== Getting Started: `git-tf`
////////////
===== 시작하기: git-tf

////////////
The first thing you do, just as with any Git project, is clone.
Here's what that looks like with `git-tf`:
////////////
먼저 해야 할 것은 여느 Git 프로젝트에서 했던 것처럼 Clone이다.
`git-tf`에서는 다음과 같이 한다.

[source,console]
----
$ git tf clone https://tfs.codeplex.com:443/tfs/TFS13 $/myproject/Main project_git
----

////////////
The first argument is the URL of a TFVC collection, the second is of the form `$/project/branch`, and the third is the path to the local Git repository that is to be created (this last one is optional).
Git-tf can only work with one branch at a time; if you want to make checkins on a different TFVC branch, you'll have to make a new clone from that branch.
////////////
첫 번째 인자는 TFVC 콜렉션의 URL이다. 두 번째 인자는 `$/project/branch` 형식의 문자열이고, 세 번째는 Clone을 받아 생성할 로컬 Git 저장소의 경로이다. (마지막 인자는 선택 사항이다)
git-tf는 한 번에 하나의 브랜치만 다룰 수 있다. 만약 TFVC의 다른 브랜치에 체크인하려면 그 브랜치의 새로운 클론을 만들어야 한다.

////////////
This creates a fully functional Git repository:
////////////
이렇게 Clone 한 저장소에서는 Git의 모든 기능을 사용할 수 있다.

[source,console]
----
$ cd project_git
$ git log --all --oneline --decorate
512e75a (HEAD, tag: TFS_C35190, origin_tfs/tfs, master) Checkin message
----

////////////
This is called a _shallow_ clone, meaning that only the latest changeset has been downloaded.
TFVC isn't designed for each client to have a full copy of the history, so git-tf defaults to only getting the latest version, which is much faster.
////////////
이것을 _얕은_ Clone이라고 한다. 마지막 변경집합(changeset)만을 다운로드받기 때문이다.
TFVC는 클라이언트들이 전체 히스토리를 소유하도록 만들어져 있지 않다. 그래서 git-tf는 기본적으로 마지막 버전만 가져온다. 속도도 빠르다.

////////////
If you have some time, it's probably worth it to clone the entire project history, using the `--deep` option:
////////////
시간에 여유가 있으면 `--deep` 옵션을 이용해서 프로젝트의 전체 히스토리를 Clone 하자. 그게 더 좋다.

[source,console]
----
$ git tf clone https://tfs.codeplex.com:443/tfs/TFS13 $/myproject/Main \
  project_git --deep
Username: domain\user
Password:
Connecting to TFS...
Cloning $/myproject into /tmp/project_git: 100%, done.
Cloned 4 changesets. Cloned last changeset 35190 as d44b17a
$ cd project_git
$ git log --all --oneline --decorate
d44b17a (HEAD, tag: TFS_C35190, origin_tfs/tfs, master) Goodbye
126aa7b (tag: TFS_C35189)
8f77431 (tag: TFS_C35178) FIRST
0745a25 (tag: TFS_C35177) Created team project folder $/tfvctest via the \
        Team Project Creation Wizard
----

////////////
Notice the tags with names like `TFS_C35189`; this is a feature that helps you know which Git commits are associated with TFVC changesets.
This is a nice way to represent it, since you can see with a simple log command which of your commits is associated with a snapshot that also exists in TFVC.
They aren't necessary (and in fact you can turn them off with `git config git-tf.tag false`) – git-tf keeps the real commit-changeset mappings in the `.git/git-tf` file.
////////////
`TFS_C35189` 태그를 보자. 이건 어떤 Git의 커밋이 TFVC의 변경집합과 연결되어 있는지 나타낸다.
간단한 로그 명령어 하나로 어떤 커밋이 TFVC에 있는 어떤 스냅 샷과 연결되어 있는지 볼 수 있다.
꼭 출력할 필요는 없다. (`git config git-tf.tag false`명령어로 끌 수 있다) git-tf는 커밋-변경집합 매핑 정보를 `.git/git-tf`에 보관하고 있다.


////////////
===== Getting Started: `git-tfs`
////////////
===== `git-tfs` 시작하기

////////////
Git-tfs cloning behaves a bit differently.
Observe:
////////////
git-tfs의 Clone은 좀 다르게 동작한다.
다음을 보자.

[source,powershell]
----
PS> git tfs clone --with-branches \
    https://username.visualstudio.com/DefaultCollection \
    $/project/Trunk project_git
Initialized empty Git repository in C:/Users/ben/project_git/.git/
C15 = b75da1aba1ffb359d00e85c52acb261e4586b0c9
C16 = c403405f4989d73a2c3c119e79021cb2104ce44a
Tfs branches found:
- $/tfvc-test/featureA
The name of the local branch will be : featureA
C17 = d202b53f67bde32171d5078968c644e562f1c439
C18 = 44cd729d8df868a8be20438fdeeefb961958b674
----

////////////
Notice the `--with-branches` flag.
Git-tfs is capable of mapping TFVC branches to Git branches, and this flag tells it to set up a local Git branch for every TFVC branch.
This is highly recommended if you've ever branched or merged in TFS, but it won't work with a server older than TFS 2010 – before that release, ``branches'' were just folders, so git-tfs can't tell them from regular folders.
////////////
`--with-branches` 플래그에 주목하라.
git-tfs는 TFVC의 브랜치와 Git의 브랜치를 매핑하는 기능이 있다. 그래서 이 플래그는 모든 TFVC 브랜치를 로컬 저장소의 Git 브랜치로 만든다.
TFS에서 브랜치를 사용하거나 Merge를 한 적이 있다면 적극적으로 추천한다. 하지만 TFS 2010보다 오래된 버전들은 이 기능이 동작하지 않는다. (이 버전 전의 제품에서의 ``브랜치''는 그냥 폴더일 뿐이고 git-tfs는 일반 폴더를 브랜치로 만들 능력이 없다.)

////////////
Let's take a look at the resulting Git repository:
////////////
그렇게 만들어진 Git 저장소를 살펴보자.

[source,powershell]
----
PS> git log --oneline --graph --decorate --all
* 44cd729 (tfs/featureA, featureA) Goodbye
* d202b53 Branched from $/tfvc-test/Trunk
* c403405 (HEAD, tfs/default, master) Hello
* b75da1a New project
PS> git log -1
commit c403405f4989d73a2c3c119e79021cb2104ce44a
Author: Ben Straub <ben@straub.cc>
Date:   Fri Aug 1 03:41:59 2014 +0000

    Hello

    git-tfs-id: [https://username.visualstudio.com/DefaultCollection]$/myproject/Trunk;C16
----

////////////
There are two local branches, `master` and `featureA`, which represent the initial starting point of the clone (`Trunk` in TFVC) and a child branch (`featureA` in TFVC).
You can also see that the `tfs` ``remote'' has a couple of refs too: `default` and `featureA`, which represent TFVC branches.
Git-tfs maps the branch you cloned from to `tfs/default`, and others get their own names.
////////////
두 개의 로컬 브랜치를 볼 수 있다. `master`와 `featureA`가 있는데 Clone 된 시작 지점(TFVC의 `Trunk`)과 자식 브랜치(TFVC의 `featureA`)를 표시하고 있다.
그리고 `tfs` ``리모트''가 TFS의 브랜치를 나타내는 ref인 `default`와 `featureA`를 가지고 있는 걸 볼 수 있다.
git-tfs는 Clone 한 브랜치를 `tfs/default`라는 이름으로 매핑하고 다른 브랜치는 각 브랜치의 이름을 부여한다.

////////////
Another thing to notice is the `git-tfs-id:` lines in the commit messages.
Instead of tags, git-tfs uses these markers to relate TFVC changesets to Git commits.
This has the implication that your Git commits may have a different SHA-1 hash before and after they has been pushed to TFVC.
////////////
위 커밋 메시지에서 `git-tfs-id:` 가 쓰인 줄도 볼 필요가 있다.
git-tfs에서는 태그 대신에 TFVC의 변경집합과 Git의 커밋을 연결할 때 이런 표식을 사용한다.
이 표식은 TFVC에 Push 후에 현재 이 커밋의 SHA-1 해시 값이 달라질 수도 있다는 것을 의미한다.

////////////
===== Git-tf[s] Workflow
////////////
===== git-tf[s] Workflow

[NOTE]
====
////////////
Regardless of which tool you're using, you should set a couple of Git configuration values to avoid running into issues.
////////////
어떤 도구를 사용하든지, 알려진 문제를 피하고자 Git 설정 두 개를 바꿔야 한다.

[source,console]
----
$ git config set --local core.ignorecase=true
$ git config set --local core.autocrlf=false
----
====

////////////
The obvious next thing you're going to want to do is work on the project.
TFVC and TFS have several features that may add complexity to your workflow:
////////////
그다음으로 하려는 것은 프로젝트를 진행하는 것임은 말할 것도 없다.
TFVC와 TFS는 그 Workflow에 복잡함을 더한다.

////////////
. Feature branches that aren't represented in TFVC add a bit of complexity.
  This has to do with the *very* different ways that TFVC and Git represent branches.
. Be aware that TFVC allows users to ``checkout'' files from the server, locking them so nobody else can edit them.
  This obviously won't stop you from editing them in your local repository, but it could get in the way when it comes time to push your changes up to the TFVC server.
. TFS has the concept of ``gated'' checkins, where a TFS build-test cycle has to complete successfully before the checkin is allowed.
  This uses the ``shelve'' function in TFVC, which we don't cover in detail here.
    You can fake this in a manual fashion with git-tf, and git-tfs provides the `checkintool` command which is gate-aware.
////////////
. TFVC에 표시되지 않는 Feature 브랜치는 복잡성을 높인다.
  이건 TFVC와 Git의 브랜치 표시 방식이 *매우* 다른 것과 관련이 있다.
. TFVC는 사용자가 서버에서 파일을 ``Checkout''받아서 아무도 수정하지 못하도록 잠글 수 있다는 것을 명심해야 한다.
  서버에서 파일을 잠갔더라도 당신은 파일을 수정할 수 있다. 하지만 TFVC 서버로 Push할 때에 방해될 수 있다.
. TFS는 ``게이트'' 체크인이라는 기능이 있다. 체크인하기 전에 TFS의 빌드-테스트 사이클을 성공적으로 마쳐야 체크인할 수 있는 기능이다.
  이 기능은 TFVC의 ``보류(shelve)'' 기능을 사용해서 구현되어 있다. (보류 기능은 여기서 다루지 않는다.)
  git-tf는 수동으로 이 작업을 하여 TFS를 속일 수 있고, git-tfs는 +checkintool+ 명령어를 이용해서 게이트를 이용할 수 있다.

////////////
In the interest of brevity, what we'll cover here is the happy path, which sidesteps or avoids most of these issues.
////////////
간결함을 위해 모든 일이 제대로 돌아가는 경우만을 다룰 것이기에 이슈 대부분을 피하고자 한다.

////////////
===== Workflow: `git-tf`
////////////
===== Workflow: `git-tf`


////////////
Let's say you've done some work, made a couple of Git commits on `master`, and you're ready to share your progress on the TFVC server.
Here's our Git repository:
////////////
어떤 일을 마치고 `master`에 두 개의 커밋을 생성했다고 치자. 그리고 이 커밋을 TFVC 서버로 올려 팀 원들과 공유하고자 한다.
우리의 Git 저장소는 이렇게 되어 있다.

[source,console]
----
$ git log --oneline --graph --decorate --all
* 4178a82 (HEAD, master) update code
* 9df2ae3 update readme
* d44b17a (tag: TFS_C35190, origin_tfs/tfs) Goodbye
* 126aa7b (tag: TFS_C35189)
* 8f77431 (tag: TFS_C35178) FIRST
* 0745a25 (tag: TFS_C35177) Created team project folder $/tfvctest via the \
          Team Project Creation Wizard
----

////////////
We want to take the snapshot that's in the `4178a82` commit and push it up to the TFVC server.
First things first: let's see if any of our teammates did anything since we last connected:
////////////
`4178a82` 커밋의 스냅 샷을 떠서 TFVC 서버에 Push 하려면
그전에 먼저 내가 작업을 시작한 이후에 다른 팀원이 다른 무언가를 하지 않았는지 검사한다.

[source,console]
----
$ git tf fetch
Username: domain\user
Password:
Connecting to TFS...
Fetching $/myproject at latest changeset: 100%, done.
Downloaded changeset 35320 as commit 8ef06a8. Updated FETCH_HEAD.
$ git log --oneline --graph --decorate --all
* 8ef06a8 (tag: TFS_C35320, origin_tfs/tfs) just some text
| * 4178a82 (HEAD, master) update code
| * 9df2ae3 update readme
|/
* d44b17a (tag: TFS_C35190) Goodbye
* 126aa7b (tag: TFS_C35189)
* 8f77431 (tag: TFS_C35178) FIRST
* 0745a25 (tag: TFS_C35177) Created team project folder $/tfvctest via the \
          Team Project Creation Wizard
----

////////////
Looks like someone else is working, too, and now we have divergent history.
This is where Git shines, but we have two choices of how to proceed:
////////////
결과에서 볼 수 있듯이 다른 사람도 이미 뭔가를 작업했다. 그래서 히스토리가 갈라지게 되었다.
이제 Git이 활약할 시간이다. 어떻게 일을 진행할지 두 가지 선택지가 있다.

////////////
. Making a merge commit feels natural as a Git user (after all, that's what `git pull` does), and git-tf can do this for you with a simple `git tf pull`.
  Be aware, however, that TFVC doesn't think this way, and if you push merge commits your history will start to look different on both sides, which can be confusing.
  However, if you plan on submitting all of your changes as one changeset, this is probably the easiest choice.
. Rebasing makes our commit history linear, which means we have the option of converting each of our Git commits into a TFVC changeset.
  Since this leaves the most options open, we recommend you do it this way; git-tf even makes it easy for you with `git tf pull --rebase`.
////////////
. 일반적인 Git 사용자처럼 Merge 커밋을 만든다. (이게 `git pull`이 하는 일 전부다) git-tf에서는 `git tf pull` 명령어 하나로 수행할 수 있다.
  하지만 주의할 것이 있다. TFVC는 이런 방법을 이해하지 못한다. Merge 커밋을 Push하게 되면 서버와 클라이언트의 히스토리 모양이 달라진다. 이는 혼란을 일으킬 수 있다.
  그렇지만 모든 변경 사항을 하나의 변경사항으로 합쳐서 올리려고 한다면 이게 아마 제일 쉬운 방법일 것이다.
. Rebase를 해서 히스토리를 평평하게 편다. 이렇게 하면 각 Git 커밋을 TFVC의 변경집합으로 변환할 수도 있다.
  이 방법을 이용하면 우리가 선택할 수 있는 많은 길이 열리기 때문에 이 방법을 추천한다. git-tf는 이 방법도 `git tf pull --rebase`명령어로 한 번에 된다.

////////////
The choice is yours.
For this example, we'll be rebasing:
////////////
선택은 자신의 몫이다.
이 예제에서는 Rebase 한다.

[source,console]
----
$ git rebase FETCH_HEAD
First, rewinding head to replay your work on top of it...
Applying: update readme
Applying: update code
$ git log --oneline --graph --decorate --all
* 5a0e25e (HEAD, master) update code
* 6eb3eb5 update readme
* 8ef06a8 (tag: TFS_C35320, origin_tfs/tfs) just some text
* d44b17a (tag: TFS_C35190) Goodbye
* 126aa7b (tag: TFS_C35189)
* 8f77431 (tag: TFS_C35178) FIRST
* 0745a25 (tag: TFS_C35177) Created team project folder $/tfvctest via the \
          Team Project Creation Wizard
----

////////////
Now we're ready to make a checkin to the TFVC server.
Git-tf gives you the choice of making a single changeset that represents all the changes since the last one (`--shallow`, which is the default) and creating a new changeset for each Git commit (`--deep`).
For this example, we'll just create one changeset:
////////////
이제 TFVC에 체크인할 준비가 끝났다.
git-tf에서는 모든 커밋의 수정 사항을 하나의 변경집합으로 만들 것인지(`--shallow` 옵션. 기본값이다), 아니면 각 커밋마다 변경집합을 만들 것인지(`--deep` 옵션) 선택할 수 있다.
이 예제에서는 하나의 변경집합으로 만드는 방법을 사용한다.

[source,console]
----
$ git tf checkin -m 'Updating readme and code'
Username: domain\user
Password:
Connecting to TFS...
Checking in to $/myproject: 100%, done.
Checked commit 5a0e25e in as changeset 35348
$ git log --oneline --graph --decorate --all
* 5a0e25e (HEAD, tag: TFS_C35348, origin_tfs/tfs, master) update code
* 6eb3eb5 update readme
* 8ef06a8 (tag: TFS_C35320) just some text
* d44b17a (tag: TFS_C35190) Goodbye
* 126aa7b (tag: TFS_C35189)
* 8f77431 (tag: TFS_C35178) FIRST
* 0745a25 (tag: TFS_C35177) Created team project folder $/tfvctest via the \
          Team Project Creation Wizard
----

////////////
There's a new `TFS_C35348` tag, indicating that TFVC is storing the exact same snapshot as the `5a0e25e` commit.
It's important to note that not every Git commit needs to have an exact counterpart in TFVC; the `6eb3eb5` commit, for example, doesn't exist anywhere on the server.
////////////
`TFS_C35348` 태그가 새로 생겼다. 이 태그는 TFVC가 저장하고 있는 스냅샷 중에 `5a0e25e` 커밋과 완전히 똑같은 스냅샷을 가리킨다.
Git의 모든 커밋들이 TFVC의 스냅 샷들과 대응될 필요는 없다. 예를 들어서 `6eb3eb5` 커밋은 서버에는 존재하지 않는다.

////////////
That's the main workflow.
There are a couple other considerations you'll want to keep in mind:
////////////
이것이 주요 Workflow다.
아래에는 가슴속에 새겨둘 두 가지 고려사항이 있다.

////////////
* There is no branching.
  Git-tf can only create Git repositories from one TFVC branch at a time.
* Collaborate using either TFVC or Git, but not both.
  Different git-tf clones of the same TFVC repository may have different commit SHA hashes, which will cause no end of headaches.
* If your team's workflow includes collaborating in Git and syncing periodically with TFVC, only connect to TFVC with one of the Git repositories.
////////////
* 브랜치가 없다.
  Git-tf는 한 번에 한 TFVC 브랜치를 이용해 Git 저장소를 만들어주는 것만 한다.
* TFVC나 Git을 이용해 협업할 수 있지만, 그 둘을 동시에 사용할 수는 없다.
  같은 TFVC 저장소로 서로 다른 두 개의 git-tf Clone 저장소의 커밋은 는 서로 다른 SHA 시 값을 가진다. 곧 끝없는 두통에 시달릴 것이다.
* 만약 팀에서 Git을 이용한 협업을 하고, TFVC와의 주기적인 동기화를 해야 한다면 TFVC와 통신하는 Git 저장소를 딱 하나만 유지하라.

////////////
===== Workflow: `git-tfs`
////////////
===== Workflow: `git-tfs`

////////////
Let's walk through the same scenario using git-tfs.
Here are the new commits we've made to the `master` branch in our Git repository:
////////////
git-tfs도 같은 시나리오로 진행해보자
우리의 Git 저장소에 'master'에는 우리가 만든 커밋들이 있다.

[source,powershell]
----
PS> git log --oneline --graph --all --decorate
* c3bd3ae (HEAD, master) update code
* d85e5a2 update readme
| * 44cd729 (tfs/featureA, featureA) Goodbye
| * d202b53 Branched from $/tfvc-test/Trunk
|/
* c403405 (tfs/default) Hello
* b75da1a New project
----

////////////
Now let's see if anyone else has done work while we were hacking away:
////////////
마지막으로 저장소를 받아온 뒤로 다른 누군가가 일을 했는지 살펴보자.

[source,powershell]
----
PS> git tfs fetch
C19 = aea74a0313de0a391940c999e51c5c15c381d91d
PS> git log --all --oneline --graph --decorate
* aea74a0 (tfs/default) update documentation
| * c3bd3ae (HEAD, master) update code
| * d85e5a2 update readme
|/
| * 44cd729 (tfs/featureA, featureA) Goodbye
| * d202b53 Branched from $/tfvc-test/Trunk
|/
* c403405 Hello
* b75da1a New project
----

////////////
Yes, it turns out our coworker has added a new TFVC changeset, which shows up as the new `aea74a0` commit, and the `tfs/default` remote branch has moved.
////////////
우리의 동료가 새로운 변경집합을 만들어놨고 Git에서 `aea74a0`로 보인다. 그리고 리모트 브랜치 `tfs/default`가 전진했다.

////////////
As with git-tf, we have two fundamental options for how to resolve this divergent history:
////////////
git-tf로 했던 것처럼 일을 진행하는 데에 두 가지 선택지가 있다.

////////////
. Rebase to preserve a linear history.
. Merge to preserve what actually happened.
////////////
. Rebase를 해서 히스토리를 평평하게 하거나
. Merge를 해서 무슨 일이 일어났었는지 그대로 남겨둔다.

////////////
In this case, we're going to do a ``deep'' checkin, where every Git commit becomes a TFVC changeset, so we want to rebase.
////////////
이번에는 각각의 Git 커밋을 하나씩 TFVC의 변경집합으로 만드는 ``deep'' 체크인을 해보자. 먼저 Rebase한다.

[source,powershell]
----
PS> git rebase tfs/default
First, rewinding head to replay your work on top of it...
Applying: update readme
Applying: update code
PS> git log --all --oneline --graph --decorate
* 10a75ac (HEAD, master) update code
* 5cec4ab update readme
* aea74a0 (tfs/default) update documentation
| * 44cd729 (tfs/featureA, featureA) Goodbye
| * d202b53 Branched from $/tfvc-test/Trunk
|/
* c403405 Hello
* b75da1a New project
----

////////////
Now we're ready to complete our contribution by checking in our code to the TFVC server.
We'll use the `rcheckin` command here to create a TFVC changeset for each Git commit in the path from HEAD to the first `tfs` remote branch found (the `checkin` command would only create one changeset, sort of like squashing Git commits).
////////////
이제 우리 작업을 TFVC 서버에 체크인할 준비가 끝났다.
각 Git 커밋을 하나씩 TFVC 변경집합으로 만들기 위해 `rcheckin` 명령을 사용한다. 이때 HEAD부터 첫 번째로 만나는 `tfs` 리모트 브랜치 사이의 모든 Git commit을 대상으로 한다. (`checkin`명령은 대상 Git 커밋을 모두 하나로 합쳐서 하나의 변경집합을 만든다.)

[source,powershell]
----
PS> git tfs rcheckin
Working with tfs remote: default
Fetching changes from TFS to minimize possibility of late conflict...
Starting checkin of 5cec4ab4 'update readme'
 add README.md
C20 = 71a5ddce274c19f8fdc322b4f165d93d89121017
Done with 5cec4ab4b213c354341f66c80cd650ab98dcf1ed, rebasing tail onto new TFS-commit...
Rebase done successfully.
Starting checkin of b1bf0f99 'update code'
 edit .git\tfs\default\workspace\ConsoleApplication1/ConsoleApplication1/Program.cs
C21 = ff04e7c35dfbe6a8f94e782bf5e0031cee8d103b
Done with b1bf0f9977b2d48bad611ed4a03d3738df05ea5d, rebasing tail onto new TFS-commit...
Rebase done successfully.
No more to rcheckin.
PS> git log --all --oneline --graph --decorate
* ff04e7c (HEAD, tfs/default, master) update code
* 71a5ddc update readme
* aea74a0 update documentation
| * 44cd729 (tfs/featureA, featureA) Goodbye
| * d202b53 Branched from $/tfvc-test/Trunk
|/
* c403405 Hello
* b75da1a New project
----

//////////
Notice how after every successful checkin to the TFVC server, git-tfs is rebasing the remaining work onto what it just did.
That's because it's adding the `git-tfs-id` field to the bottom of the commit messages, which changes the SHA-1 hashes.
This is exactly as designed, and there's nothing to worry about, but you should be aware that it's happening, especially if you're sharing Git commits with others.
//////////
모든 체크인이 완료된 후에 git-tfs가 방금 그 작업들을 Rebase한 것에 주목하자.
SHA-1 해시 값이 바뀐 커밋 메시지의 제일 하단에 `git-tfs-id` 필드를 추가해야 하기 때문이다.
이는 의도된 동작이니 걱정할 필요는 없지만, 이런 일이 일어난다는 것만 알면 된다. 특히 Git커밋을 다른 사람과 공유할 때 더욱 이런 특징을 고려해야 한다.

//////////
TFS has many features that integrate with its version control system, such as work items, designated reviewers, gated checkins, and so on.
It can be cumbersome to work with these features using only a command-line tool, but fortunately git-tfs lets you launch a graphical checkin tool very easily:
//////////
TFS는 작업 항목이나, 리뷰어 지정, 게이트 체크인등 다른 기능들과 함께 버전 컨트롤 시스템까지 많은 기능을 제공한다.
이 많은 기능을 커맨드 라인 도구로만 다루는 건 좀 성가실 수 있는 일이다. 다행히 git-tfs는 쉽게 사용할 수 있는 GUI 체크인 도구를 실행해주는 기능이 있다.

[source,powershell]
----
PS> git tfs checkintool
PS> git tfs ct
----

////////////
It looks a bit like this:
////////////
실행하면 이렇게 생겼다.

////////////
.The git-tfs checkin tool.
////////////
.git-tfs 체크인 도구.
image::../images/git-tfs-ct.png[The git-tfs checkin tool.]

////////////
This will look familiar to TFS users, as it's the same dialog that's launched from within Visual Studio.
////////////
Visual Studio에서 실행하는 다이얼로그와 똑같아서 TFS 사용자들에게는 익숙한 모습일 것이다.

////////////
Git-tfs also lets you control TFVC branches from your Git repository.
As an example, let's create one:
////////////
git-tfs는 Git 저장소에서 TFVC의 브랜치를 제어할 수도 있다.
아래 예처럼 직접 하나를 만들어보자.

[source,powershell]
----
PS> git tfs branch $/tfvc-test/featureBee
The name of the local branch will be : featureBee
C26 = 1d54865c397608c004a2cadce7296f5edc22a7e5
PS> git lga
* 1d54865 (tfs/featureBee) Creation branch $/myproject/featureBee
* ff04e7c (HEAD, tfs/default, master) update code
* 71a5ddc update readme
* aea74a0 update documentation
| * 44cd729 (tfs/featureA, featureA) Goodbye
| * d202b53 Branched from $/tfvc-test/Trunk
|/
* c403405 Hello
* b75da1a New project
----

////////////
Creating a branch in TFVC means adding a changeset where that branch now exists, and this is projected as a Git commit.
Note also that git-tfs *created* the `tfs/featureBee` remote branch, but `HEAD` is still pointing to `master`.
If you want to work on the newly-minted branch, you'll want to base your new commits on the `1d54865` commit, perhaps by creating a topic branch from that commit.
////////////
TFVC에 브랜치를 만드는 것은 현재 있는 브랜치에 변경집합을 하나 추가하는 것과 같다. 이 변경집합은 Git의 커밋으로 표현된다.
*git-tfs*는 `tfs/featureBee`라는 리모트 브랜치를 만들었지만,`HEAD`는 여전히 `master`인 것에 주목하자.
방금 만든 브랜치에서 작업을 하려면 새로 만들어진 커밋 `1d54865`에서 시작하면 된다. 이 커밋으로부터 새로운 토픽 브랜치가 만들어질 것이다.

////////////
===== Git and TFS Summary
////////////
===== Git과 TFS 요약

////////////
Git-tf and Git-tfs are both great tools for interfacing with a TFVC server.
They allow you to use the power of Git locally, avoid constantly having to round-trip to the central TFVC server, and make your life as a developer much easier, without forcing your entire team to migrate to Git.
If you're working on Windows (which is likely if your team is using TFS), you'll probably want to use git-tfs, since it's feature set is more complete, but if you're working on another platform, you'll be using git-tf, which is more limited.
As with most of the tools in this chapter, you should choose one of these version-control systems to be canonical, and use the other one in a subordinate fashion – either Git or TFVC should be the center of collaboration, but not both.
////////////
Git-tf와 Git-tfs는 둘 다 TFVC 서버랑 잘 맞는 멋진 도구다.
중앙 TFVC 서버에 주기적으로 접근하지 않으면서 Git의 장점을 그대로 활용할 수 있다. 또 팀원 전체에게 Git으로 시스템을 바꾸자고 이야기하지 않고서도 개발자로 사는 삶이 풍요로워진다.
당신이 윈도우즈에서 작업을 한다면(즉, 팀이 TFS를 쓴다면) TFS의 기능을 더 많이 지원하는 Git-tfs를 추천한다. 만약 다른 플랫폼에서 작업한다면 Git-tf를 추천한다.
이 챕터에서 소개한 도구 대부분과 마찬가지로 기준이 되는 하나의 버전 관리 시스템을 선택해서 사용해야 한다. 다른 것은 부차적이다. Git이든 TFVC이든 하나를 골라 협업의 도구로 사용해야 한다. 둘 다 사용할 수는 없다.
