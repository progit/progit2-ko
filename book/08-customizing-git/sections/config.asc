[[_git_config]]
//////////////////////////
=== Git Configuration
//////////////////////////
=== Git 설정하기

(((git commands, config)))
//////////////////////////
As you briefly saw in <<_getting_started>>, you can specify Git configuration settings with the `git config` command.
One of the first things you did was set up your name and e-mail address:
//////////////////////////
<<_getting_started>> 에서 `git config` 명령을 사용했다.
제일 먼저 해야 하는 것은 `git config` 명령으로 이름과 e-mail 주소를 설정하는 것이다.

[source,console]
----
$ git config --global user.name "John Doe"
$ git config --global user.email johndoe@example.com
----

//////////////////////////
Now you'll learn a few of the more interesting options that you can set in this manner to customize your Git usage.
//////////////////////////
여기서는 이렇게 설정하는 것 중에서 중요한 것만 몇 가지 배운다.

//////////////////////////
First, a quick review: Git uses a series of configuration files to determine non-default behavior that you may want.
The first place Git looks for these values is in an `/etc/gitconfig` file, which contains values for every user on the system and all of their repositories.
If you pass the option `--system` to `git config`, it reads and writes from this file specifically.
//////////////////////////
우선 Git은 내장된 기본 규칙 따르지만, 설정된 것이 있으면 그에 따른다는 점을 생각해두자.
Git은 먼저 `/etc/gitconfig` 파일을 찾는다. 이 파일은 해당 시스템에 있는 모든 사용자와 모든 저장소에 적용되는 설정 파일이다.
`git config` 명령에 `--system` 옵션을 주면 이 파일을 사용한다.

//////////////////////////
The next place Git looks is the `~/.gitconfig` (or `~/.config/git/config`) file, which is specific to each user.
You can make Git read and write to this file by passing the `--global` option.
//////////////////////////
다음으로 `~/.gitconfig` 파일을 찾는다. 이 파일은 해당 사용자에게만 적용되는 설정 파일이다.
`--global` 옵션을 주면 Git은 이 파일을 사용한다.

//////////////////////////
Finally, Git looks for configuration values in the configuration file in the Git directory (`.git/config`) of whatever repository you're currently using.
These values are specific to that single repository.
//////////////////////////
마지막으로 현재 작업 중인 저장소의 Git 디렉토리에 있는 `.git/config` 파일을 찾는다.
이 파일은 해당 저장소에만 적용된다.

//////////////////////////
Each of these ``levels'' (system, global, local) overwrites values in the previous level, so values in `.git/config` trump those in `/etc/gitconfig`, for instance.
//////////////////////////
각 설정 파일에 중복된 설정이 있으면 설명한 ``순서대로'' 덮어쓴다. 예를 들어 `.git/config`와 `/etc/gitconfig`에 같은 설정이 들어 있다면 `.git/config`에 있는 설정을 사용한다.

[NOTE]
//////////////////////////
====
Git's configuration files are plain-text, so you can also set these values by manually editing the file and inserting the correct syntax.
It's generally easier to run the `git config` command, though.
====
//////////////////////////
====
설정 파일 일반적인 텍스트파일로 쉽게 고쳐 쓸 수 있다.
보통 `git config` 명령을 사용하는 것이 더 편하다.
====

//////////////////////////
==== Basic Client Configuration
//////////////////////////
==== 클라이언트 설정

//////////////////////////
The configuration options recognized by Git fall into two categories: client-side and server-side.
The majority of the options are client-side – configuring your personal working preferences.
Many, _many_ configuration options are supported, but a large fraction of them are only useful in certain edge cases.
We'll only be covering the most common and most useful here.
If you want to see a list of all the options your version of Git recognizes, you can run
//////////////////////////
설정이 영향을 미치는 대상에 따라 클라이언트 설정과 서버 설정으로 나눠볼 수 있다.
대부분은 개인작업 환경과 관련된 클라이언트 설정이다.
Git에는 설정거리가 매우 많은데, 여기서는 Workflow를 관리하는 데 필요한 것과 주로 많이 사용하는 것만 설명한다.
한 번도 겪지 못할 상황에서나 유용한 옵션까지 다 포함하면 설정할 게 너무 많다.
Git 버전마다 옵션이 조금씩 다른데, 아래와 같이 실행하면 설치한 버전에서 사용할 수 있는 옵션을 모두 보여준다.

[source,console]
----
$ man git-config
----

//////////////////////////
This command lists all the available options in quite a bit of detail.
You can also find this reference material at http://git-scm.com/docs/git-config.html[].
//////////////////////////
어떤 옵션을 사용할 수 있는지 매우 자세히 설명하고 있다.
http://git-scm.com/docs/git-config.html[] 페이지에서도 같은 내용을 볼 수 있다.

===== `core.editor`

((($EDITOR)))((($VISUAL, see $EDITOR)))
//////////////////////////
By default, Git uses whatever you've set as your default text editor (`$VISUAL` or `$EDITOR`) or else falls back to the `vi` editor to create and edit your commit and tag messages.
To change that default to something else, you can use the `core.editor` setting:
//////////////////////////
Git은 편집기를 설정(`$VISUAL`, `$EDITOR` 변수로 설정)하지 않았거나 설정한 편집기를 찾을 수 없으면 `vi`를 실행한다. 커밋할 때나 tag 메시지를 편집할 때 설정한 편집기를 실행한다.
`code.editor` 설정으로 편집기를 설정한다.

[source,console]
----
$ git config --global core.editor emacs
----

//////////////////////////
Now, no matter what is set as your default shell editor, Git will fire up Emacs to edit messages.
//////////////////////////
이렇게 설정하면 메시지를 편집할 때 환경변수에 설정한 편집기가 아니라 Emacs를 실행한다.

===== `commit.template`

(((commit templates)))
//////////////////////////
If you set this to the path of a file on your system, Git will use that file as the default message when you commit.
For instance, suppose you create a template file at `~/.gitmessage.txt` that looks like this:
//////////////////////////
커밋할 때 Git이 보여주는 커밋 메시지는 이 옵션에 설정한 템플릿 파일이다.
예를 들어 `~/.gitmessage.txt` 파일을 아래와 같이 만든다.

[source]
----
subject line

what happened

[ticket: X]
----

//////////////////////////
To tell Git to use it as the default message that appears in your editor when you run `git commit`, set the `commit.template` configuration value:
//////////////////////////
이 파일을 `commit.template`에 설정하면 Git은 `git commit` 명령이 실행하는 편집기에 이 메시지를 기본으로 넣어준다.

[source,console]
----
$ git config --global commit.template ~/.gitmessage.txt
$ git commit
----

//////////////////////////
Then, your editor will open to something like this for your placeholder commit message when you commit:
//////////////////////////
그러면 커밋할 때 아래와 같은 메시지를 편집기에 자동으로 채워준다.

[source]
----
subject line

what happened

[ticket: X]
# Please enter the commit message for your changes. Lines starting
# with '#' will be ignored, and an empty message aborts the commit.
# On branch master
# Changes to be committed:
#   (use "git reset HEAD <file>..." to unstage)
#
# modified:   lib/test.rb
#
~
~
".git/COMMIT_EDITMSG" 14L, 297C
----

//////////////////////////
If your team has a commit-message policy, then putting a template for that policy on your system and configuring Git to use it by default can help increase the chance of that policy being followed regularly.
//////////////////////////
소속 팀에 커밋 메시지 규칙이 있으면 그 규칙에 맞는 템플릿 파일을 만들고 시스템 설정에 설정해둔다. Git이 그 파일을 사용하도록 설정하면 규칙을 따르기가 쉬워진다.

===== `core.pager`

(((pager)))
//////////////////////////
This setting determines which pager is used when Git pages output such as `log` and `diff`.
You can set it to `more` or to your favorite pager (by default, it's `less`), or you can turn it off by setting it to a blank string:
//////////////////////////
Git은 `log`나 `diff`같은 명령의 메시지를 출력할 때 페이지로 나누어 보여준다.
기본으로 사용하는 명령은 `less`다. `more`를 더 좋아하면 `more`라고 설정한다. 페이지를 나누고 싶지 않으면 빈 문자열로 설정한다.

[source,console]
----
$ git config --global core.pager ''
----

//////////////////////////
If you run that, Git will page the entire output of all commands, no matter how long they are.
//////////////////////////
이 명령을 실행하면 Git은 길든지 짧든지 결과를 한 번에 다 보여 준다.

===== `user.signingkey`

(((GPG)))
//////////////////////////
If you're making signed annotated tags (as discussed in <<_signing>>), setting your GPG signing key as a configuration setting makes things easier.
Set your key ID like so:
//////////////////////////
이 설정은 <<_signing>> 에서 설명했던 Annotated Tag를 만들 때 유용하다. 사용할 GPG 키를 설정해 둘 수 있다.
아래처럼 GPG 키를 설정하면 서명할 때 편리하다.

[source,console]
----
$ git config --global user.signingkey <gpg-key-id>
----

//////////////////////////
Now, you can sign tags without having to specify your key every time with the `git tag` command:
//////////////////////////
`git tag` 명령을 실행할 때 키를 생략하고 서명할 수 있다.

[source,console]
----
$ git tag -s <tag-name>
----

===== `core.excludesfile`

(((excludes)))(((.gitignore)))
//////////////////////////
You can put patterns in your project's `.gitignore` file to have Git not see them as untracked files or try to stage them when you run `git add` on them, as discussed in <<_ignoring>>.
//////////////////////////
Git에서 `git add` 명령으로 추적할 파일에 포함하지 않을 파일은 `.gitignore`에 해당 패턴을 적으면 된다고 <<_ignoring>>에서 설명했다.

//////////////////////////
But sometimes you want to ignore certain files for all repositories that you work with.
If your computer is running Mac OS X, you're probably familiar with `.DS_Store` files.
If your preferred editor is Emacs or Vim, you know about files that end with a `~`.
//////////////////////////
한 저장소 안에서뿐 아니라 어디에서라도 Git에 포함하지 않을 파일을 설정할 수 있다.
예를 들어 Mac을 쓰는 사람이라면 `.DS_Store` 파일을 자주 보았을 것이다.
Emacs나 Vim를 쓰다 보면 이름 끝에 `~` 붙여둔 임시 파일도 있다.

//////////////////////////
This setting lets you write a kind of global `.gitignore` file.
If you create a `~/.gitignore_global` file with these contents:
//////////////////////////
`.gitignore` 파일처럼 무시할 파일을 설정할 수 있는데 `~/.gitignore_global` 파일 안에 아래 내용으로 입력해두고

[source]
----
*~
.DS_Store
----

//////////////////////////
…and you run `git config --global core.excludesfile ~/.gitignore_global`, Git will never again bother you about those files.
//////////////////////////
`git config --global core.excludesfile ~/.gitignore_global` 명령으로 설정을 추가하면 더는 위와 같은 파일이 포함되지 않을 것이다.

===== `help.autocorrect`

(((autocorrect)))
//////////////////////////
If you mistype a command, it shows you something like this:
//////////////////////////
명령어를 잘못 입력하면 Git은 메시지를 아래와 같이 보여 준다.

[source,console]
----
$ git chekcout master
git: 'chekcout' is not a git command. See 'git --help'.

Did you mean this?
    checkout
----

//////////////////////////
Git helpfully tries to figure out what you meant, but it still refuses to do it.
If you set `help.autocorrect` to 1, Git will actually run this command for you:
//////////////////////////
Git은 어떤 명령을 입력하려고 했을지 추측해서 보여주긴 하지만 직접 실행하진 않는다.
그러나 `help.autocorrect`를 1로 설정하면 명령어를 잘못 입력해도 Git이 자동으로 해당 명령어를 찾아서 실행해준다.

[source,console]
----
$ git chekcout master
WARNING: You called a Git command named 'chekcout', which does not exist.
Continuing under the assumption that you meant 'checkout'
in 0.1 seconds automatically...
----

//////////////////////////
Note that ``0.1 seconds'' business. `help.autocorrect` is actually an integer which represents tenths of a second.
So if you set it to 50, Git will give you 5 seconds to change your mind before executing the autocorrected command.
//////////////////////////
여기서 재밌는 것은 ``0.1 seconds'' 이다. 사실 `help.autocorrect` 설정에 사용하는 값은 1/10 초 단위의 숫자를 나타낸다.
만약 50이라는 값으로 설정한다면 자동으로 고친 명령을 실행할 때 Git은 5초간 명령을 실행하지 않고 기다려줄 수 있다.

//////////////////////////
==== Colors in Git
//////////////////////////
==== 컬러 터미널

(((color)))
//////////////////////////
Git fully supports colored terminal output, which greatly aids in visually parsing command output quickly and easily.
A number of options can help you set the coloring to your preference.
//////////////////////////
사람이 쉽게 인식할 수 있도록 터미널에 결과를 컬러로 출력할 수 있다.
터미널 컬러와 관련된 옵션은 매우 다양하기 때문에 꼼꼼하게 설정할 수 있다.

===== `color.ui`

//////////////////////////
Git automatically colors most of its output, but there's a master switch if you don't like this behavior.
To turn off all Git's colored terminal output, do this:
//////////////////////////
Git은 기본적으로 터미널에 출력하는 결과물을 알아서 색칠하지만, 이 색칠하는 기능을 끄고 싶다면 한 가지 설정만 해 두면 된다.
아래와 같은 명령을 실행하면 더는 색칠된 결과물을 내지 않는다.

[source,console]
----
$ git config --global color.ui false
----

//////////////////////////
The default setting is `auto`, which colors output when it's going straight to a terminal, but omits the color-control codes when the output is redirected to a pipe or a file.
//////////////////////////
컬러 설정의 기본 값은 `auto`로 터미널에 출력할 때는 색칠하지만, 결과가 리다이렉션되거나 파일로 출력되면 색칠하지 않는다.

//////////////////////////
You can also set it to `always` to ignore the difference between terminals and pipes.
You'll rarely want this; in most scenarios, if you want color codes in your redirected output, you can instead pass a `--color` flag to the Git command to force it to use color codes.
The default setting is almost always what you'll want.
//////////////////////////
`always` 로 설정하면 터미널이든 다른 출력이든 상관없이 색칠하여 내보낸다.
대개 이 값을 설정해서 사용하지 않는다. `--color` 옵션을 사용하면 강제로 결과를 색칠해서 내도록 할 수 있기 때문이다.
대부분은 기본 값이 낫다.

===== `color.*`

//////////////////////////
If you want to be more specific about which commands are colored and how, Git provides verb-specific coloring settings.
Each of these can be set to `true`, `false`, or `always`:
//////////////////////////
Git은 좀 더 꼼꼼하게 컬러를 설정하는 방법을 제공한다.
아래와 같은 설정들이 있다. 모두 `true`, `false`, `always` 중 하나를 고를 수 있다.

  color.branch
  color.diff
  color.interactive
  color.status

//////////////////////////
In addition, each of these has subsettings you can use to set specific colors for parts of the output, if you want to override each color.
For example, to set the meta information in your diff output to blue foreground, black background, and bold text, you can run
//////////////////////////
또한, 각 옵션의 컬러를 직접 지정할 수도 있다.
아래처럼 설정하면 diff 명령에서 meta 정보의 포그라운드는 blue, 백그라운드는 black, 테스트는 bold로 바뀐다.

  $ git config --global color.diff.meta "blue black bold"

//////////////////////////
You can set the color to any of the following values: `normal`, `black`, `red`, `green`, `yellow`, `blue`, `magenta`, `cyan`, or `white`.
If you want an attribute like bold in the previous example, you can choose from `bold`, `dim`, `ul` (underline), `blink`, and `reverse` (swap foreground and background).
//////////////////////////
컬러는 `normal`, `black`, `red`, `green`, `yellow`, `blue`, `magenta`, `cyan`, `white` 중에서 고를 수 있다.
텍스트 속성은 `bold`, `dim`, `ul` (underline), `blink`, `reverse` 중에서 고를 수 있다.

[[_external_merge_tools]]
//////////////////////////
==== External Merge and Diff Tools
//////////////////////////
==== 다른 Merge, Diff 도구 사용하기

(((mergetool)))(((difftool)))
//////////////////////////
Although Git has an internal implementation of diff, which is what we've been showing in this book, you can set up an external tool instead.
You can also set up a graphical merge-conflict-resolution tool instead of having to resolve conflicts manually.
We'll demonstrate setting up the Perforce Visual Merge Tool (P4Merge) to do your diffs and merge resolutions, because it's a nice graphical tool and it's free.
//////////////////////////
Git에 들어 있는 diff 도구 말고 다른 도구로 바꿀 수 있다.
화려한 GUI 도구로 바꿔서 좀 더 편리하게 충돌을 해결할 수 있다.
여기서는 Perforce의 Merge 도구인 P4Merge로 설정하는 것을 보여준다. P4Merge는 무료인데다 꽤 괜찮다.

//////////////////////////
If you want to try this out, P4Merge works on all major platforms, so you should be able to do so.
We'll use path names in the examples that work on Mac and Linux systems; for Windows, you'll have to change `/usr/local/bin` to an executable path in your environment.
//////////////////////////
P4Merge는 중요 플랫폼을 모두 지원하기 때문에 웬만한 환경이면 사용할 수 있다.
여기서는 Mac과 Linux 시스템에 설치하는 것을 보여준다. 윈도에서 사용하려면 `/usr/local/bin` 경로만 윈도 경로로 바꿔준다.

//////////////////////////
To begin, download P4Merge from http://www.perforce.com/downloads/Perforce/[].
Next, you'll set up external wrapper scripts to run your commands.
We'll use the Mac path for the executable; in other systems, it will be where your `p4merge` binary is installed.
Set up a merge wrapper script named `extMerge` that calls your binary with all the arguments provided:
//////////////////////////
먼저 http://www.perforce.com/downloads/Perforce/[] 에서 P4Merge를 내려받는다.
그 후에 P4Merge에 쓸 Wrapper 스크립트를 만든다.
필자는 Mac 사용자라서 Mac 경로를 사용한다. 어떤 시스템이든 `p4merge`가 설치된 경로를 사용하면 된다.
예제에서는 `extMerge`라는 Merge용 Wrapper 스크립트를 만들고 이 스크립트로 넘어오는 모든 아규먼트를 p4merge 프로그램으로 넘긴다.

[source,console]
----
$ cat /usr/local/bin/extMerge
#!/bin/sh
/Applications/p4merge.app/Contents/MacOS/p4merge $*
----

//////////////////////////
The diff wrapper checks to make sure seven arguments are provided and passes two of them to your merge script.
By default, Git passes the following arguments to the diff program:
//////////////////////////
그리고 diff용 Wrapper도 만든다. 이 스크립트로 넘어오는 아규먼트는 총 7개지만 그 중 2개만 Merge Wrapper로 넘긴다.
Git이 diff 프로그램에 넘겨주는 아규먼트는 아래와 같다.

[source]
----
path old-file old-hex old-mode new-file new-hex new-mode
----

//////////////////////////
Because you only want the `old-file` and `new-file` arguments, you use the wrapper script to pass the ones you need.
//////////////////////////
이 중에서 `old-file`과 `new-file` 만 사용하는 wrapper 스크립트를 만든다.

[source,console]
----
$ cat /usr/local/bin/extDiff
#!/bin/sh
[ $# -eq 7 ] && /usr/local/bin/extMerge "$2" "$5"
----

//////////////////////////
You also need to make sure these tools are executable:
//////////////////////////
이 두 스크립트에 실행 권한을 부여한다.

[source,console]
----
$ sudo chmod +x /usr/local/bin/extMerge
$ sudo chmod +x /usr/local/bin/extDiff
----

//////////////////////////
Now you can set up your config file to use your custom merge resolution and diff tools.
This takes a number of custom settings: `merge.tool` to tell Git what strategy to use, `mergetool.<tool>.cmd` to specify how to run the command, `mergetool.<tool>.trustExitCode` to tell Git if the exit code of that program indicates a successful merge resolution or not, and `diff.external` to tell Git what command to run for diffs.
So, you can either run four config commands
//////////////////////////
Git config 파일에 이 스크립트를 모두 추가한다. 설정해야 하는 옵션이 좀 많다.
`merge.tool`로 무슨 Merge 도구를 사용할지, `mergetool.*.cmd`로 실제로 어떻게 명령어를 실행할지, `mergetool.trustExitCode`로 Merge 도구가 반환하는 exit 코드가 Merge의 성공 여부를 나타내는지, `diff.external`은 diff할 때 실행할 명령어가 무엇인지를 설정할 때 사용한다.
모두 `git config` 명령으로 설정한다.

[source,console]
----
$ git config --global merge.tool extMerge
$ git config --global mergetool.extMerge.cmd \
  'extMerge \"$BASE\" \"$LOCAL\" \"$REMOTE\" \"$MERGED\"'
$ git config --global mergetool.extMerge.trustExitCode false
$ git config --global diff.external extDiff
----
//////////////////////////
or you can edit your `~/.gitconfig` file to add these lines:
//////////////////////////
`~/.gitconfig/` 파일을 직접 편집해도 된다.

[source,ini]
----
[merge]
  tool = extMerge
[mergetool "extMerge"]
  cmd = extMerge "$BASE" "$LOCAL" "$REMOTE" "$MERGED"
  trustExitCode = false
[diff]
  external = extDiff
----

//////////////////////////
After all this is set, if you run diff commands such as this:
//////////////////////////
설정을 완료하고 나서 아래와 같이 diff 명령어를 실행한다.

[source,console]
----
$ git diff 32d1776b1^ 32d1776b1
----

//////////////////////////
Instead of getting the diff output on the command line, Git fires up P4Merge, which looks something like this:
//////////////////////////
diff 결과가 터미널에 출력되는 대신 P4Merge가 실행되어 아래처럼 Diff 결과를 보여준다.

.P4Merge.
image::images/p4merge.png[P4Merge.]

//////////////////////////
If you try to merge two branches and subsequently have merge conflicts, you can run the command `git mergetool`; it starts P4Merge to let you resolve the conflicts through that GUI tool.
//////////////////////////
브랜치를 Merge할 때 충돌이 나면 `git mergetool` 명령을 실행한다. 이 명령을 실행하면 GUI 도구로 충돌을 해결할 수 있도록 P4Merge를 실행해준다.

//////////////////////////
The nice thing about this wrapper setup is that you can change your diff and merge tools easily.
For example, to change your `extDiff` and `extMerge` tools to run the KDiff3 tool instead, all you have to do is edit your `extMerge` file:
//////////////////////////
Wrapper를 만들어 설정해두면 다른 Diff, Merge 도구로 바꾸기도 쉽다.
예를 들어, KDiff3를 사용하도록 `extDiff`와 `extMerge` 스크립트를 수정한다.

[source,console]
----
$ cat /usr/local/bin/extMerge
#!/bin/sh
/Applications/kdiff3.app/Contents/MacOS/kdiff3 $*
----

//////////////////////////
Now, Git will use the KDiff3 tool for diff viewing and merge conflict resolution.
//////////////////////////
이제부터 Git은 Diff 결과를 보여주거나 충돌을 해결할 때 KDiff3 도구를 사용한다.

//////////////////////////
Git comes preset to use a number of other merge-resolution tools without your having to set up the cmd configuration.
To see a list of the tools it supports, try this:
//////////////////////////
어떤 Merge 도구는 Git에 미리 설정이 들어 있다. 그래서 추가로 스크립트를 작성하거나 하는 설정 없이 사용할 수 있는 것도 있다.
아래와 같은 명령으로 확인해볼 수 있다.

[source,console]
----
$ git mergetool --tool-help
'git mergetool --tool=<tool>' may be set to one of the following:
        emerge
        gvimdiff
        gvimdiff2
        opendiff
        p4merge
        vimdiff
        vimdiff2

The following tools are valid, but not currently available:
        araxis
        bc3
        codecompare
        deltawalker
        diffmerge
        diffuse
        ecmerge
        kdiff3
        meld
        tkdiff
        tortoisemerge
        xxdiff

Some of the tools listed above only work in a windowed
environment. If run in a terminal-only session, they will fail.
----

//////////////////////////
If you're not interested in using KDiff3 for diff but rather want to use it just for merge resolution, and the kdiff3 command is in your path, then you can run
//////////////////////////
Diff 도구로는 다른 것을 사용하지만, Merge 도구로는 KDiff3를 사용하고 싶은 경우에는 kdiff3 명령을 실행경로로 넣고 아래와 같이 설정하기만 하면 된다.

[source,console]
----
$ git config --global merge.tool kdiff3
----

//////////////////////////
If you run this instead of setting up the `extMerge` and `extDiff` files, Git will use KDiff3 for merge resolution and the normal Git diff tool for diffs.
//////////////////////////
`extMerge`와 `extDiff` 파일을 만들지 않고 이렇게 Merge 도구만 `kdiff3`로 설정하고 Diff 도구는 Git에 원래 들어 있는 것을 사용할 수 있다.

==== Formatting and Whitespace

(((whitespace)))
//////////////////////////
Formatting and whitespace issues are some of the more frustrating and subtle problems that many developers encounter when collaborating, especially cross-platform.
It's very easy for patches or other collaborated work to introduce subtle whitespace changes because editors silently introduce them, and if your files ever touch a Windows system, their line endings might be replaced.
Git has a few configuration options to help with these issues.
//////////////////////////
협업할 때 겪는 소스 포맷(Formatting)과 공백 문제는 미묘하고 난해하다. 동료 사이에 사용하는 플랫폼이 다를 때는 특히 더 심하다.
다른 사람이 보내온 Patch는 공백 문자 패턴이 미묘하게 다를 확률이 높다. 편집기가 몰래 공백문자를 추가해 버릴 수도 있고 크로스-플랫폼 프로젝트에서 윈도 개발자가 줄 끝에 CR(Carriage-Return) 문자를 추가해 버렸을 수도 있다.
Git에는 이 이슈를 돕는 몇 가지 설정이 있다.

===== `core.autocrlf`

(((crlf)))(((line endings)))
//////////////////////////
If you're programming on Windows and working with people who are not (or vice-versa), you'll probably run into line-ending issues at some point.
This is because Windows uses both a carriage-return character and a linefeed character for newlines in its files, whereas Mac and Linux systems use only the linefeed character.
This is a subtle but incredibly annoying fact of cross-platform work; many editors on Windows silently replace existing LF-style line endings with CRLF, or insert both line-ending characters when the user hits the enter key.
//////////////////////////
윈도에서 개발하는 동료와 함께 일하면 줄 바꿈(New Line) 문자에 문제가 생긴다.
윈도는 줄 바꿈 문자로 CR(Carriage-Return)과 LF(Line Feed) 문자를 둘 다 사용하지만, Mac과 Linux는 LF 문자만 사용한다.
아무것도 아닌 것 같지만, 크로스 플랫폼 프로젝트에서는 꽤 성가신 문제다. 윈도에서 사용하는 많은 편집기가 자동으로 LF 스타일의 줄 바꿈 스타일을 CRLF로 바꾸거나 Enter 키를 입력하면 CRLF 스타일을 사용하기 때문이다.

//////////////////////////
Git can handle this by auto-converting CRLF line endings into LF when you add a file to the index, and vice versa when it checks out code onto your filesystem.
You can turn on this functionality with the `core.autocrlf` setting.
If you're on a Windows machine, set it to `true` – this converts LF endings into CRLF when you check out code:
//////////////////////////
Git은 커밋할 때 자동으로 CRLF를 LF로 변환해주고 반대로 Checkout할 때 LF를 CRLF로 변환해 주는 기능이 있다.
`core.autocrlf` 설정으로 이 기능을 켤 수 있다.
윈도에서 이 값을 true로 설정하면 Checkout할 때 LF 문자가 CRLR 문자로 변환된다.

[source,console]
----
$ git config --global core.autocrlf true
----

//////////////////////////
If you're on a Linux or Mac system that uses LF line endings, then you don't want Git to automatically convert them when you check out files; however, if a file with CRLF endings accidentally gets introduced, then you may want Git to fix it.
You can tell Git to convert CRLF to LF on commit but not the other way around by setting `core.autocrlf` to input:
//////////////////////////
줄 바꿈 문자로 LF를 사용하는 Linux와 Mac에서는 Checkout할 때 Git이 LF를 CRLF로 변환할 필요가 없다. 게다가 우연히 CRLF가 들어간 파일이 저장소에 들어 있어도 Git이 알아서 고쳐주면 좋을 것이다.
`core.autocrlf` 값을 input으로 설정하면 커밋할 때만 CRLF를 LF로 변환한다.

[source,console]
----
$ git config --global core.autocrlf input
----

//////////////////////////
This setup should leave you with CRLF endings in Windows checkouts, but LF endings on Mac and Linux systems and in the repository.
//////////////////////////
이 설정을 이용하면 윈도에서는 CRLF를 사용하고 Mac, Linux, 저장소에서는 LF를 사용할 수 있다.

//////////////////////////
If you're a Windows programmer doing a Windows-only project, then you can turn off this functionality, recording the carriage returns in the repository by setting the config value to `false`:
//////////////////////////
윈도 플랫폼에서만 개발하면 이 기능이 필요 없다.
이 옵션을 `false`라고 설정하면 이 기능이 꺼지고 CR 문자도 저장소에도 저장된다.

[source,console]
----
$ git config --global core.autocrlf false
----

===== `core.whitespace`

//////////////////////////
Git comes preset to detect and fix some whitespace issues.
It can look for six primary whitespace issues – three are enabled by default and can be turned off, and three are disabled by default but can be activated.
//////////////////////////
Git에는 공백 문자를 다루는 방법으로 네 가지가 미리 정의돼 있다.
두 가지는 기본적으로 켜져 있지만 끌 수 있고 나머지 두 가지는 꺼져 있지만 켤 수 있다.

//////////////////////////
The ones that are turned on by default are `blank-at-eol`, which looks for spaces at the end of a line; `blank-at-eof`, which notices blank lines at the end of a file; and `space-before-tab`, which looks for spaces before tabs at the beginning of a line.
//////////////////////////
먼저 기본적으로 켜져 있는 것을 살펴보자. `blank-at-eol`는 각 줄 끝에 공백이 있는지 찾고, `blank-at-eof`는 파일 끝에 추가한 빈 줄이 있는지 찾고, `space-before-tab`은 모든 줄 처음에 tab보다 공백이 먼저 나오는지 찾는다.

//////////////////////////
The three that are disabled by default but can be turned on are `indent-with-non-tab`, which looks for lines that begin with spaces instead of tabs (and is controlled by the `tabwidth` option); `tab-in-indent`, which watches for tabs in the indentation portion of a line; and `cr-at-eol`, which tells Git that carriage returns at the end of lines are OK.
//////////////////////////
기본적으로 꺼져 있는 나머지 세 개는 `indent-with-non-tab`과 `tab-in-indent`과 `cr-at-eol`이다. `intent-with-non-tab`은 tab이 아니라 공백으로(`tabwidth` 설정에 영향받음) 시작하는 줄이 있는지 찾고 `cr-at-eol`은 줄 끝에 CR 문자가 있어도 괜찮다고 Git에 알리는 것이다.

//////////////////////////
You can tell Git which of these you want enabled by setting `core.whitespace` to the values you want on or off, separated by commas.
You can disable settings by either leaving them out of the setting string or prepending a `-` in front of the value.
For example, if you want all but `cr-at-eol` to be set, you can do this:
//////////////////////////
`core.whitespace` 옵션으로 이 네 가지 방법을 켜고 끌 수 있다.
설정에서 해당 옵션을 빼버리거나 이름이 `-`로 시작하면 기능이 꺼진다.
예를 들어, 다른 건 다 켜고 `cr-at-eol` 옵션만 끄려면 아래와 같이 설정한다.

[source,console]
----
$ git config --global core.whitespace \
    trailing-space,space-before-tab,indent-with-non-tab
----

//////////////////////////
Git will detect these issues when you run a `git diff` command and try to color them so you can possibly fix them before you commit.
It will also use these values to help you when you apply patches with `git apply`.
When you're applying patches, you can ask Git to warn you if it's applying patches with the specified whitespace issues:
//////////////////////////
`git diff` 명령을 실행하면 Git은 이 설정에 따라 검사해서 컬러로 표시해준다.
그래서 좀 더 쉽게 검토해서 커밋할 수 있다.
`git apply` 명령으로 Patch를 적용할 때도 이 설정을 이용할 수 있다. 아래처럼 명령어를 실행하면 해당 Patch가 공백문자 정책에 들어맞는지 확인할 수 있다.

[source,console]
----
$ git apply --whitespace=warn <patch>
----

//////////////////////////
Or you can have Git try to automatically fix the issue before applying the patch:
//////////////////////////
아니면 Git이 자동으로 고치도록 할 수 있다.

[source,console]
----
$ git apply --whitespace=fix <patch>
----

//////////////////////////
These options apply to the `git rebase` command as well.
If you've committed whitespace issues but haven't yet pushed upstream, you can run `git rebase --whitespace=fix` to have Git automatically fix whitespace issues as it's rewriting the patches.
//////////////////////////
이 옵션은 `git rebase` 명령에서도 사용할 수 있다.
공백 문제가 있는 커밋을 서버로 Push하기 전에  `--whitespace=fix` 옵션을 주고 Rebase하면 Git은 다시 Patch를 적용하면서 공백을 설정한 대로 고친다.

//////////////////////////
==== Server Configuration
//////////////////////////
==== 서버 설정

//////////////////////////
Not nearly as many configuration options are available for the server side of Git, but there are a few interesting ones you may want to take note of.
//////////////////////////
서버 설정은 많지 않지만, 꼭 짚고 넘어가야 하는 것이 몇 개 있다.

===== `receive.fsckObjects`

//////////////////////////
Git is capable of making sure every object received during a push still matches its SHA-1 checksum and points to valid objects.
However, it doesn't do this by default; it's a fairly expensive operation, and might slow down the operation, especially on large repositories or pushes.
If you want Git to check object consistency on every push, you can force it to do so by setting `receive.fsckObjects` to true:
//////////////////////////
Git은 Push할 때마다 각 개체가 SHA-1 체크섬에 맞는지 잘못된 개체가 가리키고 있는지 검사하게 할 수 있다.
기본적으로 이 기능이 동작하지 않게 설정이 되어 있는데 개체를 점검하데 상당히 시간이 걸리기 때문에 Push하는 시간이 늘어난다. 얼마나 늘어나는지는 저장소 크기와 Push하는 양에 달렸다.
`receive.fsckOBjects` 값을 true로 설정하면 Git이 Push할 때마다 검증한다.

[source,console]
----
$ git config --system receive.fsckObjects true
----

//////////////////////////
Now, Git will check the integrity of your repository before each push is accepted to make sure faulty (or malicious) clients aren't introducing corrupt data.
//////////////////////////
이렇게 설정하면 Push할 때마다 검증하기 때문에 클라이언트는 잘못된 데이터를 Push하지 못한다.

===== `receive.denyNonFastForwards`

//////////////////////////
If you rebase commits that you've already pushed and then try to push again, or otherwise try to push a commit to a remote branch that doesn't contain the commit that the remote branch currently points to, you'll be denied.
This is generally good policy; but in the case of the rebase, you may determine that you know what you're doing and can force-update the remote branch with a `-f` flag to your push command.
//////////////////////////
이미 Push한 커밋을 Rebase해서 다시 Push하지 못하게 할 수 있다. 브랜치를 Push할 때 해당 리모트 브랜치가 가리키는 커밋이 Push하려는 브랜치에 없을 때 Push하지 못하게 할 수 있다.
보통은 이런 정책이 좋고 `git push` 명령에 `-f` 옵션을 주면 강제로 Push할 수 있다.

//////////////////////////
To tell Git to refuse force-pushes, set `receive.denyNonFastForwards`:
//////////////////////////
`receive.denyNonFastForwards` 옵션을 켜면 Fast-forward로 Push할 수 없는 브랜치는 아예 Push하지 못한다.

[source,console]
----
$ git config --system receive.denyNonFastForwards true
----

//////////////////////////
The other way you can do this is via server-side receive hooks, which we'll cover in a bit.
That approach lets you do more complex things like deny non-fast-forwards to a certain subset of users.
//////////////////////////
사용자마다 다른 정책을 적용하고 싶으면 서버 훅을 사용해야 한다.
서버의 receive 훅으로 할 수 있고 이 훅도 이 장에서 설명한다.

===== `receive.denyDeletes`

//////////////////////////
One of the workarounds to the `denyNonFastForwards` policy is for the user to delete the branch and then push it back up with the new reference.
To avoid this, set `receive.denyDeletes` to true:
//////////////////////////
`receive.denyNonFastForwards`와 비슷한 정책으로 `receive.denyDeletes`라는 것이 있다.
이 설정을 켜면 브랜치를 삭제하는 Push가 거절된다.

[source,console]
----
$ git config --system receive.denyDeletes true
----

//////////////////////////
This denies any deletion of branches or tags – no user can do it.
To remove remote branches, you must remove the ref files from the server manually.
There are also more interesting ways to do this on a per-user basis via ACLs, as you'll learn in <<_an_example_git_enforced_policy>>.
//////////////////////////
이제 브랜치나 Tag를 삭제하는 Push는 거절된다. 아무도 삭제할 수 없다.
리모트 브랜치를 삭제하려면 직접 손으로 server의 ref 파일을 삭제해야 한다.
그리고 사용자마다 다른 정책을 적용시키는 ACL을 만드는 방법도 있다. 이 방법은 <<_an_example_git_enforced_policy>> 에서 다룬다.
