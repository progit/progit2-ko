=== Git Attributes

(((attributes)))
//////////////////////////
Some of these settings can also be specified for a path, so that Git applies those settings only for a subdirectory or subset of files.
These path-specific settings are called Git attributes and are set either in a `.gitattributes` file in one of your directories (normally the root of your project) or in the `.git/info/attributes` file if you don't want the attributes file committed with your project.
//////////////////////////
디렉토리와 파일 단위로 다른 설정을 적용할 수도 있다. 이렇게 경로별로 설정하는 것을 Git Attribute 라고 부른다.
이 설정은 `.gitattributes`라는 파일에 저장하고 아무 디렉토리에나 둘 수 있지만, 보통은 프로젝트 최상위 디렉토리에 둔다. 그리고 이 파일을 커밋하고 싶지 않으면 `.gitattributes`가 아니라 `.git/info/attributes`로 파일을 만든다.

//////////////////////////
Using attributes, you can do things like specify separate merge strategies for individual files or directories in your project, tell Git how to diff non-text files, or have Git filter content before you check it into or out of Git.
In this section, you'll learn about some of the attributes you can set on your paths in your Git project and see a few examples of using this feature in practice.
//////////////////////////
이 Attribute로 Merge는 어떻게 할지, 텍스트가 아닌 파일은 어떻게 Diff할지, checkin/checkout할 때 어떻게 필터링할지 정해줄 수 있다.
이 절에서는 설정할 수 있는 Attribute가 어떤 것이 있는지, 그리고 어떻게 설정하는지 배우고 예제를 살펴본다.

//////////////////////////
==== Binary Files
//////////////////////////
==== 바이너리 파일

(((binary files)))
//////////////////////////
One cool trick for which you can use Git attributes is telling Git which files are binary (in cases it otherwise may not be able to figure out) and giving Git special instructions about how to handle those files.
For instance, some text files may be machine generated and not diffable, whereas some binary files can be diffed.
You'll see how to tell Git which is which.
//////////////////////////
이 Attribute로 어떤 파일이 바이너리 파일인지 Git에게 알려줄 수 있다. 기본적으로 Git은 어떤 파일이 바이너리 파일인지 알지 못한다. 하지만, Git에는 파일을 어떻게 다뤄야 하는지 알려주는 방법이 있다.
텍스트 파일 중에서 프로그램이 생성하는 파일에는 바이너리 파일과 진배없는 파일이 있다. 이런 파일은 diff할 수 없으니 바이너리 파일이라고 알려줘야 한다. 반대로 바이너리 파일 중에서 취급 방법을 Git에 알려주면 diff할 수 있는 파일도 있다.
이어지는 내용으로 어떻게 설정할 수 있는지 살펴보자.

//////////////////////////
===== Identifying Binary Files
//////////////////////////
===== 바이너리 파일로 설정

//////////////////////////
Some files look like text files but for all intents and purposes are to be treated as binary data.
For instance, Xcode projects on the Mac contain a file that ends in `.pbxproj`, which is basically a JSON (plain-text Javascript data format) dataset written out to disk by the IDE, which records your build settings and so on.
Although it's technically a text file (because it's all UTF-8), you don't want to treat it as such because it's really a lightweight database – you can't merge the contents if two people change it, and diffs generally aren't helpful.
The file is meant to be consumed by a machine.
In essence, you want to treat it like a binary file.
//////////////////////////
사실 텍스트 파일이지만 만든 목적과 의도를 보면 바이너리 파일인 것이 있다.
예를 들어 Mac의 Xcode는 `.pbxproj` 파일을 만든다. 이 파일은 IDE 설정 등을 디스크에 저장하는 파일로 JSON 포맷이다.
모든 것이 ASCII인 텍스트 파일이지만 실제로는 간단한 데이터베이스이기 때문에 텍스트 파일처럼 취급할 수 없다. 그래서 여러 명이 이 파일을 동시에 수정하고 Merge할 때 diff가 도움이 안 된다.
이 파일은 프로그램이 읽고 쓰는 파일이기 때문에
바이너리 파일처럼 취급하는 것이 옳다.

//////////////////////////
To tell Git to treat all `pbxproj` files as binary data, add the following line to your `.gitattributes` file:
//////////////////////////
모든 `pbxproj` 파일을 바이너리로 파일로 취급하는 설정은 아래와 같다. `.gitattributes` 파일에 넣으면 된다.

[source]
----
*.pbxproj binary
----

//////////////////////////
Now, Git won't try to convert or fix CRLF issues; nor will it try to compute or print a diff for changes in this file when you run `git show` or `git diff` on your project.
//////////////////////////
이제 `pbxproj` 파일은 CRLF 변환이 적용되지 않는다. `git show`나 `git diff` 같은 명령을 실행할 때에도 통계를 계산하거나 diff를 출력하지 않는다.

//////////////////////////
===== Diffing Binary Files
//////////////////////////
===== 바이너리 파일 Diff하기

//////////////////////////
You can also use the Git attributes functionality to effectively diff binary files.
You do this by telling Git how to convert your binary data to a text format that can be compared via the normal diff.
//////////////////////////
Git은 바이너리 파일도 Diff할 수 있다.
Git Attribute를 통해 Git이 바이너리 파일을 텍스트 포맷으로 변환하고 그 결과를 `diff` 명령으로 비교하도록 하는 것이다.

//////////////////////////
First, you'll use this technique to solve one of the most annoying problems known to humanity: version-controlling Microsoft Word documents.
Everyone knows that Word is the most horrific editor around, but oddly, everyone still uses it.
If you want to version-control Word documents, you can stick them in a Git repository and commit every once in a while; but what good does that do?
If you run `git diff` normally, you only see something like this:
//////////////////////////
먼저 이 기술을 인류에게 알려진 가장 귀찮은 문제 중 하나인 Word 문서를 버전 관리하는 상황을 살펴보자.
모든 사람이 Word가 가장 끔찍한 편집기라고 말하지만 애석하게도 모두 Word를 사용한다.
Git 저장소에 넣고 이따금 커밋하는 것만으로도 Word 문서의 버전을 관리할 수 있다.
그렇지만 `git diff`를 실행하면 다음과 같은 메시지를 볼 수 있을 뿐이다.

[source,console]
----
$ git diff
diff --git a/chapter1.docx b/chapter1.docx
index 88839c4..4afcb7c 100644
Binary files a/chapter1.docx and b/chapter1.docx differ
----

//////////////////////////
You can't directly compare two versions unless you check them out and scan them manually, right?
It turns out you can do this fairly well using Git attributes.
Put the following line in your `.gitattributes` file:
//////////////////////////
직접 파일을 하나하나 까보지 않으면 두 버전이 뭐가 다른지 알 수 없다.
Git Attribute를 사용하면 이를 더 좋게 개선할 수 있다.
`.gitattributes` 파일에 아래와 같은 내용을 추가한다.

[source]
----
*.docx diff=word
----

//////////////////////////
This tells Git that any file that matches this pattern (`.docx`) should use the ``word'' filter when you try to view a diff that contains changes.
What is the ``word'' filter?
You have to set it up.
Here you'll configure Git to use the `docx2txt` program to convert Word documents into readable text files, which it will then diff properly.
//////////////////////////
이것은 `*.docx` 파일의 두 버전이 무엇이 다른지 Diff할 때 ``word'' 필터를 사용하라고 설정하는 것이다.
그럼 ``word'' 필터는 뭘까?
이 ``word'' 필터도 정의해야 한다.
Word 문서에서 사람이 읽을 수 있는 텍스트를 추출해주는 `docx2txt` 프로그램을 사용하여 Diff에 이용한다.

//////////////////////////
First, you'll need to install `docx2txt`; you can download it from http://docx2txt.sourceforge.net[]. Follow the instructions in the `INSTALL` file to put it somewhere your shell can find it.
Next, you'll write a wrapper script to convert output to the format Git expects.
Create a file that's somewhere in your path called `docx2txt`, and add these contents:
//////////////////////////
우선 `docx2txt` 프로그램을 설치해야 하는데 http://docx2txt.sourceforge.net[] 사이트에서 다운로드 할 수 있다. `INSTALL` 부분의 설치과정을 참고하여 설치하고 쉘에서 실행할 수 있도록 설정한다.
그리고 Git에서 잘 쓸 수 있도록 Wrapper 스크립트를
`docx2txt` 라는 이름으로 아래와 같이 작성한다.

[source,console]
----
#!/bin/bash
docx2txt.pl $1 -
----

//////////////////////////
Don't forget to `chmod a+x` that file.
Finally, you can configure Git to use this script:
//////////////////////////
`chmod a+x`로 실행권한을 설정해두고
다음과 같이 Git 설정을 추가한다.

[source,console]
----
$ git config diff.word.textconv docx2txt
----

//////////////////////////
Now Git knows that if it tries to do a diff between two snapshots, and any of the files end in `.docx`, it should run those files through the ``word'' filter, which is defined as the `docx2txt` program.
This effectively makes nice text-based versions of your Word files before attempting to diff them.
//////////////////////////
이제 Git은 확장자가 `.docx`인 파일의 스냅샷을 Diff할 때 ``word'' 필터로 정의한 `docx2txt` 프로그램을 사용한다.
이 프로그램은 Word 파일을 텍스트 파일로 변환해 주기 때문에 Diff할 수 있다.

//////////////////////////
Here's an example: Chapter 1 of this book was converted to Word format and commited in a Git repository.
Then a new paragraph was added.
Here's what `git diff` shows:
//////////////////////////
이 책의 1장을 Word 파일로 만들어서 Git에 넣고 나서 단락 하나를 수정하고 저장하는 예를 살펴본다.
새로 단락을 하나 추가하고 나서
`git diff`를 실행하면 어디가 달려졌는지 확인할 수 있다.

[source,console]
----
$ git diff
diff --git a/chapter1.docx b/chapter1.docx
index 0b013ca..ba25db5 100644
--- a/chapter1.docx
+++ b/chapter1.docx
@@ -2,6 +2,7 @@
 This chapter will be about getting started with Git. We will begin at the beginning by explaining some background on version control tools, then move on to how to get Git running on your system and finally how to get it setup to start working with. At the end of this chapter you should understand why Git is around, why you should use it and you should be all setup to do so.
 1.1. About Version Control
 What is "version control", and why should you care? Version control is a system that records changes to a file or set of files over time so that you can recall specific versions later. For the examples in this book you will use software source code as the files being version controlled, though in reality you can do this with nearly any type of file on a computer.
+Testing: 1, 2, 3.
 If you are a graphic or web designer and want to keep every version of an image or layout (which you would most certainly want to), a Version Control System (VCS) is a very wise thing to use. It allows you to revert files back to a previous state, revert the entire project back to a previous state, compare changes over time, see who last modified something that might be causing a problem, who introduced an issue and when, and more. Using a VCS also generally means that if you screw things up or lose files, you can easily recover. In addition, you get all this for very little overhead.
 1.1.1. Local Version Control Systems
 Many people's version-control method of choice is to copy files into another directory (perhaps a time-stamped directory, if they're clever). This approach is very common because it is so simple, but it is also incredibly error prone. It is easy to forget which directory you're in and accidentally write to the wrong file or copy over files you don't mean to.
----

//////////////////////////
Git successfully and succinctly tells us that we added the string ``Testing: 1, 2, 3.'', which is correct.
It's not perfect – formatting changes wouldn't show up here – but it certainly works.
//////////////////////////
`git diff` 명령의 결과를 보면 ``Testing: 1, 2, 3.'' 부분이 추가된 것을 확인할 수 있다.
물론 텍스트 형식 같은 완전한 정보는 아니지만 어쨌든 유용하다.

//////////////////////////
Another interesting problem you can solve this way involves diffing image files.
One way to do this is to run image files through a filter that extracts their EXIF information – metadata that is recorded with most image formats.
If you download and install the `exiftool` program, you can use it to convert your images into text about the metadata, so at least the diff will show you a textual representation of any changes that happened:
//////////////////////////
이 방법으로 이미지 파일도 Diff할 수 있다.
필터로 EXIF 정보를 추출해서 이미지 파일을 비교한다. EXIF 정보는 대부분의 이미지 파일에 들어 있는 메타데이터다.
`exiftool`이라는 프로그램을 설치하고 이미지 파일에서 메타데이터 텍스트를 추출한다. 그리고 그 결과를 Diff해서 무엇이 달라졌는지 본다.

[source,console]
----
$ echo '*.png diff=exif' >> .gitattributes
$ git config diff.exif.textconv exiftool
----

//////////////////////////
If you replace an image in your project and run `git diff`, you see something like this:
//////////////////////////
프로젝트에 들어 있는 이미지 파일을 변경하고 `git diff`를 실행하면 아래와 같이 보여준다.

[source]
----
diff --git a/image.png b/image.png
index 88839c4..4afcb7c 100644
--- a/image.png
+++ b/image.png
@@ -1,12 +1,12 @@
 ExifTool Version Number         : 7.74
-File Size                       : 70 kB
-File Modification Date/Time     : 2009:04:21 07:02:45-07:00
+File Size                       : 94 kB
+File Modification Date/Time     : 2009:04:21 07:02:43-07:00
 File Type                       : PNG
 MIME Type                       : image/png
-Image Width                     : 1058
-Image Height                    : 889
+Image Width                     : 1056
+Image Height                    : 827
 Bit Depth                       : 8
 Color Type                      : RGB with Alpha
----

//////////////////////////
You can easily see that the file size and image dimensions have both changed.
//////////////////////////
이미지 파일의 크기와 해상도가 달라진 것을 쉽게 알 수 있다.

[[_keyword_expansion]]
//////////////////////////
==== Keyword Expansion
//////////////////////////
==== 키워드 치환

(((keyword expansion)))
//////////////////////////
SVN- or CVS-style keyword expansion is often requested by developers used to those systems.
The main problem with this in Git is that you can't modify a file with information about the commit after you've committed, because Git checksums the file first.
However, you can inject text into a file when it's checked out and remove it again before it's added to a commit.
Git attributes offers you two ways to do this.
//////////////////////////
SVN이나 CVS에 익숙한 사람들은 해당 시스템에서 사용하던 키워드 치환(Keyword Expansion) 기능을 찾는다.
Git에서는 이것이 쉽지 않다.
Git은 먼저 체크섬을 계산하고 커밋하기 때문에 그 커밋에 대한 정보를 가지고 파일을 수정할 수 없다.
하지만, Checkout할 때 그 정보가 자동으로 파일에 삽입되도록 했다가 다시 커밋할 때 삭제되도록 할 수 있다.

//////////////////////////
First, you can inject the SHA-1 checksum of a blob into an `$Id$` field in the file automatically.
If you set this attribute on a file or set of files, then the next time you check out that branch, Git will replace that field with the SHA-1 of the blob.
It's important to notice that it isn't the SHA-1 of the commit, but of the blob itself:
//////////////////////////
파일 안에 `$Id$` 필드를 넣으면 Blob의 SHA-1 체크섬을 자동으로 삽입한다.
이 필드를 파일에 넣으면 Git은 앞으로 Checkout할 때 해당 Blob의 SHA-1 값으로 교체한다.
여기서 꼭 기억해야 할 것이 있다. 교체되는 체크섬은 커밋의 것이 아니라 Blob 그 자체의 SHA-1 체크섬이다.

[source,console]
----
$ echo '*.txt ident' >> .gitattributes
$ echo '$Id$' > test.txt
----

//////////////////////////
The next time you check out this file, Git injects the SHA-1 of the blob:
//////////////////////////
Git은 이 파일을 Checkout할 때마다 SHA-1 값을 삽입해준다.

[source,console]
----
$ rm test.txt
$ git checkout -- test.txt
$ cat test.txt
$Id: 42812b7653c7b88933f8a9d6cad0ca16714b9bb3 $
----

//////////////////////////
However, that result is of limited use.
If you've used keyword substitution in CVS or Subversion, you can include a datestamp – the SHA-1 isn't all that helpful, because it's fairly random and you can't tell if one SHA-1 is older or newer than another just by looking at them.
//////////////////////////
하지만, 이것은 별로 유용하지 않다.
CVS나 SVN의 키워드 치환(Keyword Substitution)을 써봤으면 날짜(Datestamp)도 가능했다는 것을 알고 있을 것이다. SHA-1는 그냥 해시이고 식별할 수 있을 뿐이지 다른 것을 알려주진 않는다. SHA-1만으로는 예전 것보다 새것인지 오래된 것인지는 알 수 없다.

//////////////////////////
It turns out that you can write your own filters for doing substitutions in files on commit/checkout.
These are called ``clean'' and ``smudge'' filters.
In the `.gitattributes` file, you can set a filter for particular paths and then set up scripts that will process files just before they're checked out (``smudge'', see <<filters_a>>) and just before they're staged (``clean'', see <<filters_b>>).
These filters can be set to do all sorts of fun things.
//////////////////////////
Commit/Checkout할 때 사용하는 필터를 직접 만들어 쓸 수 있다.
방향에 따라 ``clean'' 필터와 ``smudge'' 필터라고 부른다.
".gitattributes" 파일에 설정하고 파일 경로마다 다른 필터를 설정할 수 있다. Checkout할 때 파일을 처리하는 것이 ``smudge'' 필터이고(<<filters_a>>) 커밋할 때 처리하는 필터가 ``clean''(<<filters_b>>) 필터이다.
이 필터로 할 수 있는 일은 무궁무진하다.

[[filters_a]]
//////////////////////////
.The ``smudge'' filter is run on checkout.
image::images/smudge.png[The ``smudge'' filter is run on checkout.]
//////////////////////////
.``smudge'' 필터는 Checkout할 때 실행된다.
image::images/smudge.png[``smudge'' 필터는 Checkout할 때 실행된다.]

[[filters_b]]
//////////////////////////
.The ``clean'' filter is run when files are staged.
image::images/clean.png[The ``clean'' filter is run when files are staged.]
//////////////////////////
.``clean'' 필터는 파일을 Stage할 때 실행된다.
image::images/clean.png[``clean'' 필터는 파일을 Stage할 때 실행된다.]

//////////////////////////
The original commit message for this feature gives a simple example of running all your C source code through the `indent` program before committing.
You can set it up by setting the filter attribute in your `.gitattributes` file to filter `*.c` files with the ``indent'' filter:
//////////////////////////
이 기능은 사실 커밋 메시지를 위한 기능이었지만 응용한다면 커밋하기 전에 `indent` 프로그램으로 C 코드 전부를 필터링하는 기능을 만들 수 있다.
`*.c` 파일에 대해 indent 필터를 거치도록 `.gitattributes` 파일에 설정한다.

[source]
----
*.c filter=indent
----

//////////////////////////
Then, tell Git what the ``indent'' filter does on smudge and clean:
//////////////////////////
아래처럼 ``indent'' 필터의 smudge와 clean이 무엇인지 설정한다.

[source,console]
----
$ git config --global filter.indent.clean indent
$ git config --global filter.indent.smudge cat
----

//////////////////////////
In this case, when you commit files that match `*.c`, Git will run them through the indent program before it stages them and then run them through the `cat` program before it checks them back out onto disk.
The `cat` program does essentially nothing: it spits out the same data that it comes in.
This combination effectively filters all C source code files through `indent` before committing.
//////////////////////////
`*.c` 파일을 커밋하면 indent 프로그램을 통해서 커밋되고 Checkout하면 `cat` 프로그램을 통해 Checkout된다.
`cat`은 입력된 데이터를 그대로 다시 내보내는 사실 아무것도 안 하는 프로그램이다.
이렇게 설정하면 모든 C 소스 파일은 `indent` 프로그램을 통해 커밋된다.

//////////////////////////
Another interesting example gets `$Date$` keyword expansion, RCS style.
To do this properly, you need a small script that takes a filename, figures out the last commit date for this project, and inserts the date into the file.
Here is a small Ruby script that does that:
//////////////////////////
이제 RCS처럼 `$Date$`를 치환하는 예제를 살펴보자.
이 기능을 구현하려면 간단한 스크립트가 하나 필요하다. 이 스크립트는 `$Date$` 필드를 프로젝트의 마지막 커밋 일자로 치환한다. 표준 입력을 읽어서 `$Date$` 필드를 치환한다.
아래는 Ruby로 구현한 스크립트다.

[source,ruby]
----
#! /usr/bin/env ruby
data = STDIN.read
last_date = `git log --pretty=format:"%ad" -1`
puts data.gsub('$Date$', '$Date: ' + last_date.to_s + '$')
----

//////////////////////////
All the script does is get the latest commit date from the `git log` command, stick that into any `$Date$` strings it sees in stdin, and print the results – it should be simple to do in whatever language you're most comfortable in.
You can name this file `expand_date` and put it in your path.
Now, you need to set up a filter in Git (call it `dater`) and tell it to use your `expand_date` filter to smudge the files on checkout.
You'll use a Perl expression to clean that up on commit:
//////////////////////////
`git log` 명령으로 마지막 커밋 정보를 얻고 표준 입력(STDIN)에서 `$Date$` 스트링을 찾아서 치환한다. 스크립트는 자신이 편한 언어로 만든다.
이 스크립트의 이름을 `expand_date`라고 짓고 실행 경로에 넣는다.
그리고 `dater`라는 Git 필터를 정의한다.
Checkout시 실행하는 smudge 필터로 `expand_date`를 사용하고 커밋할 때 실행하는 clean 필터는 Perl을 사용한다.

[source,console]
----
$ git config filter.dater.smudge expand_date
$ git config filter.dater.clean 'perl -pe "s/\\\$Date[^\\\$]*\\\$/\\\$Date\\\$/"'
----

//////////////////////////
This Perl snippet strips out anything it sees in a `$Date$` string, to get back to where you started.
Now that your filter is ready, you can test it by setting up a file with your `$Date$` keyword and then setting up a Git attribute for that file that engages the new filter:
//////////////////////////
이 Perl 코드는 `$Date$` 스트링에 있는 문자를 제거해서 원래대로 복원한다.
이제 필터가 준비됐으니 `$Date$` 키워드가 들어 있는 파일을 만들고 Git Attribute를 설정하고 새 필터를 시험해보자.

[source,console]
----
$ echo '# $Date$' > date_test.txt
$ echo 'date*.txt filter=dater' >> .gitattributes
----

//////////////////////////
If you commit those changes and check out the file again, you see the keyword properly substituted:
//////////////////////////
커밋하고 파일을 다시 Checkout 하면 해당 키워드가 적절히 치환된 것을 볼 수 있다.

[source,console]
----
$ git add date_test.txt .gitattributes
$ git commit -m "Testing date expansion in Git"
$ rm date_test.txt
$ git checkout date_test.txt
$ cat date_test.txt
# $Date: Tue Apr 21 07:26:52 2009 -0700$
----

//////////////////////////
You can see how powerful this technique can be for customized applications.
You have to be careful, though, because the `.gitattributes` file is committed and passed around with the project, but the driver (in this case, `dater`) isn't, so it won't work everywhere.
When you design these filters, they should be able to fail gracefully and have the project still work properly.
//////////////////////////
이 기능은 매우 강력해서 입맛대로 프로젝트를 맞춤 설정할 수 있다.
`.gitattributes` 파일은 커밋하는 파일이기 때문에 필터 드라이버(여기서는 `dater`) 설정이 되지 않은 사람에게도 배포된다. 물론 `dater` 설정이 안 돼 있는 사람에게는 에러가 난다.
필터를 만들 때 이런 예외 상황도 고려해서 항상 잘 동작하게 해야 한다.

//////////////////////////
==== Exporting Your Repository
//////////////////////////
==== 저장소 익스포트하기

(((archiving)))
//////////////////////////
Git attribute data also allows you to do some interesting things when exporting an archive of your project.
//////////////////////////
프로젝트를 익스포트해서 아카이브를 만들 때에도 Git Attribute가 유용하다.

===== `export-ignore`

//////////////////////////
You can tell Git not to export certain files or directories when generating an archive.
If there is a subdirectory or file that you don't want to include in your archive file but that you do want checked into your project, you can determine those files via the `export-ignore` attribute.
//////////////////////////
아카이브를 만들 때 제외할 파일이나 디렉토리가 무엇인지 설정할 수 있다.
특정 디렉토리나 파일을 프로젝트에는 포함하고 아카이브에는 포함하고 싶지 않을 때 `export-ignore` Attribute를 사용한다.

//////////////////////////
For example, say you have some test files in a `test/` subdirectory, and it doesn't make sense to include them in the tarball export of your project.
You can add the following line to your Git attributes file:
//////////////////////////
예를 들어 `test/` 디렉토리에 테스트 파일이 있다고 하자. 보통 tar 파일로 묶어서 익스포트할 때 테스트 파일은 포함하지 않는다.
Git Attribute 파일에 다음 라인을 추가하면 테스트 파일은 무시된다.

[source]
----
test/ export-ignore
----

//////////////////////////
Now, when you run git archive to create a tarball of your project, that directory won't be included in the archive.
//////////////////////////
`git archive` 명령으로 tar 파일을 만들면 test 디렉토리는 아카이브에 포함되지 않는다.

===== `export-subst`

//////////////////////////
Another thing you can do for your archives is some simple keyword substitution.
Git lets you put the string `$Format:$` in any file with any of the `--pretty=format` formatting shortcodes, many of which you saw in Chapter 2.
For instance, if you want to include a file named `LAST_COMMIT` in your project, and the last commit date was automatically injected into it when `git archive` ran, you can set up the file like this:
//////////////////////////
아카이브를 만들 때에도 키워드 치환을 할 수 있다.
파일을 하나 만들고 거기에 `$Format:$` 스트링을 넣으면 Git이 치환해준다. 이 스트링에 `--pretty=format` 옵션에 사용하는 것과 같은 포맷 코드를 넣을 수 있다. `--pretty=format`은 2장에서 배웠다.
예를 들어 `LAST_COMMIT`이라는 파일을 만들고 `git archive` 명령을 실행할 때 자동으로 이 파일에 마지막 커밋 날짜가 삽입되게 하려면 아래와 같이 해야 한다.

[source,console]
----
$ echo 'Last commit date: $Format:%cd$' > LAST_COMMIT
$ echo "LAST_COMMIT export-subst" >> .gitattributes
$ git add LAST_COMMIT .gitattributes
$ git commit -am 'adding LAST_COMMIT file for archives'
----

//////////////////////////
When you run `git archive`, the contents of that file when people open the archive file will look like this:
//////////////////////////
`git archive` 명령으로 아카이브를 만들고 나서 이 파일을 열어보면 아래와 같이 보인다.

[source,console]
----
$ cat LAST_COMMIT
Last commit date: $Format:Tue Apr 21 08:38:48 2009 -0700$
----

//////////////////////////
==== Merge Strategies
//////////////////////////
==== Merge 전략

(((merging, strategies)))
//////////////////////////
You can also use Git attributes to tell Git to use different merge strategies for specific files in your project.
One very useful option is to tell Git to not try to merge specific files when they have conflicts, but rather to use your side of the merge over someone else's.
//////////////////////////
파일마다 다른 Merge 전략을 사용하도록 설정할 수 있다.
Merge할 때 충돌이 날 것 같은 파일이 있다고 하자. Git Attrbute로 이 파일만 항상 타인의 코드 말고 내 코드를 사용하도록 설정할 수 있다.

//////////////////////////
This is helpful if a branch in your project has diverged or is specialized, but you want to be able to merge changes back in from it, and you want to ignore certain files.
Say you have a database settings file called `database.xml` that is different in two branches, and you want to merge in your other branch without messing up the database file.
You can set up an attribute like this:
//////////////////////////
이 설정은 다양한 환경에서 운영하려고 만든 환경 브랜치를 Merge할 때 좋다. 이때는 환경 설정과 관련된 파일은 Merge하지 않고 무시하는 게 편리하다.
브랜치에 `database.xml`이라는 데이터베이스 설정파일이 있는데 이 파일은 브랜치마다 다르다. Database 설정 파일은 Merge하면 안된다.
Attribute를 아래와 같이 설정하면 이 파일은 그냥 두고 Merge한다.

[source]
----
database.xml merge=ours
----

//////////////////////////
And then define a dummy `ours` merge strategy with:
//////////////////////////
이제 `ours`라는 이름의 Merge 전략에 대한 아무것도 하지 않는 Driver를 아래와 같이 정의한다.

[source,console]
----
$ git config --global merge.ours.driver true
----

//////////////////////////
If you merge in the other branch, instead of having merge conflicts with the `database.xml` file, you see something like this:
//////////////////////////
다른 브랜치로 이동해서 Merge를 실행했을 때 `database.xml` 파일에 대해 충돌이 발생하는 대신 아래와 같은 메시지를 보게 된다.

[source,console]
----
$ git merge topic
Auto-merging database.xml
Merge made by recursive.
----

//////////////////////////
In this case, `database.xml` stays at whatever version you originally had.
//////////////////////////
Merge했지만 `database.xml`은 원래 가지고 있던 파일 그대로다.
