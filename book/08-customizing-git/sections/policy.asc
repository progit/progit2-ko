[[_an_example_git_enforced_policy]]
//////////////////////////
=== An Example Git-Enforced Policy
//////////////////////////
=== 정책 구현하기

(((policy example)))
//////////////////////////
In this section, you'll use what you've learned to establish a Git workflow that checks for a custom commit message format, and allows only certain users to modify certain subdirectories in a project.
You'll build client scripts that help the developer know if their push will be rejected and server scripts that actually enforce the policies.
//////////////////////////
지금까지 배운 것을 한 번 적용해보자. 나름의 커밋 메시지 규칙으로 검사하고 Fast-forward Push만 허용하고 디렉토리마다 사용자의 수정 권한을 제어하는 Workflow를 만든다.
실질적으로 정책을 강제하려면 서버 훅으로 만들어야 한다. 하지만, 개발자들이 Push할 수 없는 커밋은 아예 만들지 않도록 클라이언트 훅도 만든다.

//////////////////////////
The scripts we'll show are written in Ruby; partly because of our intellectual inertia, but also because Ruby is easy to read, even if you can't necessarily write it.
However, any language will work – all the sample hook scripts distributed with Git are in either Perl or Bash, so you can also see plenty of examples of hooks in those languages by looking at the samples.
//////////////////////////
훅 스크립트는 Ruby 언어를 사용한다. 필자가 주로 사용하는 언어기도 하지만 코드가 쉬워서 직접 작성하는 것은 어렵더라도 코드를 읽고 개념을 이해할 수 있을 것이다.
물론 Git은 언어를 가리지 않는다. Git이 자동으로 생성해주는 예제는 모두 Perl과 Bash로 작성돼 있다. 예제를 열어 보면 Perl과 Bash로 작성된 예제를 참고 할 수 있다.

//////////////////////////
==== Server-Side Hook
//////////////////////////
==== 서버 훅

//////////////////////////
All the server-side work will go into the `update` file in your `hooks` directory.
The `update` hook runs once per branch being pushed and takes three arguments:
//////////////////////////
서버 정책은 전부 `update` 훅으로 만든다.
이 스크립트는 브랜치가 Push될 때마다 한 번 실행되고 다음 내용을 아규먼트로 받는다.

//////////////////////////
* The name of the reference being pushed to
* The old revision where that branch was
* The new revision being pushed
//////////////////////////
* 해당 브랜치의 이름
* 원래 브랜치가 가리키던 레퍼런스
* 새로 Push된 레퍼런스

//////////////////////////
You also have access to the user doing the pushing if the push is being run over SSH.
If you've allowed everyone to connect with a single user (like ``git'') via public-key authentication, you may have to give that user a shell wrapper that determines which user is connecting based on the public key, and set an environment variable accordingly.
Here we'll assume the connecting user is in the `$USER` environment variable, so your update script begins by gathering all the information you need:
//////////////////////////
그리고 SSH를 통해서 Push하는 것이라면 누가 Push하는 지도 알 수 있다.
SSH로 접근하긴 하지만 공개키를 이용하여 개발자 모두 계정 하나로(``git'' 같은) Push하고 있다면 실제로 Push하는 사람이 누구인지 공개키를 비교하여 판별하고 환경변수를 설정해주는 스크립트가 필요하다.
아래 스크립트에서는 `$USER` 환경 변수에 현재 접속한 사용자 정보가 있다고 가정하며 `update` 스크립트는 필요한 정보를 수집하는 것으로 시작한다.

[source,ruby]
----
#!/usr/bin/env ruby

$refname = ARGV[0]
$oldrev  = ARGV[1]
$newrev  = ARGV[2]
$user    = ENV['USER']

puts "Enforcing Policies..."
puts "(#{$refname}) (#{$oldrev[0,6]}) (#{$newrev[0,6]})"
----

//////////////////////////
Yes, those are global variables.
Don't judge – it's easier to demonstrate this way.
//////////////////////////
스크립트에서 전역변수를 쓰고 있지만
데모의 이해를 돕기 위해서니 너무 나무라지는 마시길 바란다.

[[_enforcing_commit_message_format]]
//////////////////////////
===== Enforcing a Specific Commit-Message Format
//////////////////////////
===== 커밋 메시지 규칙 만들기

//////////////////////////
Your first challenge is to enforce that each commit message adheres to a particular format.
Just to have a target, assume that each message has to include a string that looks like ``ref: 1234'' because you want each commit to link to a work item in your ticketing system.
You must look at each commit being pushed up, see if that string is in the commit message, and, if the string is absent from any of the commits, exit non-zero so the push is rejected.
//////////////////////////
커밋 메시지 규칙부터 해보자.
일단 목표가 있어야 하니까 커밋 메시지에 ``ref: 1234'' 같은 스트링이 포함돼 있어야 한다고 가정하자. 보통 커밋은 이슈 트래커에 있는 이슈와 관련돼 있으니 그 이슈가 뭔지 커밋 메시지에 적어 놓으면 좋다.
Push할 때마다 커밋 메시지에 해당 스트링이 포함돼 있는지 확인한다. 만약 커밋 메시지에 해당 스트링이 없는 커밋이면 0이 아닌 값을 반환해서 Push를 거절한다.

//////////////////////////
You can get a list of the SHA-1 values of all the commits that are being pushed by taking the `$newrev` and `$oldrev` values and passing them to a Git plumbing command called `git rev-list`.
This is basically the `git log` command, but by default it prints out only the SHA-1 values and no other information.
So, to get a list of all the commit SHA-1s introduced between one commit SHA-1 and another, you can run something like this:
//////////////////////////
`$newrev`, `$oldrev` 변수와 `git rev-list`라는 Plumbing 명령어를 이용해서 Push하는 모든 커밋의 SHA-1 값을 알 수 있다.
`git log`와 근본적으로 같은 명령이고 옵션을 하나도 주지 않으면 다른 정보 없이 SHA-1 값만 보여준다.
이 명령으로 두 커밋 사이에 있는 커밋들의 SHA-1 값을 살펴보고자 아래와 같은 명령을 사용할 수 있다.

[source,console]
----
$ git rev-list 538c33..d14fc7
d14fc7c847ab946ec39590d87783c69b031bdfb7
9f585da4401b0a3999e84113824d15245c13f0be
234071a1be950e2a8d078e6141f5cd20c1e61ad3
dfa04c9ef3d5197182f13fb5b9b1fb7717d2222a
17716ec0f1ff5c77eff40b7fe912f9f6cfd0e475
----

//////////////////////////
You can take that output, loop through each of those commit SHAs, grab the message for it, and test that message against a regular expression that looks for a pattern.
//////////////////////////
이 SHA-1 값으로 각 커밋의 메시지도 가져온다. 커밋 메시지를 가져와서 정규표현 식으로 해당 패턴이 있는지 검사한다.

//////////////////////////
You have to figure out how to get the commit message from each of these commits to test.
To get the raw commit data, you can use another plumbing command called `git cat-file`.
We'll go over all these plumbing commands in detail in <<_git_internals>>; but for now, here's what that command gives you:
//////////////////////////
커밋 메시지를 얻는 방법을 알아보자.
커밋의 raw 데이터는 `git cat-file`이라는 Plumbing 명령어로 얻을 수 있다.
<<_git_internals>> 에서 Plumbing 명령어에 대해 자세히 다루니까 지금은 커밋 메시지 얻는 것에 집중하자.

[source,console]
----
$ git cat-file commit ca82a6
tree cfda3bf379e4f8dba8717dee55aab78aef7f4daf
parent 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
author Scott Chacon <schacon@gmail.com> 1205815931 -0700
committer Scott Chacon <schacon@gmail.com> 1240030591 -0700

changed the version number
----

//////////////////////////
A simple way to get the commit message from a commit when you have the SHA-1 value is to go to the first blank line and take everything after that.
You can do so with the `sed` command on Unix systems:
//////////////////////////
이 명령이 출력하는 메시지에서 커밋 메시지만 잘라내야 한다.
첫 번째 빈 줄 다음부터가 커밋 메시지니까 유닉스 명령어 `sed`로 첫 빈 줄 이후를 잘라낸다.

[source,console]
----
$ git cat-file commit ca82a6 | sed '1,/^$/d'
changed the version number
----

//////////////////////////
You can use that incantation to grab the commit message from each commit that is trying to be pushed and exit if you see anything that doesn't match.
To exit the script and reject the push, exit non-zero.
The whole method looks like this:
//////////////////////////
이제 커밋 메시지에서 찾는 패턴과 일치하는 문자열이 있는지 검사해서 있으면 통과시키고 없으면 거절한다.
스크립트가 종료할 때 0이 아닌 값을 반환하면 Push가 거절된다.
이 일을 하는 코드는 아래와 같다.

[source,ruby]
----
$regex = /\[ref: (\d+)\]/

# enforced custom commit message format
def check_message_format
  missed_revs = `git rev-list #{$oldrev}..#{$newrev}`.split("\n")
  missed_revs.each do |rev|
    message = `git cat-file commit #{rev} | sed '1,/^$/d'`
    if !$regex.match(message)
      puts "[POLICY] Your message is not formatted correctly"
      exit 1
    end
  end
end
check_message_format
----

//////////////////////////
Putting that in your `update` script will reject updates that contain commits that have messages that don't adhere to your rule.
//////////////////////////
이 코드를 `update` 스크립트로 넣으면 규칙을 어긴 커밋은 Push할 수 없다.

//////////////////////////
===== Enforcing a User-Based ACL System
//////////////////////////
===== ACL로 사용자마다 다른 규칙 적용하기

//////////////////////////
Suppose you want to add a mechanism that uses an access control list (ACL) that specifies which users are allowed to push changes to which parts of your projects.
Some people have full access, and others can only push changes to certain subdirectories or specific files.
To enforce this, you'll write those rules to a file named `acl` that lives in your bare Git repository on the server.
You'll have the `update` hook look at those rules, see what files are being introduced for all the commits being pushed, and determine whether the user doing the push has access to update all those files.
//////////////////////////
진행하는 프로젝트에 모듈이 여러 개라서 모듈마다 특정 사용자들만 Push할 수 있게 ACL(Access Control List)을 설정해야 한다고 가정하자.
모든 권한을 다 가진 사람들도 있고 특정 디렉토리나 파일만 Push할 수 있는 사람도 있다.
이런 일을 강제하려면 먼저 서버의 Bare 저장소에 `acl`이라는 파일을 만들고 거기에 규칙을 기술한다.
그리고 `update` 훅에서 Push하는 파일이 무엇인지 확인하고 ACL과 비교해서 Push할 수 있는지 없는지 결정한다.

//////////////////////////
The first thing you'll do is write your ACL.
Here you'll use a format very much like the CVS ACL mechanism: it uses a series of lines, where the first field is `avail` or `unavail`, the next field is a comma-delimited list of the users to which the rule applies, and the last field is the path to which the rule applies (blank meaning open access).
All of these fields are delimited by a pipe (`|`) character.
//////////////////////////
우선 ACL부터 작성한다.
CVS에서 사용하는 것과 비슷한 ACL을 만든다. 규칙은 한 줄에 하나씩 기술한다. 각 줄의 첫 번째 필드는 `avail`이나 `unavail`이고 두 번째 필드는 규칙을 적용할 사용자들의 목록을 CSV(Comma-Separated Values) 형식으로 적는다. 마지막 필드엔 규칙을 적용할 경로를 적는다. 만약 마지막 필드가 비워져 있으면 모든 경로를 의미한다.
이 필드는 파이프(`|`) 문자로 구분한다.

//////////////////////////
In this case, you have a couple of administrators, some documentation writers with access to the `doc` directory, and one developer who only has access to the `lib` and `tests` directories, and your ACL file looks like this:
//////////////////////////
예를 하나 들어보자. 어떤 모듈의 모든 권한을 가지는 관리자도 여러 명이고 `doc` 디렉토리만 접근해서 문서를 만드는 사람도 여러 명이다. 하지만 `lib`과 `tests` 디렉토리에 접근하는 사람은 한 명이다. 이런 상황을 ACL로 만들면 아래와 같다.

[source]
----
avail|nickh,pjhyett,defunkt,tpw
avail|usinclair,cdickens,ebronte|doc
avail|schacon|lib
avail|schacon|tests
----

//////////////////////////
You begin by reading this data into a structure that you can use.
In this case, to keep the example simple, you'll only enforce the `avail` directives.
Here is a method that gives you an associative array where the key is the user name and the value is an array of paths to which the user has write access:
//////////////////////////
이 ACL 정보는 스크립트에서 읽어 사용한다.
설명을 쉽게 하고자 여기서는 `avail`만 처리한다.
다음 메소드는 Associative Array를 반환하는데, 키는 사용자이름이고 값은 사용자가 Push할 수 있는 경로의 목록이다.

[source,ruby]
----
def get_acl_access_data(acl_file)
  # read in ACL data
  acl_file = File.read(acl_file).split("\n").reject { |line| line == '' }
  access = {}
  acl_file.each do |line|
    avail, users, path = line.split('|')
    next unless avail == 'avail'
    users.split(',').each do |user|
      access[user] ||= []
      access[user] << path
    end
  end
  access
end
----

//////////////////////////
On the ACL file you looked at earlier, this `get_acl_access_data` method returns a data structure that looks like this:
//////////////////////////
이 `get_acl_access_data` 함수가 앞의 ACL 파일을 읽고 반환하는 결과는 아래와 같다.

[source,ruby]
----
{"defunkt"=>[nil],
 "tpw"=>[nil],
 "nickh"=>[nil],
 "pjhyett"=>[nil],
 "schacon"=>["lib", "tests"],
 "cdickens"=>["doc"],
 "usinclair"=>["doc"],
 "ebronte"=>["doc"]}
----

//////////////////////////
Now that you have the permissions sorted out, you need to determine what paths the commits being pushed have modified, so you can make sure the user who's pushing has access to all of them.
//////////////////////////
이렇게 사용할 권한 정보를 만들었다. 이제 Push하는 파일을 그 사용자가 Push할 수 있는지 없는지 알아내야 한다.

//////////////////////////
You can pretty easily see what files have been modified in a single commit with the `--name-only` option to the `git log` command (mentioned briefly in Chapter 2):
//////////////////////////
`git log` 명령에 `--name-only` 옵션을 주면 해당 커밋에서 수정된 파일이 뭔지 알려준다. (`git log` 명령은 *2장*에서 다루었다)

[source,console]
----
$ git log -1 --name-only --pretty=format:'' 9f585d

README
lib/test.rb
----

//////////////////////////
If you use the ACL structure returned from the `get_acl_access_data` method and check it against the listed files in each of the commits, you can determine whether the user has access to push all of their commits:
//////////////////////////
`get_acl_access_data` 메소드를 호출해서 ACL 정보를 구하고, 각 커밋에 들어 있는 파일 목록도 얻은 다음에, 사용자가 모든 커밋을 Push할 수 있는지 판단한다.

[source,ruby]
----
# only allows certain users to modify certain subdirectories in a project
def check_directory_perms
  access = get_acl_access_data('acl')

  # see if anyone is trying to push something they can't
  new_commits = `git rev-list #{$oldrev}..#{$newrev}`.split("\n")
  new_commits.each do |rev|
    files_modified = `git log -1 --name-only --pretty=format:'' #{rev}`.split("\n")
    files_modified.each do |path|
      next if path.size == 0
      has_file_access = false
      access[$user].each do |access_path|
        if !access_path  # user has access to everything
           || (path.start_with? access_path) # access to this path
          has_file_access = true
        end
      end
      if !has_file_access
        puts "[POLICY] You do not have access to push to #{path}"
        exit 1
      end
    end
  end
end

check_directory_perms
----

//////////////////////////
You get a list of new commits being pushed to your server with `git rev-list`.
Then, for each of those commits, you find which files are modified and make sure the user who's pushing has access to all the paths being modified.
//////////////////////////
먼저 `git rev-list` 명령으로 서버에 Push하려는 커밋이 무엇인지 알아낸다.
그리고 각 커밋에서 수정한 파일이 어떤 것들이 있는지 찾고, 해당 사용자가 모든 파일에 대한 권한이 있는지 확인한다.

//////////////////////////
Now your users can't push any commits with badly formed messages or with modified files outside of their designated paths.
//////////////////////////
이제 사용자는 메시지 규칙을 어겼거나 권한이 없는 파일이 포함된 커밋은 어떤 것도 Push하지 못한다.

//////////////////////////
===== Testing It Out
//////////////////////////
===== 새로 작성한 정책 테스트

//////////////////////////
If you run `chmod u+x .git/hooks/update`, which is the file into which you should have put all this code, and then try to push a commit with a non-compliant message, you get something like this:
//////////////////////////
이 정책을 다 구현해서 update 스크립트에 넣고 `chmod u+x .git/hooks/update` 명령으로 실행 권한을 준다. 그리고 틀린 형식으로 커밋 메시지를 작성하고 Push하면 아래와 같이 실패한다.

[source,console]
----
$ git push -f origin master
Counting objects: 5, done.
Compressing objects: 100% (3/3), done.
Writing objects: 100% (3/3), 323 bytes, done.
Total 3 (delta 1), reused 0 (delta 0)
Unpacking objects: 100% (3/3), done.
Enforcing Policies...
(refs/heads/master) (8338c5) (c5b616)
[POLICY] Your message is not formatted correctly
error: hooks/update exited with error code 1
error: hook declined to update refs/heads/master
To git@gitserver:project.git
 ! [remote rejected] master -> master (hook declined)
error: failed to push some refs to 'git@gitserver:project.git'
----

//////////////////////////
There are a couple of interesting things here.
First, you see this where the hook starts running.
//////////////////////////
정책과 관련해 하나씩 살펴보자.
먼저 훅이 실행될 때마다 다음 메시지가 출력된다.

[source]
----
Enforcing Policies...
(refs/heads/master) (fb8c72) (c56860)
----

//////////////////////////
Remember that you printed that out at the very beginning of your update script.
Anything your script echoes to `stdout` will be transferred to the client.
//////////////////////////
이 내용은 스크립트 윗부분에서 표준출력(`stdout`)에 출력한 내용이다.
스크립트에서 표준출력으로 출력하면 클라이언트로 전송된다.

//////////////////////////
The next thing you'll notice is the error message.
//////////////////////////
그리고 아래의 에러 메시지를 살펴보자.

[source]
----
[POLICY] Your message is not formatted correctly
error: hooks/update exited with error code 1
error: hook declined to update refs/heads/master
----

//////////////////////////
The first line was printed out by you, the other two were Git telling you that the update script exited non-zero and that is what is declining your push.
Lastly, you have this:
//////////////////////////
첫 번째 줄은 스크립트에서 직접 출력한 것이고 나머지 두 줄은 Git이 출력해 주는 것이다. 이 메시지는 update 스크립트에서 0이 아닌 값을 반환해서 Push할 수 없다는 메시지다.
그리고 마지막 메시지를 보자.

[source]
----
To git@gitserver:project.git
 ! [remote rejected] master -> master (hook declined)
error: failed to push some refs to 'git@gitserver:project.git'
----

//////////////////////////
You'll see a remote rejected message for each reference that your hook declined, and it tells you that it was declined specifically because of a hook failure.
//////////////////////////
이 메시지는 훅에서 거절된 것이라고 말해주는 것이고 브랜치가 거부될 때마다 하나씩 출력된다.

//////////////////////////
Furthermore, if someone tries to edit a file they don't have access to and push a commit containing it, they will see something similar.
For instance, if a documentation author tries to push a commit modifying something in the `lib` directory, they see
//////////////////////////
그리고 누군가 권한이 없는 파일을 수정해서 Push해도 에러 메시지를 출력한다.
예를 들어 문서 담당자가 `lib` 디렉토리에 있는 파일을 수정해서 커밋하면 아래와 같은 메시지가 출력된다.

[source]
----
[POLICY] You do not have access to push to lib/test.rb
----

//////////////////////////
From now on, as long as that `update` script is there and executable, your repository will never have a commit message without your pattern in it, and your users will be sandboxed.
//////////////////////////
이제부터는 `update` 스크립트가 항상 실행되기 때문에 커밋 메시지도 규칙대로 작성해야 하고, 권한이 있는 파일만 Push할 수 있다.

//////////////////////////
==== Client-Side Hooks
//////////////////////////
==== 클라이언트 훅

//////////////////////////
The downside to this approach is the whining that will inevitably result when your users' commit pushes are rejected.
Having their carefully crafted work rejected at the last minute can be extremely frustrating and confusing; and furthermore, they will have to edit their history to correct it, which isn't always for the faint of heart.
//////////////////////////
서버 훅의 단점은 Push할 때까지 Push할 수 있는지 없는지 알 수 없다는 데 있다.
기껏 공들여 정성껏 구현했는데 막상 Push할 수 없으면 곤혹스럽다. 히스토리를 제대로 고치는 일은 정신건강에 매우 해롭다.

//////////////////////////
The answer to this dilemma is to provide some client-side hooks that users can run to notify them when they're doing something that the server is likely to reject.
That way, they can correct any problems before committing and before those issues become more difficult to fix.
Because hooks aren't transferred with a clone of a project, you must distribute these scripts some other way and then have your users copy them to their `.git/hooks` directory and make them executable.
You can distribute these hooks within the project or in a separate project, but Git won't set them up automatically.
//////////////////////////
이 문제는 클라이언트 훅으로 해결한다. 클라이언트 훅으로 서버가 거부할지 말지 검사한다.
사람들은 커밋하기 전에, 그러니까 시간이 지나 고치기 어려워지기 전에 문제를 해결할 수 있다.
Clone할 때 이 훅은 전송되지 않기 때문에 다른 방법으로 동료에게 배포해야 한다. 그 훅을 가져다 `.git/hooks` 디렉토리에 복사하고 실행할 수 있게 만든다.
이 훅 파일을 프로젝트에 넣어서 배포해도 되고 Git 훅 프로젝트를 만들어서 배포해도 된다. 하지만, 자동으로 설치하는 방법은 없다.

//////////////////////////
To begin, you should check your commit message just before each commit is recorded, so you know the server won't reject your changes due to badly formatted commit messages.
To do this, you can add the `commit-msg` hook.
If you have it read the message from the file passed as the first argument and compare that to the pattern, you can force Git to abort the commit if there is no match:
//////////////////////////
커밋 메시지부터 검사해보자. 이 훅이 있으면 커밋 메시지가 구리다고 서버가 뒤늦게 거절하지 않는다.
이것은 `commit-msg` 훅으로 구현한다.
이 훅은 커밋 메시지가 저장된 파일을 첫 번째 아규먼트로 입력받는다. 그 파일을 읽어 패턴을 검사한다. 필요한 패턴이 없으면 커밋을 중단시킨다.

[source,ruby]
----
#!/usr/bin/env ruby
message_file = ARGV[0]
message = File.read(message_file)

$regex = /\[ref: (\d+)\]/

if !$regex.match(message)
  puts "[POLICY] Your message is not formatted correctly"
  exit 1
end
----

//////////////////////////
If that script is in place (in `.git/hooks/commit-msg`) and executable, and you commit with a message that isn't properly formatted, you see this:
//////////////////////////
이 스크립트를 `.git/hooks/commit-msg`라는 파일로 만들고 실행권한을 준다. 커밋이 메시지 규칙을 어기면 아래와 같은 메시지를 보여 준다.

[source,console]
----
$ git commit -am 'test'
[POLICY] Your message is not formatted correctly
----

//////////////////////////
No commit was completed in that instance.
However, if your message contains the proper pattern, Git allows you to commit:
//////////////////////////
커밋하지 못했다.
하지만, 커밋 메지시를 바르게 작성하면 커밋할 수 있다.

[source,console]
----
$ git commit -am 'test [ref: 132]'
[master e05c914] test [ref: 132]
 1 file changed, 1 insertions(+), 0 deletions(-)
----

//////////////////////////
Next, you want to make sure you aren't modifying files that are outside your ACL scope.
If your project's `.git` directory contains a copy of the ACL file you used previously, then the following `pre-commit` script will enforce those constraints for you:
//////////////////////////
그리고 아예 권한이 없는 파일을 수정 못 하게 할 때는 `pre-commit` 훅을 이용한다.
사전에 `.git` 디렉토리 안에 ACL 파일을 가져다 놓고 아래와 같이 작성한다.

[source,ruby]
----
#!/usr/bin/env ruby

$user    = ENV['USER']

# [ insert acl_access_data method from above ]

# only allows certain users to modify certain subdirectories in a project
def check_directory_perms
  access = get_acl_access_data('.git/acl')

  files_modified = `git diff-index --cached --name-only HEAD`.split("\n")
  files_modified.each do |path|
    next if path.size == 0
    has_file_access = false
    access[$user].each do |access_path|
    if !access_path || (path.index(access_path) == 0)
      has_file_access = true
    end
    if !has_file_access
      puts "[POLICY] You do not have access to push to #{path}"
      exit 1
    end
  end
end

check_directory_perms
----

//////////////////////////
This is roughly the same script as the server-side part, but with two important differences.
First, the ACL file is in a different place, because this script runs from your working directory, not from your `.git` directory.
You have to change the path to the ACL file from this
//////////////////////////
내용은 서버 훅과 똑같지만 두 가지가 다르다.
첫째, 클라이언트 훅은 Git 디렉토리가 아니라 워킹 디렉토리에서 실행하기 때문에 ACL 파일 위치가 다르다.
그래서 ACL 파일 경로를 수정해야 한다.

[source,ruby]
----
access = get_acl_access_data('acl')
----

//////////////////////////
to this:
//////////////////////////
이 부분을 아래와 같이 바꾼다.

[source,ruby]
----
access = get_acl_access_data('.git/acl')
----

//////////////////////////
The other important difference is the way you get a listing of the files that have been changed.
Because the server-side method looks at the log of commits, and, at this point, the commit hasn't been recorded yet, you must get your file listing from the staging area instead.
Instead of
//////////////////////////
두 번째 차이점은 파일 목록을 얻는 방법이다.
서버 훅에서는 커밋에 있는 파일을 모두 찾았지만 여기서는 아직 커밋하지도 않았다.
그래서 Staging Area의 파일 목록을 이용한다.

[source,ruby]
----
files_modified = `git log -1 --name-only --pretty=format:'' #{ref}`
----

//////////////////////////
you have to use
//////////////////////////
이 부분을 아래와 같이 바꾼다.

[source,ruby]
----
files_modified = `git diff-index --cached --name-only HEAD`
----

//////////////////////////
But those are the only two differences – otherwise, the script works the same way.
One caveat is that it expects you to be running locally as the same user you push as to the remote machine.
If that is different, you must set the `$user` variable manually.
//////////////////////////
이 두 가지 점만 다르고 나머지는 똑같다.
보통은 리모트 저장소의 계정과 로컬의 계정도 같다.
다른 계정을 사용하려면 `$user` 환경변수에 누군지 알려야 한다.

//////////////////////////
One other thing we can do here is make sure the user doesn't push non-fast-forwarded references.
To get a reference that isn't a fast-forward, you either have to rebase past a commit you've already pushed up or try pushing a different local branch up to the same remote branch.
//////////////////////////
이렇게 훅을 이용해 Fast-forward가 아닌 Push는 못 하게 만들 수 있다.
Fast-forward가 아닌 Push는 Rebase로 이미 Push한 커밋을 바꿔 버렸거나 전혀 다른 로컬 브랜치를 Push하지 못 하도록 하는 것이다.

//////////////////////////
Presumably, the server is already configured with `receive.denyDeletes` and `receive.denyNonFastForwards` to enforce this policy, so the only accidental thing you can try to catch is rebasing commits that have already been pushed.
//////////////////////////
서버에 이미 `receive.denyDeletes` 나 `receive.denyNonFastForwards` 설정을 했다면 더 좁혀진다. 이미 Push한 커밋을 Rebase해서 Push하지 못 하게 만들 때 유용하다.

//////////////////////////
Here is an example pre-rebase script that checks for that.
It gets a list of all the commits you're about to rewrite and checks whether they exist in any of your remote references.
If it sees one that is reachable from one of your remote references, it aborts the rebase.
//////////////////////////
아래는 이미 Push한 커밋을 Rebase하지 못하게 하는 pre-rebase 스크립트다.
이 스크립트는 먼저 Rebase할 커밋 목록을 구하고 커밋이 리모트 레퍼런스/브랜치에 들어 있는지 확인한다.
커밋이 한 개라도 리모트 레퍼런스/브랜치에 들어 있으면 Rebase할 수 없다.

[source,ruby]
----
#!/usr/bin/env ruby

base_branch = ARGV[0]
if ARGV[1]
  topic_branch = ARGV[1]
else
  topic_branch = "HEAD"
end

target_shas = `git rev-list #{base_branch}..#{topic_branch}`.split("\n")
remote_refs = `git branch -r`.split("\n").map { |r| r.strip }

target_shas.each do |sha|
  remote_refs.each do |remote_ref|
    shas_pushed = `git rev-list ^#{sha}^@ refs/remotes/#{remote_ref}`
    if shas_pushed.split("\n").include?(sha)
      puts "[POLICY] Commit #{sha} has already been pushed to #{remote_ref}"
      exit 1
    end
  end
end
----

//////////////////////////
This script uses a syntax that wasn't covered in the Revision Selection section of Chapter 6. You get a list of commits that have already been pushed up by running this:
//////////////////////////
이 스크립트는 6장 '리비전 조회하기' 절에서 설명하지 않은 표현을 사용했다. 아래의 표현은 이미 Push한 커밋 목록을 얻어오는 부분이다.

[source,ruby]
----
`git rev-list ^#{sha}^@ refs/remotes/#{remote_ref}`
----

//////////////////////////
The `SHA^@` syntax resolves to all the parents of that commit.
You're looking for any commit that is reachable from the last commit on the remote and that isn't reachable from any parent of any of the SHAs you're trying to push up – meaning it's a fast-forward.
//////////////////////////
`SHA^@`은 해당 커밋의 모든 부모를 가리킨다.
그러니까 이 명령은 지금 Push하려는 커밋에서 리모트 저장소의 커밋에 도달할 수 있는지 확인하는 명령이다. 즉, Fast-forward인지 확인하는 것이다.

//////////////////////////
The main drawback to this approach is that it can be very slow and is often unnecessary – if you don't try to force the push with `-f`, the server will warn you and not accept the push.
However, it's an interesting exercise and can in theory help you avoid a rebase that you might later have to go back and fix.
//////////////////////////
이 방법은 매우 느리고 보통은 필요 없다. 어차피 Fast-forward가 아닌 Push은 `-f` 옵션을 주어야 Push할 수 있다.
문제가 될만한 Rebase를 방지할 수 있다는 것을 보여주려고 이 예제를 설명했다.
