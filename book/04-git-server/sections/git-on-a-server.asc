[[_git_on_the_server]]
//////////////////////////
=== Getting Git on a Server
//////////////////////////
=== 서버에 Git 설치하기

//////////////////////////
Now we'll cover setting up a Git service running these protocols on your own server.
//////////////////////////
서버에 Git을 설치해서 공개하는 방법을 알아보자.

[NOTE]
//////////////////////////
====
Here we'll be demonstrating the commands and steps needed to do basic, simplified installations on a Linux based server, though it's also possible to run these services on Mac or Windows servers too.
Actually setting up a production server within your infrastructure will certainly entail differences in security measures or operating system tools, but hopefully this will give you the general idea of what's involved.
====
//////////////////////////
====
여기에서는 리눅스에 설치하는 방법에 대해서만 간단히 설명할 것이다. 물론 맥과 윈도우즈에도 설치할 수 있다.
실제로 서버에 Git을 설치하고 설정하려면 온갖 보안 조치를 설정하고 OS 도구들을 써야 한다. 그 모든 것을 이 글에서 다루진 않지만 무엇에 신경 써야 하는지는 알 수 있을 것이다.
====

//////////////////////////
In order to initially set up any Git server, you have to export an existing repository into a new bare repository – a repository that doesn't contain a working directory.
This is generally straightforward to do.
In order to clone your repository to create a new bare repository, you run the clone command with the `--bare` option.(((git commands, clone, bare)))
By convention, bare repository directories end in `.git`, like so:
//////////////////////////
어떤 서버를 설치하더라도 일단 저장소를 Bare 저장소로 만들어야 한다.
다시 말하지만, Bare 저장소는 워킹 디렉토리가 없는 저장소이다.
`--bare` 옵션을 주고 Clone하면 새로운 Bare 저장소가 만들어진다.
Bare 저장소 디렉토리는 관례에 따라 .git 확장자로 끝난다.

[source,console]
----
$ git clone --bare my_project my_project.git
Cloning into bare repository 'my_project.git'...
done.
----

//////////////////////////
You should now have a copy of the Git directory data in your `my_project.git` directory.
//////////////////////////
이제 `my_project.git` 디렉토리에는 복사한 Git 디렉토리 데이터만 들어 있다.

//////////////////////////
This is roughly equivalent to something like
//////////////////////////
다음과 같이 실행한 것과 비슷하다:

[source,console]
----
$ cp -Rf my_project/.git my_project.git
----

//////////////////////////
There are a couple of minor differences in the configuration file; but for your purpose, this is close to the same thing.
It takes the Git repository by itself, without a working directory, and creates a directory specifically for it alone.
//////////////////////////
물론 설정 상의 미세한 차이가 있지만, 저장소의 내용만 고려한다면 같다고 볼 수 있다.
워킹 디렉토리가 없는 Git 저장소인 데다가 별도의 디렉토리도 하나 만들었다는 점에서는 같다.

[[_bare_repo]]
//////////////////////////
==== Putting the Bare Repository on a Server
//////////////////////////
==== 서버에 Bare 저장소 넣기

//////////////////////////
Now that you have a bare copy of your repository, all you need to do is put it on a server and set up your protocols.
Let's say you've set up a server called `git.example.com` that you have SSH access to, and you want to store all your Git repositories under the `/opt/git` directory.
Assuming that `/opt/git` exists on that server, you can set up your new repository by copying your bare repository over:
//////////////////////////
Bare 저장소는 이제 만들었으니까 서버에 넣고 프로토콜을 설정한다.
`git.example.com`라는 이름의 서버를 하나 준비하자. 그리고 그 서버에 SSH로 접속할 수 있게 만들고 Git 저장소를 /opt/git에 저장할 것이다.
서버에 /opt/git이 있다고 가정하고 다음과 같이 Bare 저장소를 복사한다.

[source,console]
----
$ scp -r my_project.git user@git.example.com:/opt/git
----

//////////////////////////
At this point, other users who have SSH access to the same server which has read-access to the `/opt/git` directory can clone your repository by running
//////////////////////////
이제 다른 사용자들은 SSH로 서버에 접근해서 저장소를 Clone할 수 있다. 사용자는 `/opt/git` 디렉토리에 읽기 권한이 있어야 한다.

[source,console]
----
$ git clone user@git.example.com:/opt/git/my_project.git
----

//////////////////////////
If a user SSHs into a server and has write access to the `/opt/git/my_project.git` directory, they will also automatically have push access.
//////////////////////////
이 서버에 SSH로 접근할 수 있는 사용자가 `/opt/git/my_project.git` 디렉토리에 쓰기 권한까지 가지고 있으면 바로 Push할 수 있다.

//////////////////////////
Git will automatically add group write permissions to a repository properly if you run the `git init` command with the `--shared` option.(((git commands, init, bare)))
//////////////////////////
`git init` 명령에 `--shared` 옵션을 추가하면 Git은 자동으로 그룹 쓰기 권한을 추가한다. (((git commands, init, bare)))

[source,console]
----
$ ssh user@git.example.com
$ cd /opt/git/my_project.git
$ git init --bare --shared
----

//////////////////////////
You see how easy it is to take a Git repository, create a bare version, and place it on a server to which you and your collaborators have SSH access.
Now you're ready to collaborate on the same project.
//////////////////////////
Git 저장소를 만드는 것이 얼마나 쉬운지 살펴보았다.
Bare 저장소를 만들어 SSH로 접근할 수 있는 서버에 올리면 동료와 함께 일할 준비가 끝난다.

//////////////////////////
It's important to note that this is literally all you need to do to run a useful Git server to which several people have access – just add SSH-able accounts on a server, and stick a bare repository somewhere that all those users have read and write access to.
You're ready to go – nothing else needed.
//////////////////////////
그러니까 Git 서버를 구축하는데 사람이 할 일은 정말 별로 없다. SSH로 접속할 수 있도록 서버에 계정을 만들고 Bare 저장소를 사람들이 읽고 쓸 수 있는 곳에 넣어 두기만 하면 된다.
이제 준비됐다. 더 필요한 것은 없다.

//////////////////////////
In the next few sections, you'll see how to expand to more sophisticated setups.
This discussion will include not having to create user accounts for each user, adding public read access to repositories, setting up web UIs and more.
However, keep in mind that to collaborate with a couple of people on a private project, all you _need_ is an SSH server and a bare repository.
//////////////////////////
다음 절에서는 좀 더 정교하게 설정하는 법을 살펴볼 것이다.
사용자에게 계정을 만들어 주는 법, 저장소를 읽고 쓸 수 있게 하는 법, Web UI를 설정하는 법, 등등은 여기에서 설명하지 않는다.
동료와 함께 개발할 때 꼭 필요한 것은 SSH 서버와 Bare 저장소뿐이라는 것만은 꼭 기억하자.

//////////////////////////
==== Small Setups
//////////////////////////
==== 초 간단 뚝딱

//////////////////////////
If you're a small outfit or are just trying out Git in your organization and have only a few developers, things can be simple for you.
One of the most complicated aspects of setting up a Git server is user management.
If you want some repositories to be read-only to certain users and read/write to others, access and permissions can be a bit more difficult to arrange.
//////////////////////////
만약 창업을 준비하고 있거나 회사에서 Git을 막 도입하려고 할 때는 개발자의 수가 많지 않아서 설정할 게 별로 없다.
사용자를 관리하는 것이 Git 서버를 설정할 때 가장 골치 아픈 것 중 하나다.
사람이 많으면 어떤 사용자는 읽기만 가능하게 하고 어떤 사용자는 읽고 쓰기 둘 다 가능하게 해야 한다. 이렇게 설정하는 것은 조금 더 까다롭다.

//////////////////////////
===== SSH Access
//////////////////////////
===== SSH 접속

(((serving repositories, SSH)))
//////////////////////////
If you have a server to which all your developers already have SSH access, it's generally easiest to set up your first repository there, because you have to do almost no work (as we covered in the last section).
If you want more complex access control type permissions on your repositories, you can handle them with the normal filesystem permissions of the operating system your server runs.
//////////////////////////
만약 모든 개발자가 SSH로 접속할 수 있는 서버가 있으면 너무 쉽게 저장소를 만들 수 있다. 앞서 말했듯이 정말 할 일이 별로 없다.
그리고 저장소의 권한을 꼼꼼하게 관리해야 하면 운영체제의 파일시스템 권한관리를 이용할 수 있다.

//////////////////////////
If you want to place your repositories on a server that doesn't have accounts for everyone on your team whom you want to have write access, then you must set up SSH access for them.
We assume that if you have a server with which to do this, you already have an SSH server installed, and that's how you're accessing the server.
//////////////////////////
동료가 저장소에 쓰기 접근을 해야 하는 데 아직 SSH로 접속할 수 있는 서버가 없으면 하나 마련해야 한다.
아마 당신에게 서버가 하나 있다면 그 서버에는 이미 SSH 서버가 설치되어 있고 지금도 SSH로 접속하고 있을 것이다.

//////////////////////////
There are a few ways you can give access to everyone on your team.
The first is to set up accounts for everybody, which is straightforward but can be cumbersome.
You may not want to run `adduser` and set temporary passwords for every user.
//////////////////////////
팀원들이 접속할 수 있도록 하는 방법은 몇 가지가 있다.
첫째로 모두에게 계정을 만들어 주는 방법이 있다. 이 방법이 제일 단순하지만 다소 귀찮다.
팀원마다 adduser를 실행시키고 임시 암호를 부여해야 하기 때문에 보통 이 방법을 쓰고 싶어 하지 않는다.

//////////////////////////
A second method is to create a single 'git' user on the machine, ask every user who is to have write access to send you an SSH public key, and add that key to the `~/.ssh/authorized_keys` file of your new 'git' user.
At that point, everyone will be able to access that machine via the 'git' user.
This doesn't affect the commit data in any way – the SSH user you connect as doesn't affect the commits you've recorded.
//////////////////////////
둘째로 서버마다 git이라는 계정을 하나씩 만드는 방법이 있다. 쓰기 권한이 필요한 사용자의 SSH 공개키를 모두 모아서 git 계정의 `~/.ssh/authorized_keys` 파일에 모든 키를 입력한다.
그러면 모두 git 계정으로 그 서버에 접속할 수 있다.
이 git 계정은 커밋 데이터에는 아무런 영향을 끼치지 않는다. 다시 말해서 접속하는 데 사용한 SSH 계정과 커밋에 저장되는 사용자는 아무 상관없다.

//////////////////////////
Another way to do it is to have your SSH server authenticate from an LDAP server or some other centralized authentication source that you may already have set up.
As long as each user can get shell access on the machine, any SSH authentication mechanism you can think of should work.
//////////////////////////
SSH 서버 인증을 LDAP 서버를 이용할 수도 있다. 이미 사용하고 있는 중앙집중식 인증소스가 있으면 해당 인증을 이용하여 SSH 서버에 인증하도록 할 수도 있다.
SSH 인증 메커니즘 중 아무거나 하나 이용할 수 있으면 사용자는 그 서버에 접근할 수 있다.
