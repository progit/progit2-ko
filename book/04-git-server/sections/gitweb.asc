//////////////////////////
=== GitWeb
//////////////////////////
=== GitWeb

(((serving repositories, GitWeb)))(((GitWeb)))
//////////////////////////
Now that you have basic read/write and read-only access to your project, you may want to set up a simple web-based visualizer.
Git comes with a CGI script called GitWeb that is sometimes used for this.
//////////////////////////
프로젝트 저장소를 단순히 읽거나 쓰는 것에 대한 설정은 다뤘다. 이제는 웹 기반 인터페이스를 설정해 보자.
Git은 웹에서 저장소를 조회할 수 있는 GitWeb이라는 CGI 스크립트를 제공한다.

[[gitweb]]
//////////////////////////
.The GitWeb web-based user interface.
image::images/git-instaweb.png[The GitWeb web-based user interface.]
//////////////////////////
.Git 웹용 UI, GitWeb
image::images/git-instaweb.png[Git 웹용 UI]

//////////////////////////
If you want to check out what GitWeb would look like for your project, Git comes with a command to fire up a temporary instance if you have a lightweight server on your system like `lighttpd` or `webrick`.
On Linux machines, `lighttpd` is often installed, so you may be able to get it to run by typing `git instaweb` in your project directory.
If you're running a Mac, Leopard comes preinstalled with Ruby, so `webrick` may be your best bet.
To start `instaweb` with a non-lighttpd handler, you can run it with the `--httpd` option.(((git commands, instaweb)))
//////////////////////////
Git은 GitWeb을 쉽게 사용해 볼 수 있도록 서버를 즉시 띄우는 명령을 제공한다. 시스템에 `lighttpd`나 `webrick` 같은 경량 웹서버가 설치돼 있어야 이 명령을 사용할 수 있다.
리눅스에서는 `lighttpd`가 설치돼 있을 확률이 높아서 프로젝트 디렉토리에서 그냥 `git instaweb`을 실행하면 바로 실행될 것이다.
Mac의 Leopard 버전은 Ruby가 미리 설치돼 있기 때문에 `webrick`이 더 나은 선택이다.
lighttpd이 아니라면 다음과 같이 `--httpd` 옵션을 사용해야 한다.(((git commands, instaweb)))

[source,console]
----
$ git instaweb --httpd=webrick
[2009-02-21 10:02:21] INFO  WEBrick 1.3.1
[2009-02-21 10:02:21] INFO  ruby 1.8.6 (2008-03-03) [universal-darwin9.0]
----

//////////////////////////
That starts up an HTTPD server on port 1234 and then automatically starts a web browser that opens on that page.
It's pretty easy on your part.
When you're done and want to shut down the server, you can run the same command with the `--stop` option:
//////////////////////////
1234 포트로 HTTPD 서버를 시작하고 이 페이지를 여는 웹브라우저를 자동으로 실행시킨다.
사용자에게는 꽤 편리하다.
필요한 일을 모두 마치고 나서 같은 명령어에 `--stop` 옵션을 추가하여 서버를 중지한다:

[source,console]
----
$ git instaweb --httpd=webrick --stop
----

//////////////////////////
If you want to run the web interface on a server all the time for your team or for an open source project you're hosting, you'll need to set up the CGI script to be served by your normal web server.
Some Linux distributions have a `gitweb` package that you may be able to install via `apt` or `yum`, so you may want to try that first.
We'll walk through installing GitWeb manually very quickly.
First, you need to get the Git source code, which GitWeb comes with, and generate the custom CGI script:
//////////////////////////
자신의 프로젝트에서 언제나 웹 인터페이스를 운영하려면 먼저 웹서버에 이 CGI 스크립트를 설치해야 한다.
`apt`나 `yum`으로도 `gitweb` 을 설치할 수 있지만, 여기에서는 수동으로 설치한다.
GitWeb을 수동으로 설치하는 방법을 간단히 살펴보자.
먼저 GitWeb이 포함된 Git 소스 코드를 구한 다음 CGI 스크립트를 빌드한다.

[source,console]
----
$ git clone git://git.kernel.org/pub/scm/git/git.git
$ cd git/
$ make GITWEB_PROJECTROOT="/opt/git" prefix=/usr gitweb
    SUBDIR gitweb
    SUBDIR ../
make[2]: `GIT-VERSION-FILE' is up to date.
    GEN gitweb.cgi
    GEN static/gitweb.js
$ sudo cp -Rf gitweb /var/www/
----

//////////////////////////
Notice that you have to tell the command where to find your Git repositories with the `GITWEB_PROJECTROOT` variable.
Now, you need to make Apache use CGI for that script, for which you can add a VirtualHost:
//////////////////////////
빌드할 때 `GITWEB_PROJECTROOT` 변수로 Git 저장소의 위치를 알려준다.
이제 Apache가 이 스크립트를 사용하도록 VirtualHost 항목에 설정해야 한다.

[source,console]
----
<VirtualHost *:80>
    ServerName gitserver
    DocumentRoot /var/www/gitweb
    <Directory /var/www/gitweb>
        Options ExecCGI +FollowSymLinks +SymLinksIfOwnerMatch
        AllowOverride All
        order allow,deny
        Allow from all
        AddHandler cgi-script cgi
        DirectoryIndex gitweb.cgi
    </Directory>
</VirtualHost>
----

//////////////////////////
Again, GitWeb can be served with any CGI or Perl capable web server; if you prefer to use something else, it shouldn't be difficult to set up.
At this point, you should be able to visit `http://gitserver/` to view your repositories online.
//////////////////////////
다시 말해서 GitWeb은 CGI나 Perl을 지원하는 웹서버라면 아무거나 사용할 수 있다.
이제 `http://gitserver/`에 접속하여 온라인으로 저장소를 확인할 수 있다.
