//////////////////////////
=== GitLab
//////////////////////////
=== GitLab

(((serving repositories, GitLab)))(((GitLab)))
//////////////////////////
GitWeb is pretty simplistic though.
If you're looking for a more modern, fully featured Git server, there are some several open source solutions out there that you can install instead.
As GitLab is one of the more popular ones, we'll cover installing and using it as an example.
This is a bit more complex than the GitWeb option and likely requires more maintenance, but it is a much more fully featured option.
//////////////////////////
간단하게 쓰기엔 GitWeb이 꽤 좋다.
근데 좀 더 기능이 많은 Git 서버를 쓰려면 다른 서버를 찾아 설치해야 한다.
GitLab은 널리 사용하는 서버 중 하나이다. 여기서 예제를 통해 설치하고 사용하는 것을 배워보자.
GitLab은 기능이 많은 만큼 설정도 복잡하고 유지보수를 위해 해야 할 것도 많다.

//////////////////////////
==== Installation
//////////////////////////
==== 설치

//////////////////////////
GitLab is a database-backed web application, so its installation is a bit more involved than some other git servers. Fortunately, this process is very well-documented and supported.
//////////////////////////
GitLab은 데이터베이스와 따로 연동해야하는 웹 애플리케이션이라 다른 Git 서버들보다 설치하기에 복잡하지만, 문서화가 잘 되어있으므로 이를 참고한다.

//////////////////////////
There are a few methods you can pursue to install GitLab.
To get something up and running quickly, you can download a virtual machine image or a one-click installer from https://bitnami.com/stack/gitlab[], and tweak the configuration to match your particular environment.(((bitnami)))
One nice touch Bitnami has included is the login screen (accessed by typing alt-&rarr;); it tells you the IP address and default username and password for the installed GitLab.
//////////////////////////
설치 방법은 여러 가지가 있다.
가상 머신 이미지나 원클릭 인스톨러를 내려받아 빨리 설치하고 환경에 맞게 후다닥 설정해서 사용할 수 있다.(((bitnami))) https://bitnami.com/stack/gitlab[]에서 내려받을 수 있다.
Bitnami의 로그인 화면은 아래와 같다(alt-&rarr; 를 눌러서 들어간다). 로그인 화면에 설치된 GitLab의 IP와 기본 아이디, 비밀번호가 써있다.

[[bitnami]]
//////////////////////////
.The Bitnami GitLab virtual machine login screen.
image::images/bitnami.png[The Bitnami GitLab virtual machine login screen.]
//////////////////////////
.Bitnami GitLab 가상 머신의 로그인 화면
image::images/bitnami.png[Bitnami GitLab 가상 머신의 로그인 화면]

//////////////////////////
For anything else, follow the guidance in the GitLab Community Edition readme, which can be found at https://gitlab.com/gitlab-org/gitlab-ce/tree/master[].
There you'll find assistance for installing GitLab using Chef recipes, a virtual machine on Digital Ocean, and RPM and DEB packages (which, as of this writing, are in beta).
There's also ``unofficial'' guidance on getting GitLab running with non-standard operating systems and databases, a fully-manual installation script, and many other topics.
//////////////////////////
더 많은 것이 알고 싶다면 GitLab 커뮤니티 에디션의 readme 파일을 읽어보면 된다. https://gitlab.com/gitlab-org/gitlab-ce/tree/master[]에서 내려받을 수 있다.
Chef의 레시피나 Digital Ocean(역주: 호스팅 서비스)의 가상 머신, RPM, DEB 패키지 등에 관한 설치 방법들이 있다.
``비공식적인'' 설명서도 있다. 흔치 않은 운영체제나 데이터베이스와의 연동하는 법, 스크립트로 완전히 수동으로 설치하는 법 등 많은 주제를 다룬다.

//////////////////////////
==== Administration
//////////////////////////
==== 관리자

//////////////////////////
GitLab's administration interface is accessed over the web.
Simply point your browser to the hostname or IP address where GitLab is installed, and log in as an admin user.
The default username is `admin@local.host`, and the default password is `5iveL!fe` (which you will be prompted to change as soon as you enter it).
Once logged in, click the ``Admin area'' icon in the menu at the top right.
//////////////////////////
GitLab의 관리자 도구는 웹 페이지로 되어있다.
웹 브라우저로 GitLab이 설치된 곳의 주소에 들어가면 그냥 보인다. 그리고 관리자로 로그인하자.
기본 아이디는 `admin@local.host`, 비밀번호는 `5iveL!fe`이다(이건 로그인 후에 바꿀 수 있다).
로그인하고 나서 메뉴 오른쪽 위에 있는 ``Admin area''를 클릭한다.

[[gitlab_menu]]
//////////////////////////
.The ``Admin area'' item in the GitLab menu.
image::images/gitlab-menu.png[The ``Admin area'' item in the GitLab menu.]
//////////////////////////
.GitLab 메뉴의 ``Admin area'' 버튼
image::images/gitlab-menu.png[GitLab 메뉴의 ``Admin area'' 버튼]

//////////////////////////
===== Users
//////////////////////////
===== 사용자

//////////////////////////
Users in GitLab are accounts that correspond to people.
User accounts don't have a lot of complexity; mainly it's a collection of personal information attached to login data.
Each user account comes with a *namespace*, which is a logical grouping of projects that belong to that user.
If the user +jane+ had a project named +project+, that project's url would be http://server/jane/project[].
//////////////////////////
GitLab의 사용자 계정은 한 사람당 하나씩 만든다.
사용자 계정의 내용은 복잡하지 않다. 로그인 데이터에 추가로 개인 정보가 들어있다.
각 사용자마다 *네임스페이스*가 있다. 네임스페이스는 프로젝트를 묶는 단위이다.
*jane* 사용자가 *project*라는 프로젝트를 진행 중이라면 프로젝트의 URL은 http://server/jane/project[]가 될 것이다.

[[gitlab_users]]
//////////////////////////
.The GitLab user administration screen.
image::images/gitlab-users.png[The GitLab user administration screen.]
//////////////////////////
.GitLab 사용자의 관리 화면
image::images/gitlab-users.png[GitLab 사용자의 관리 화면]

//////////////////////////
Removing a user can be done in two ways.
``Blocking'' a user prevents them from logging into the GitLab instance, but all of the data under that user's namespace will be preserved, and commits signed with that user's email address will still link back to their profile.
//////////////////////////
사용자를 삭제하는 방법은 두 가지다.
일시적으로 GitLab에 로그인하지 못하게 하는 ``정지(Blocking)''가 있다. 정지한 사용자 데이터와 네임스페이스 안의 프로젝트 데이터는 삭제되지 않고 그대로 남는다. 커밋의 이메일 주소에 대한 링크도 여전히 사용자 프로파일 페이지로 연결된다.

//////////////////////////
``Destroying'' a user, on the other hand, completely removes them from the database and filesystem.
All projects and data in their namespace is removed, and any groups they own will also be removed.
This is obviously a much more permanent and destructive action, and its uses are rare.
//////////////////////////
하지만 사용자를 ``삭제(Destroying)''하면 그 사용자와 관련된 모든 데이터가 삭제된다.
삭제한 사용자의 모든 프로젝트와 데이터가 삭제되고 해당 사용자가 소유한 그룹도 삭제된다.
영구히 삭제돼 되돌릴 수 없으므로 조심해야 한다.

[[_gitlab_groups_section]]
//////////////////////////
===== Groups
//////////////////////////
===== 그룹

//////////////////////////
A GitLab group is an assemblage of projects, along with data about how users can access those projects.
Each group has a project namespace (the same way that users do), so if the group +training+ has a project +materials+, its url would be http://server/training/materials[].
//////////////////////////
GitLab 그룹은 프로젝트와 누가 어떤 프로젝트에 어떻게 접근할지에 대한 권한 데이터의 모음이다.
그룹에도 사용자처럼 프로젝트 네임스페이스가 있다. +training+라는 그룹이 +materials+라는 프로젝트를 가지고 있으면 URL은 http://server/training/materials[]가 된다.

[[gitlab_groups]]
//////////////////////////
.The GitLab group administration screen.
image::images/gitlab-groups.png[The GitLab group administration screen.]
//////////////////////////
.GitLab의 그룹 관리 화면
image::images/gitlab-groups.png[GitLab의 그룹 관리 화면]

//////////////////////////
Each group is associated with a number of users, each of which has a level of permissions for the group's projects and the group itself.
These range from ``Guest'' (issues and chat only) to ``Owner'' (full control of the group, its members, and its projects).
The types of permissions are too numerous to list here, but GitLab has a helpful link on the administration screen.
//////////////////////////
그룹은 많은 사용자가 모인 곳이다. 그룹의 사용자의 권한은 그룹의 프로젝트에 대한 권한과 그룹 자체에 대한 권한이 따로 있다.
권한은 ``Guest''(이슈 등록과 채팅만 할 수 있다.)부터 ``Owner''(그룹과 멤버, 프로젝트에 대한 모든 제어가 가능하다.)까지 지정할 수 있다.
여기에서 어떤 권한이 있는지 나열하기엔 너무 많다. GitLab의 관리 화면에서 각 권한에 대한 링크를 참고하길 바란다.

//////////////////////////
===== Projects
//////////////////////////
===== 프로젝트

//////////////////////////
A GitLab project roughly corresponds to a single git repository.
Every project belongs to a single namespace, either a user or a group.
If the project belongs to a user, the owner of the project has direct control over who has access to the project; if the project belongs to a group, the group's user-level permissions will also take effect.
//////////////////////////
GitLab의 프로젝트는 간단히 이야기하면 하나의 Git 저장소다.
모든 프로젝트는 한 명의 사용자나 하나의 그룹에 속하게 된다.
사용자에 딸린 프로젝트는 사용자가 관리자로서 그 프로젝트를 완전히 제어한다. 그룹에 딸린 프로젝트는 해당 그룹의 사용자 권한 레벨에 따라 다르다.

//////////////////////////
Every project also has a visibility level, which controls who has read access to that project's pages and repository.
If a project is _Private_, the project's owner must explicitly grant access to specific users.
An _Internal_ project is visible to any logged-in user, and a _Public_ project is visible to anyone.
Note that this controls both git ``fetch'' access as well as access to the web UI for that project.
//////////////////////////
프로젝트마다 공개 수준을 지정할 수 있어서 사람마다 프로젝트 페이지와 저장소가 보이거나 안 보이게 할 수 있다.
프로젝트가 _Private_이면 프로젝트 소유자가 허락한 사람들만 프로젝트에 접근할 수 있다.
_Internal_은 로그인한 사용자에게만 보인다. 그리고 _Public_ 프로젝트는 모든 사람이 볼 수 있다.
이런 공개 수준은 git ``fetch''같은 접근이나 웹 UI 접근에 다 적용된다.

//////////////////////////
===== Hooks
//////////////////////////
===== 훅

//////////////////////////
GitLab includes support for hooks, both at a project or system level.
For either of these, the GitLab server will perform an HTTP POST with some descriptive JSON whenever relevant events occur.
This is a great way to connect your git repositories and GitLab instance to the rest of your development automation, such as CI servers, chat rooms, or deployment tools.
//////////////////////////
GitLab은 훅도 지원하는데 프로젝트 훅이나 시스템 훅을 사용할 수 있다.
훅은 어떤 이벤트가 발생하면 해당 이벤트 정보가 담긴 JSON 데이터를 HTTP POST로 보낸다.
Git 저장소나 GitLab과 연동해서 CI나 채팅, 개발 도구 등으로 자동화하기에 좋다.

//////////////////////////
==== Basic Usage
//////////////////////////
==== 기본 사용법

//////////////////////////
The first thing you'll want to do with GitLab is create a new project.
This is accomplished by clicking the ``+'' icon on the toolbar.
You'll be asked for the project's name, which namespace it should belong to, and what its visibility level should be.
Most of what you specify here isn't permanent, and can be re-adjusted later through the settings interface.
Click ``Create Project'', and you're done.
//////////////////////////
먼저 새로운 프로젝트를 만들어보자.
툴바의 ``+'' 아이콘을 클릭한다.
프로젝트의 이름, 프로젝트 네임스페이스, 공개 수준을 입력한다.
지금 입력한 것은 대부분 나중에 다시 바꿀 수 있다.
``Create Project''를 클릭하면 끝난다.

//////////////////////////
Once the project exists, you'll probably want to connect it with a local Git repository.
Each project is accessible over HTTPS or SSH, either of which can be used to configure a Git remote.
The URLs are visible at the top of the project's home page.
For an existing local repository, this command will create a remote named `gitlab` to the hosted location:
//////////////////////////
프로젝트가 만들어졌으면 로컬 Git 저장소랑 연결하자.
HTTPS나 SSH 프로토콜을 이용해 프로젝트를 Git 리모트로 등록한다.
저장소 URL은 프로젝트 홈페이지 위 쪽에 있다.
아래와 같이 명령어를 이용해 로컬 저장소에 `gitlab`이라는 이름으로 리모트 저장소를 등록한다.

[source,console]
----
$ git remote add gitlab https://server/namespace/project.git
----

//////////////////////////
If you don't have a local copy of the repository, you can simply do this:
//////////////////////////
로컬 저장소가 없으면 그냥 아래 명령어를 실행한다.

[source,console]
----
$ git clone https://server/namespace/project.git
----

//////////////////////////
The web UI provides access to several useful views of the repository itself.
Each project's home page shows recent activity, and links along the top will lead you to views of the project's files and commit log.
//////////////////////////
웹 UI는 꽤 유용하다. 저장소에 대한 각종 정보를 보여준다.
프로젝트 홈페이지에서는 최근 활동을 보여주고 제일 위의 링크를 클릭하면 프로젝트의 파일과 커밋 로그가 나온다.

//////////////////////////
==== Working Together
//////////////////////////
==== 함께 일하기

//////////////////////////
The simplest way of working together on a GitLab project is by giving another user direct push access to the git repository.
You can add a user to a project by going to the ``Members'' section of that project's settings, and associating the new user with an access level (the different access levels are discussed a bit in <<_gitlab_groups_section>>).
By giving a user an access level of ``Developer'' or above, that user can push commits and branches directly to the repository with impunity.
//////////////////////////
함께 일할 사람에게 그냥 Git 저장소의 Push 권한을 주는 걸로 간단하게 협업을 시작할 수 있다.
프로젝트 설정 페이지에서 ``Members'' 섹션에 같이 일할 사용자를 추가한다. 그리고 그 사용자가 Push 할 수 있도록 설정한다(다른 접근 수준에 대해서는 <<_gitlab_groups_section>>에서 볼 수 있다).
``Developer'' 이상의 권한을 주면 그 사용자는 우리 저장소에 Push 하거나 브랜치를 만들 수 있다.

//////////////////////////
Another, more decoupled way of collaboration is by using merge requests.
This feature enables any user that can see a project to contribute to it in a controlled way.
Users with direct access can simply create a branch, push commits to it, and open a merge request from their branch back into `master` or any other branch.
Users who don't have push permissions for a repository can ``fork'' it (create their own copy), push commits to _that_ copy, and open a merge request from their fork back to the main project.
This model allows the owner to be in full control of what goes into the repository and when, while allowing contributions from untrusted users.
//////////////////////////
Merge 요청을 하도록 해서 통제권을 유지한채로 협업하는 방법도 있다.
프로젝트에 접근할 수 있는 모든 사용자가 프로젝트에 기여할 수 있다.
사용자는 마음껏 브랜치를 만들고 커밋, Push하고 나서 이 브랜치를 `master`나 다른 브랜치에 Merge해달라고 요청한다.
Push 권한이 없는 사용자는 저장소를 ``fork''한 다음 ``fork''한 _자신의 저장소_에 Push한다. 그리고는 원래 저장소에 내 저장소에 있는 브랜치를 Merge해달라고 요청하면 된다.
소유자는 이걸로 자신의 저장소에 대한 모든 통제 권한을 가진다. 어떤 데이터가 들어올 수 있는지 언제 들어오는지 소유자가 결정할 수 있다.

//////////////////////////
Merge requests and issues are the main units of long-lived discussion in GitLab.
Each merge request allows a line-by-line discussion of the proposed change (which supports a lightweight kind of code review), as well as a general overall discussion thread.
Both can be assigned to users, or organized into milestones.
//////////////////////////
Merge 요청과 이슈는 대화의 기본 단위이다.
각 Merge 요청에서는 일반적인 토론뿐만 아니라 라인 단위로까지 대화가 이루어진다. 물론 코드 리뷰가 간단히 끝날 수도 있다.
요청과 이슈는 모두 사용자에게 할당되거나 마일스톤의 과제로 편입된다.

//////////////////////////
This section is focused mainly on the Git-related features of GitLab, but as a mature project, it provides many other features to help your team work together, such as project wikis and system maintenance tools.
These include project wikis, discussion ``walls'', and system maintenance tools.
One benefit to GitLab is that, once the server is set up and running, you'll rarely need to tweak a configuration file or access the server via SSH; most administration and general usage can be accomplished through the in-browser interface.
//////////////////////////
이 섹션에서는 GitLab의 Git과 맞닿은 부분만 설명했지만 이게 전부가 아니다. GitLab은 굉장히 성숙했다.
GitLab에는 프로젝트 위키나 토론용 ``walls'', 시스템 관리 도구 등등 협업용 기능이 많다.
GitLab의 장점은 일단 서버가 돌아가면 SSH로 서버에 접속할 일이 별로 없다는 것이다. 대부분 관리는 웹 브라우저로 가능하다.
