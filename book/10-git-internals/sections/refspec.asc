[[_refspec]]
//////////////////////////
=== The Refspec
//////////////////////////
=== Refspec

//////////////////////////
Throughout this book, we've used simple mappings from remote branches to local references, but they can be more complex.
Suppose you add a remote like this:
//////////////////////////
원격의 브랜치와 로컬 Refs를 간단히 매핑하는 것은 많이 봤다. 이 매핑은 실은 좀 더 복잡하다.
아래처럼 리모트 저장소를 추가해보자.

[source,console]
----
$ git remote add origin https://github.com/schacon/simplegit-progit
----

//////////////////////////
It adds a section to your `.git/config` file, specifying the name of the remote (`origin`), the URL of the remote repository, and the refspec for fetching:
//////////////////////////
이 명령은 `origin` 이라는 저장소 이름, URL, Fetch할 Refspec를 `.git/config` 파일에 추가한다.

[source,ini]
----
[remote "origin"]
	url = https://github.com/schacon/simplegit-progit
	fetch = +refs/heads/*:refs/remotes/origin/*
----

//////////////////////////
The format of the refspec is an optional `+`, followed by `<src>:<dst>`, where `<src>` is the pattern for references on the remote side and `<dst>` is where those references will be written locally.
The `+` tells Git to update the reference even if it isn't a fast-forward.
//////////////////////////
Refspec 형식은 `+`와 `<src>:<dest>`로 돼 있다. `+`는 생략 가능하고, `<src>`는 리모트 저장소의 Refs 패턴이고 `<dst>`는 매핑되는 로컬 저장소의 Refs 패턴이다.
`+`는 Fast-forward가 아닌 업데이트를 허용하는 것이다.

//////////////////////////
In the default case that is automatically written by a `git remote add` command, Git fetches all the references under `refs/heads/` on the server and writes them to `refs/remotes/origin/` locally.
So, if there is a `master` branch on the server, you can access the log of that branch locally via
//////////////////////////
기본적으로 Git은 `git remote add` 명령으로 생성한 설정을 참고하여 리모트 서버에서 `refs/heads/`에 있는 Refs를 가져다 로컬의 `refs/remotes/origin/`에 기록한다.
로컬에서 서버에 있는 `master` 브랜치에 접근할 때는 아래와 같이 한다.

[source,console]
----
$ git log origin/master
$ git log remotes/origin/master
$ git log refs/remotes/origin/master
----

//////////////////////////
They're all equivalent, because Git expands each of them to `refs/remotes/origin/master`.
//////////////////////////
이 세 명령의 결과가 모두 같다.
Git은 모두 `refs/remotes/origin/master`라고 해석한다.

//////////////////////////
If you want Git instead to pull down only the `master` branch each time, and not every other branch on the remote server, you can change the fetch line to
//////////////////////////
`master` 브랜치만 가져올 수 있게 하려면 `fetch` 부분을 아래와 같이 바꿔준다. 그러면 다른 브랜치는 가져올 수 없다.

[source]
----
fetch = +refs/heads/master:refs/remotes/origin/master
----

//////////////////////////
This is just the default refspec for `git fetch` for that remote.
If you want to do something one time, you can specify the refspec on the command line, too.
To pull the `master` branch on the remote down to `origin/mymaster` locally, you can run
//////////////////////////
이는 해당 리모트 저장소에서 `git fetch` 명령을 실행할 때 자동으로 사용되는 Refspec이다.
다른 Refspec을 가져오려면 명령의 아규먼트로 넘긴다.
리모트 브랜치 `master`를 로컬 브랜치 `origin/mymaster`로 가져오려면 아래와 같이 실행한다.

[source,console]
----
$ git fetch origin master:refs/remotes/origin/mymaster
----

//////////////////////////
You can also specify multiple refspecs.
On the command line, you can pull down several branches like so:
//////////////////////////
Refspec을 여러 개 넘겨도 된다.
한꺼번에 브랜치를 여러 개 가져온다.

[source,console]
----
$ git fetch origin master:refs/remotes/origin/mymaster \
	 topic:refs/remotes/origin/topic
From git@github.com:schacon/simplegit
 ! [rejected]        master     -> origin/mymaster  (non fast forward)
 * [new branch]      topic      -> origin/topic
----

//////////////////////////
In this case, the  master branch pull was rejected because it wasn't a fast-forward reference.
You can override that by specifying the `+` in front of the refspec.
//////////////////////////
여기서 `master` 브랜치는 Fast-forward가 아니라서 거절된다.
하지만, Refspec 앞에 `+`를 추가하면 강제로 덮어쓴다.

//////////////////////////
You can also specify multiple refspecs for fetching in your configuration file.
If you want to always fetch the master and experiment branches, add two lines:
//////////////////////////
설정 파일에도 Refspec을 여러 개 적을 수 있다.
`master`와 `experiment` 브랜치를 둘 다 적으면 항상 함께 가져온다.

[source,ini]
----
[remote "origin"]
	url = https://github.com/schacon/simplegit-progit
	fetch = +refs/heads/master:refs/remotes/origin/master
	fetch = +refs/heads/experiment:refs/remotes/origin/experiment
----

//////////////////////////
You can't use partial globs in the pattern, so this would be invalid:
//////////////////////////
하지만, Glob 패턴은 사용할 수 없다.

[source]
----
fetch = +refs/heads/qa*:refs/remotes/origin/qa*
----

//////////////////////////
However, you can use namespaces (or directories) to accomplish something like that.
If you have a QA team that pushes a series of branches, and you want to get the master branch and any of the QA team's branches but nothing else, you can use a config section like this:
//////////////////////////
그 대신 네임스페이스 형식(디렉토리 형식)으로는 사용할 수 있다.
만약 QA 팀이 Push하는 브랜치가 있고 이 브랜치를 가져오고 싶으면 아래와 같이 설정한다. 다음은 `master` 브랜치와 QA 팀의 브랜치만 가져오는 설정이다.

[source,ini]
----
[remote "origin"]
	url = https://github.com/schacon/simplegit-progit
	fetch = +refs/heads/master:refs/remotes/origin/master
	fetch = +refs/heads/qa/*:refs/remotes/origin/qa/*
----

//////////////////////////
If you have a complex workflow process that has a QA team pushing branches, developers pushing branches, and integration teams pushing and collaborating on remote branches, you can namespace them easily this way.
//////////////////////////
좀 더 복잡한 것도 가능하다. QA 팀뿐만 아니라, 일반 개발자, 통합 팀 등이 사용하는 브랜치를 네임스페이스 별로 구분해 놓으면 좀 더 Git을 편리하게 사용할 수 있다.

[[_pushing_refspecs]]
//////////////////////////
==== Pushing Refspecs
//////////////////////////
==== Refspec Push하기

//////////////////////////
It's nice that you can fetch namespaced references that way, but how does the QA team get their branches into a `qa/` namespace in the first place?
You accomplish that by using refspecs to push.
//////////////////////////
위와 같은 방식으로 네임스페이스를 사용하여 리모트 브랜치를 구별하여 사용하는 것은 꽤 괜찮은 방법이다. 만약 QA팀이 네임스페이스를 사용하지 않는 브랜치를 리모트에 네임스페이스를 써서 Push하려면 어떻게 해야 할까?
이럴 땐 Refspec으로 가능하다.

//////////////////////////
If the QA team wants to push their `master` branch to `qa/master` on the remote server, they can run
//////////////////////////
QA 팀이 `master` 브랜치를 리모트 저장소에 `qa/master`로 Push 하려면 다음과 같이 한다.

[source,console]
----
$ git push origin master:refs/heads/qa/master
----

//////////////////////////
If they want Git to do that automatically each time they run `git push origin`, they can add a `push` value to their config file:
//////////////////////////
`git push origin`을 실행할 때마다 Git이 자동으로 Push하게 하려면 아래와 같이 설정 파일에 `push` 항목을 추가한다.

[source,ini]
----
[remote "origin"]
	url = https://github.com/schacon/simplegit-progit
	fetch = +refs/heads/*:refs/remotes/origin/*
	push = refs/heads/master:refs/heads/qa/master
----

//////////////////////////
Again, this will cause a `git push origin` to push the local `master` branch to the remote `qa/master` branch by default.
//////////////////////////
다시 말하자면 위와 같이 설정은 `git push origin`을 실행할 때 로컬 브랜치 `master`를 리모트 브랜치 `qa/master`로 Push하도록 하는 설정이다.

//////////////////////////
==== Deleting References
//////////////////////////
==== Refs 삭제하기

//////////////////////////
You can also use the refspec to delete references from the remote server by running something like this:
//////////////////////////
Refspec으로 서버에 있는 Refs를 삭제할 수 있다.

[source,console]
----
$ git push origin :topic
----

//////////////////////////
Because the refspec is `<src>:<dst>`, by leaving off the `<src>` part, this basically says to make the topic branch on the remote nothing, which deletes it.
//////////////////////////
Refspec의 형식은 `<src>:<dst>`이니까 `<src>`를 비우고 실행하면 `<dst>`를 비우라는 명령이 된다. 이 결과 `<dst>`는 삭제된다.
